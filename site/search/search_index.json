{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5bc6\u7801\u5b66\u662f\u7814\u7a76\u5982\u4f55\u9690\u5bc6\u5730\u4f20\u9012\u4fe1\u606f\u7684\u5b66\u79d1\uff0c\u53ef\u5206\u4e3a\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\u3002 \u53e4\u5178\u5bc6\u7801\u5b66\u4e3b\u8981\u5173\u6ce8\u4fe1\u606f\u7684\u4fdd\u5bc6\u4e66\u5199\u548c\u4f20\u9012\uff0c\u4ee5\u53ca\u4e0e\u5176\u76f8\u5bf9\u5e94\u7684\u7834\u8bd1\u65b9\u6cd5\u3002 \u800c\u73b0\u4ee3\u5bc6\u7801\u5b66\u4e0d\u53ea\u5173\u6ce8\u4fe1\u606f\u4fdd\u5bc6\u95ee\u9898\uff0c\u8fd8\u540c\u65f6\u6d89\u53ca\u4fe1\u606f\u5b8c\u6574\u6027\u9a8c\u8bc1\uff08\u6d88\u606f\u9a8c\u8bc1\u7801\uff09\u3001\u4fe1\u606f\u53d1\u5e03\u7684\u4e0d\u53ef\u62b5\u8d56\u6027\uff08\u6570\u5b57\u7b7e\u540d\uff09\u3001\u4ee5\u53ca\u5728\u5206\u5e03\u5f0f\u8ba1\u7b97\u4e2d\u4ea7\u751f\u7684\u6765\u6e90\u4e8e\u5185\u90e8\u548c\u5916\u90e8\u7684\u653b\u51fb\u7684\u6240\u6709\u4fe1\u606f\u5b89\u5168\u95ee\u9898\u3002 crypto-wiki\u4e2d\u4e3b\u8981\u5305\u62ec\u4e86CTF\u4e2d\u5e38\u89c1\u7684\u7f16\u89e3\u7801\u65b9\u5f0f\u3001\u52a0\u89e3\u5bc6\u65b9\u5f0f\u4ee5\u53ca\u653b\u51fb\u65b9\u6cd5\u3002 \u5176\u4e2d\uff0c\u53e4\u5178\u5bc6\u7801\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u9762: \u66ff\u6362\u5bc6\u7801 \u4ee3\u6362\u5bc6\u7801 \u800c\u73b0\u4ee3\u5bc6\u7801\u5b66\u53ef\u5305\u62ec: \u5bf9\u79f0\u52a0\u5bc6 \u975e\u5bf9\u79f0\u52a0\u5bc6 \u54c8\u5e0c\u51fd\u6570 \u6570\u5b57\u7b7e\u540d \u653b\u51fb\u7c7b\u578b\u53ef\u5206\u4e3a: \u653b\u51fb\u7c7b\u578b \u8bf4\u660e \u552f\u5bc6\u6587\u653b\u51fb \u53ea\u62e5\u6709\u5bc6\u6587 \u5df2\u77e5\u660e\u6587\u653b\u51fb \u62e5\u6709\u5bc6\u6587\u4e0e\u5bf9\u5e94\u7684\u660e\u6587 \u9009\u62e9\u660e\u6587\u653b\u51fb \u62e5\u6709\u52a0\u5bc6\u6743\u9650\uff0c\u80fd\u591f\u5bf9\u660e\u6587\u52a0\u5bc6\u540e\u83b7\u5f97\u76f8\u5e94\u5bc6\u6587 \u9009\u62e9\u5bc6\u6587\u653b\u51fb \u62e5\u6709\u89e3\u5bc6\u6743\u9650\uff0c\u80fd\u591f\u5bf9\u5bc6\u6587\u89e3\u5bc6\u540e\u83b7\u5f97\u76f8\u5e94\u660e\u6587","title":"\u5bc6\u7801\u5b66\u7b80\u4ecb"},{"location":"ClassicalCrypto/AtbashCipher/","text":"\u57c3\u7279\u5df4\u4ec0\u7801\u7b80\u4ecb \u57c3\u7279\u5df4\u4ec0\u7801\u662f\u4e00\u79cd\u56fa\u5b9a\u5bc6\u94a5\u7684\u66ff\u6362\u5bc6\u7801\uff0c\u5176\u660e\u6587\u5b57\u6bcd\u8868\u4e0e\u5bc6\u6587\u5b57\u6bcd\u8868\u6b63\u597d\u76f8\u53cd\uff0c\u5373\u6240\u6709\u7684A\u90fd\u4f1a\u88ab\u66ff\u6362\u6210Z\uff0c\u6240\u6709\u7684B\u90fd\u4f1a\u88ab\u66ff\u6362\u6210Y\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002 \u57c3\u7279\u5df4\u4ec0\u7801\u6ca1\u6709\u5b89\u5168\u6027\u53ef\u8a00\uff0c\u56e0\u4e3a\u5b83\u7684\u5bc6\u94a5\u662f\u56fa\u5b9a\u7684\u3002 \u57c3\u7279\u5df4\u4ec0\u7801\u7684\u7b97\u6cd5 \u57c3\u7279\u5df4\u4ec0\u7801\u7684\u66ff\u6362\u89c4\u5219\u662f\uff1a ABCDEFGHIJKLMNOPQRSTUVWXYZ ZYXWVUTSRQPONMLKJIHGFEDCBA \u5982\u679c\u8981\u52a0\u5bc6\u4e00\u6bb5\u660e\u6587\uff0c\u6211\u4eec\u9996\u5148\u5728\u4e0a\u9762\u627e\u5230\u660e\u6587\uff0c\u7136\u540e\u4f7f\u7528\u7b2c\u4e8c\u884c\u7684\u5b57\u6bcd\u4ee3\u66ff\u5f53\u524d\u7684\u660e\u6587\u5b57\u6bcd\u3002 \u4e3e\u4f8b \u8bf7\u4f7f\u7528\u57c3\u7279\u5df4\u4ec0\u7801\u52a0\u5bc6ATTACK AT DAWN \u9996\u5148\u4ece\u660e\u6587\u5b57\u6bcd\u8868\u4e2d\u5bfb\u627eA\uff0c\u7136\u540e\u67e5\u770bA\u5bf9\u5e94\u7684\u5bc6\u6587\u5b57\u6bcd\u4e3aZ\uff0c\u4f9d\u6b21\u52a0\u5bc6\u6bcf\u4e2a\u660e\u6587\u5b57\u6bcd\uff0c\u6700\u540e\u6211\u4eec\u5f97\u5230\u52a0\u5bc6\u540e\u7684\u5bc6\u6587 ZGGZXP ZG WZDM \u89e3\u5bc6\u6d88\u606f\u7684\u8fc7\u7a0b\u548c\u52a0\u5bc6\u7684\u8fc7\u7a0b\u5b8c\u5168\u76f8\u540c\u3002 \u57c3\u7279\u5df4\u4ec0\u7801\u7684\u7a0b\u5e8f\u5b9e\u73b0 from pycipher import Atbash Atbash () . encipher ( defend the east wall of the castle ) wvuvmwgsvvzhgdzoolugsvxzhgov Atbash () . decipher ( wvuvmwgsvvzhgdzoolugsvxzhgov ) defendtheeastwallofthecastle \u57c3\u7279\u5df4\u4ec0\u7801\u7684\u5bc6\u7801\u5206\u6790 \u5982\u679c\u80fd\u786e\u8ba4\u4e00\u6bb5\u5bc6\u6587\u662f\u4f7f\u7528\u57c3\u7279\u5df4\u4ec0\u7801\u52a0\u5bc6\uff0c\u90a3\u5c31\u53ef\u4ee5\u7b80\u5355\u7684\u89e3\u5bc6\u5b83\uff08\u5bc6\u94a5\u53ea\u6709\u4e00\u79cd\u60c5\u51b5\uff09\u3002","title":"\u57c3\u7279\u5df4\u4ec0\u7801"},{"location":"ClassicalCrypto/AtbashCipher/#_1","text":"\u57c3\u7279\u5df4\u4ec0\u7801\u662f\u4e00\u79cd\u56fa\u5b9a\u5bc6\u94a5\u7684\u66ff\u6362\u5bc6\u7801\uff0c\u5176\u660e\u6587\u5b57\u6bcd\u8868\u4e0e\u5bc6\u6587\u5b57\u6bcd\u8868\u6b63\u597d\u76f8\u53cd\uff0c\u5373\u6240\u6709\u7684A\u90fd\u4f1a\u88ab\u66ff\u6362\u6210Z\uff0c\u6240\u6709\u7684B\u90fd\u4f1a\u88ab\u66ff\u6362\u6210Y\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002 \u57c3\u7279\u5df4\u4ec0\u7801\u6ca1\u6709\u5b89\u5168\u6027\u53ef\u8a00\uff0c\u56e0\u4e3a\u5b83\u7684\u5bc6\u94a5\u662f\u56fa\u5b9a\u7684\u3002","title":"\u57c3\u7279\u5df4\u4ec0\u7801\u7b80\u4ecb"},{"location":"ClassicalCrypto/AtbashCipher/#_2","text":"\u57c3\u7279\u5df4\u4ec0\u7801\u7684\u66ff\u6362\u89c4\u5219\u662f\uff1a ABCDEFGHIJKLMNOPQRSTUVWXYZ ZYXWVUTSRQPONMLKJIHGFEDCBA \u5982\u679c\u8981\u52a0\u5bc6\u4e00\u6bb5\u660e\u6587\uff0c\u6211\u4eec\u9996\u5148\u5728\u4e0a\u9762\u627e\u5230\u660e\u6587\uff0c\u7136\u540e\u4f7f\u7528\u7b2c\u4e8c\u884c\u7684\u5b57\u6bcd\u4ee3\u66ff\u5f53\u524d\u7684\u660e\u6587\u5b57\u6bcd\u3002 \u4e3e\u4f8b \u8bf7\u4f7f\u7528\u57c3\u7279\u5df4\u4ec0\u7801\u52a0\u5bc6ATTACK AT DAWN \u9996\u5148\u4ece\u660e\u6587\u5b57\u6bcd\u8868\u4e2d\u5bfb\u627eA\uff0c\u7136\u540e\u67e5\u770bA\u5bf9\u5e94\u7684\u5bc6\u6587\u5b57\u6bcd\u4e3aZ\uff0c\u4f9d\u6b21\u52a0\u5bc6\u6bcf\u4e2a\u660e\u6587\u5b57\u6bcd\uff0c\u6700\u540e\u6211\u4eec\u5f97\u5230\u52a0\u5bc6\u540e\u7684\u5bc6\u6587 ZGGZXP ZG WZDM \u89e3\u5bc6\u6d88\u606f\u7684\u8fc7\u7a0b\u548c\u52a0\u5bc6\u7684\u8fc7\u7a0b\u5b8c\u5168\u76f8\u540c\u3002","title":"\u57c3\u7279\u5df4\u4ec0\u7801\u7684\u7b97\u6cd5"},{"location":"ClassicalCrypto/AtbashCipher/#_3","text":"from pycipher import Atbash Atbash () . encipher ( defend the east wall of the castle ) wvuvmwgsvvzhgdzoolugsvxzhgov Atbash () . decipher ( wvuvmwgsvvzhgdzoolugsvxzhgov ) defendtheeastwallofthecastle","title":"\u57c3\u7279\u5df4\u4ec0\u7801\u7684\u7a0b\u5e8f\u5b9e\u73b0"},{"location":"ClassicalCrypto/AtbashCipher/#_4","text":"\u5982\u679c\u80fd\u786e\u8ba4\u4e00\u6bb5\u5bc6\u6587\u662f\u4f7f\u7528\u57c3\u7279\u5df4\u4ec0\u7801\u52a0\u5bc6\uff0c\u90a3\u5c31\u53ef\u4ee5\u7b80\u5355\u7684\u89e3\u5bc6\u5b83\uff08\u5bc6\u94a5\u53ea\u6709\u4e00\u79cd\u60c5\u51b5\uff09\u3002","title":"\u57c3\u7279\u5df4\u4ec0\u7801\u7684\u5bc6\u7801\u5206\u6790"},{"location":"ClassicalCrypto/AttackMethod/","text":"\u7b80\u4ecb \u7531\u4e8e\u53e4\u5178\u5bc6\u7801\u5b66\u6ca1\u6709\u5f3a\u5927\u7684\u7406\u8bba\u652f\u6491\uff0c\u5728\u8bbe\u8ba1\u7684\u65f6\u5019\u5b58\u5728\u4e00\u5b9a\u7684\u7f3a\u9677\uff0c\u53c8\u6216\u8005\u662f\u4ec5\u51ed\u7ecf\u9a8c\u6216\u7075\u611f\u800c\u8bbe\u8ba1\u7684\u5bc6\u7801\u3002\u56e0\u6b64\uff0c\u53e4\u5178\u5bc6\u7801\u901a\u5e38\u5f88\u5bb9\u6613\u7834\u89e3\u3002 \u66b4\u529b\u7834\u89e3 \u4e00\u4e9b\u7ecf\u5178\u5bc6\u7801\u4ec5\u6709\u5f88\u5c0f\u7684\u5bc6\u94a5\u7a7a\u95f4\uff0c\u6bd4\u5982\u51ef\u6492\u5bc6\u7801\uff1a\u4ec5\u670925\u4e2a\u5bc6\u94a5\u53ef\u80fd\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u5f0f\u53bb\u89e3\u5bc6\u3002 \u8bcd\u9891\u5206\u6790 \u66ff\u6362\u5bc6\u7801\u5177\u6709\u5f88\u5927\u7684\u5bc6\u94a5\u7a7a\u95f4\uff0c\u4f46\u901a\u8fc7\u5206\u6790\u660e\u6587\u8bed\u8a00\u4e2d\u7684\u9891\u7e41\u5b57\u6bcd\u5bf9\u5e94\u4e8e\u5bc6\u6587\u4e2d\u7684\u9891\u7e41\u5b57\u6bcd\uff0c\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u7834\u89e3\u66ff\u6362\u5bc6\u7801\u3002 Kasiski\u6d4b\u8bd5 \u66ff\u6362\u5bc6\u7801\u4e2d\u7684\u591a\u8868\u66ff\u6362\u53ef\u4ee5\u62b5\u5fa1\u8bcd\u9891\u5206\u6790\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5361\u897f\u65af\u57fa\u6d4b\u8bd5\u6765\u7834\u89e3\u3002","title":"\u53e4\u5178\u5bc6\u7801\u5b66\u5e38\u89c1\u7684\u653b\u51fb\u65b9\u5f0f"},{"location":"ClassicalCrypto/AttackMethod/#_1","text":"\u7531\u4e8e\u53e4\u5178\u5bc6\u7801\u5b66\u6ca1\u6709\u5f3a\u5927\u7684\u7406\u8bba\u652f\u6491\uff0c\u5728\u8bbe\u8ba1\u7684\u65f6\u5019\u5b58\u5728\u4e00\u5b9a\u7684\u7f3a\u9677\uff0c\u53c8\u6216\u8005\u662f\u4ec5\u51ed\u7ecf\u9a8c\u6216\u7075\u611f\u800c\u8bbe\u8ba1\u7684\u5bc6\u7801\u3002\u56e0\u6b64\uff0c\u53e4\u5178\u5bc6\u7801\u901a\u5e38\u5f88\u5bb9\u6613\u7834\u89e3\u3002","title":"\u7b80\u4ecb"},{"location":"ClassicalCrypto/AttackMethod/#_2","text":"\u4e00\u4e9b\u7ecf\u5178\u5bc6\u7801\u4ec5\u6709\u5f88\u5c0f\u7684\u5bc6\u94a5\u7a7a\u95f4\uff0c\u6bd4\u5982\u51ef\u6492\u5bc6\u7801\uff1a\u4ec5\u670925\u4e2a\u5bc6\u94a5\u53ef\u80fd\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u5f0f\u53bb\u89e3\u5bc6\u3002","title":"\u66b4\u529b\u7834\u89e3"},{"location":"ClassicalCrypto/AttackMethod/#_3","text":"\u66ff\u6362\u5bc6\u7801\u5177\u6709\u5f88\u5927\u7684\u5bc6\u94a5\u7a7a\u95f4\uff0c\u4f46\u901a\u8fc7\u5206\u6790\u660e\u6587\u8bed\u8a00\u4e2d\u7684\u9891\u7e41\u5b57\u6bcd\u5bf9\u5e94\u4e8e\u5bc6\u6587\u4e2d\u7684\u9891\u7e41\u5b57\u6bcd\uff0c\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u7834\u89e3\u66ff\u6362\u5bc6\u7801\u3002","title":"\u8bcd\u9891\u5206\u6790"},{"location":"ClassicalCrypto/AttackMethod/#kasiski","text":"\u66ff\u6362\u5bc6\u7801\u4e2d\u7684\u591a\u8868\u66ff\u6362\u53ef\u4ee5\u62b5\u5fa1\u8bcd\u9891\u5206\u6790\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5361\u897f\u65af\u57fa\u6d4b\u8bd5\u6765\u7834\u89e3\u3002","title":"Kasiski\u6d4b\u8bd5"},{"location":"ClassicalCrypto/Characterisation/","text":"\u5728\u5bf9\u5bc6\u6587\u8fdb\u884c\u5bc6\u7801\u5206\u6790\u7684\u65f6\u5019\uff0c\u901a\u5e38\u53ef\u80fd\u4f1a\u6709\u5f88\u591a\u5f85\u9009\u5bc6\u94a5\u3002\u6587\u672c\u8868\u5f81\u662f\u4e00\u79cd\u786e\u5b9a\u6587\u672c\u4e0e\u81ea\u7136\u82f1\u8bed\u76f8\u4f3c\u7a0b\u5ea6\u7684\u65b9\u6cd5\uff0c\u8fd9\u53ef\u4ee5\u4ece\u6210\u5343\u4e0a\u4e07\u7684\u5019\u9009\u5bc6\u94a5\u4e2d\u81ea\u52a8\u5e2e\u6211\u4eec\u627e\u5230\u6b63\u786e\u7684\u5bc6\u94a5\u3002 \u6709\u4e0d\u540c\u7684\u65b9\u6cd5\u7528\u6765\u8ba1\u7b97\u6587\u672c\u8868\u5f81\uff0c\u5176\u4e2d\u4e00\u4e9b\u65b9\u6cd5\u662f\u901a\u8fc7\u8ba1\u7b97\u67d0\u4e9b\u5b57\u7b26\u6216\u77ed\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u4e00\u4e9b\u65b9\u6cd5\u5219\u662f\u901a\u8fc7\u6d4b\u91cf\u6587\u672c\u5206\u5e03\u7684\u201c\u200b\u200b\u7c97\u7cd9\u5ea6\u201d\u6765\u8ba1\u7b97\u6587\u672c\u8868\u5f81\u3002 \u5361\u65b9\u7edf\u8ba1 \u5361\u65b9\u7edf\u8ba1\u91cf\u662f\u4e24\u4e2a\u5206\u7c7b\u6982\u7387\u5206\u5e03\u6709\u591a\u76f8\u4f3c\u7684\u5ea6\u91cf\u3002\u5728\u5bc6\u7801\u5206\u6790\u4e2d\uff0c\u5b83\u53ef\u7528\u4e8e\u5206\u6790\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7b49\u3002 \u91cd\u5408\u6307\u6570 \u91cd\u5408\u6307\u6570\u7528\u4e8e\u8868\u5f81\u5b57\u6bcd\u9891\u7387\u5206\u5e03\u7684\u201c\u7c97\u7cd9\u201d\u7a0b\u5ea6\u3002\u5728\u5bf9\u66ff\u6362\u52a0\u5bc6\u8fdb\u884c\u5bc6\u7801\u5206\u6790\u7684\u65f6\u5019\uff0c\u91cd\u5408\u6307\u6570\u4f1a\u663e\u793a\u8fd9\u79cd\u5bc6\u6587\u5206\u5e03\u6982\u7387\u4e0a\u7684\u201c\u5c16\u9510\u201d\u3002 \u5728\u8bc6\u522b\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5468\u671f\u65f6\u4e5f\u4f7f\u7528\u4e86\u91cd\u5408\u6307\u6570\u3002 \u5404\u8bed\u8a00\u91cd\u5408\u6307\u6570\u7684\u671f\u671b\u503c\uff1a \u8bed\u8a00 \u91cd\u5408\u6307\u6570 \u82f1\u8bed 1.73 \u6cd5\u56fd 2.02 \u5fb7\u8bed 2.05 \u610f\u5927\u5229 1.94 \u8461\u8404\u7259\u8bed 1.94 \u4fc4\u8bed 1.76 \u897f\u73ed\u7259\u8bed 1.94 \u9891\u7387\u5206\u6790 \u9891\u7387\u5206\u6790\u662f\u6307\u5728\u5bc6\u7801\u5206\u6790\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u4e0d\u540c\u5bc6\u6587\u51fa\u73b0\u6b21\u6570\u6765\u8fdb\u884c\u7edf\u8ba1\u7684\u65b9\u6cd5\uff0c\u4e3a\u7834\u89e3\u5bc6\u7801\u63d0\u4f9b\u66f4\u591a\u6709\u7528\u7684\u4fe1\u606f\u3002 \u56db\u5143\u7ec4\u7edf\u8ba1 \u56db\u5143\u7ec4\u7edf\u8ba1\u901a\u8fc7\u8ba1\u7b97\u6240\u6709\u957f\u5ea6\u4e3a4\u7684\u5bc6\u6587\u5757\u7684\u6982\u7387\u4e4b\u548c\u6765\u8868\u5f81\u6587\u672c\uff0c\u8bc4\u5206\u8d8a\u9ad8\u610f\u5473\u7740\u8fd9\u6bb5\u6587\u672c\u8d8a\u63a5\u8fd1\u81ea\u7136\u82f1\u8bed\uff0c\u53cd\u4e4b\u5219\u66f4\u4e0d\u63a5\u8fd1\u81ea\u7136\u8bed\u8a00\u3002 \u552f\u4e00\u89e3\u8ddd\u79bb \u5f53\u5bf9\u5bc6\u6587\u8fdb\u884c\u66b4\u529b\u7834\u89e3\u65f6\uff0c\u53ef\u80fd\u89e3\u5bc6\u51fa\u552f\u4e00\u6709\u610f\u4e49\u7684\u660e\u6587\u6240\u9700\u8981\u7684\u6700\u5c11\u5bc6\u6587\u91cf\u3002\u4e00\u822c\u800c\u8a00\uff0c\u552f\u4e00\u89e3\u8ddd\u79bb\u8d8a\u957f\uff0c\u5bc6\u7801\u4f53\u5236\u8d8a\u597d\u3002 \u5355\u8bcd\u7edf\u8ba1 \u901a\u8fc7\u5bf9\u6587\u672c\u8fdb\u884c\u5206\u8bcd\uff0c\u67e5\u627e\u5355\u8bcd\u6765\u786e\u5b9a\u6587\u672c\u4e0e\u82f1\u6587\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002 \u6ce8\u610f \u672c\u7ae0\u4ec5\u8be6\u7ec6\u9610\u8ff0\u4e86\u5361\u65b9\u7edf\u8ba1\u548c\u56db\u5143\u7ec4\u7edf\u8ba1... \u6b22\u8fce\u8865\u5145\u5176\u4ed6\u6587\u672c\u8868\u5f81\u65b9\u5f0f","title":"\u6587\u672c\u8868\u5f81\u7b80\u4ecb"},{"location":"ClassicalCrypto/Characterisation/#_1","text":"\u5361\u65b9\u7edf\u8ba1\u91cf\u662f\u4e24\u4e2a\u5206\u7c7b\u6982\u7387\u5206\u5e03\u6709\u591a\u76f8\u4f3c\u7684\u5ea6\u91cf\u3002\u5728\u5bc6\u7801\u5206\u6790\u4e2d\uff0c\u5b83\u53ef\u7528\u4e8e\u5206\u6790\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7b49\u3002","title":"\u5361\u65b9\u7edf\u8ba1"},{"location":"ClassicalCrypto/Characterisation/#_2","text":"\u91cd\u5408\u6307\u6570\u7528\u4e8e\u8868\u5f81\u5b57\u6bcd\u9891\u7387\u5206\u5e03\u7684\u201c\u7c97\u7cd9\u201d\u7a0b\u5ea6\u3002\u5728\u5bf9\u66ff\u6362\u52a0\u5bc6\u8fdb\u884c\u5bc6\u7801\u5206\u6790\u7684\u65f6\u5019\uff0c\u91cd\u5408\u6307\u6570\u4f1a\u663e\u793a\u8fd9\u79cd\u5bc6\u6587\u5206\u5e03\u6982\u7387\u4e0a\u7684\u201c\u5c16\u9510\u201d\u3002 \u5728\u8bc6\u522b\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5468\u671f\u65f6\u4e5f\u4f7f\u7528\u4e86\u91cd\u5408\u6307\u6570\u3002 \u5404\u8bed\u8a00\u91cd\u5408\u6307\u6570\u7684\u671f\u671b\u503c\uff1a \u8bed\u8a00 \u91cd\u5408\u6307\u6570 \u82f1\u8bed 1.73 \u6cd5\u56fd 2.02 \u5fb7\u8bed 2.05 \u610f\u5927\u5229 1.94 \u8461\u8404\u7259\u8bed 1.94 \u4fc4\u8bed 1.76 \u897f\u73ed\u7259\u8bed 1.94","title":"\u91cd\u5408\u6307\u6570"},{"location":"ClassicalCrypto/Characterisation/#_3","text":"\u9891\u7387\u5206\u6790\u662f\u6307\u5728\u5bc6\u7801\u5206\u6790\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u4e0d\u540c\u5bc6\u6587\u51fa\u73b0\u6b21\u6570\u6765\u8fdb\u884c\u7edf\u8ba1\u7684\u65b9\u6cd5\uff0c\u4e3a\u7834\u89e3\u5bc6\u7801\u63d0\u4f9b\u66f4\u591a\u6709\u7528\u7684\u4fe1\u606f\u3002","title":"\u9891\u7387\u5206\u6790"},{"location":"ClassicalCrypto/Characterisation/#_4","text":"\u56db\u5143\u7ec4\u7edf\u8ba1\u901a\u8fc7\u8ba1\u7b97\u6240\u6709\u957f\u5ea6\u4e3a4\u7684\u5bc6\u6587\u5757\u7684\u6982\u7387\u4e4b\u548c\u6765\u8868\u5f81\u6587\u672c\uff0c\u8bc4\u5206\u8d8a\u9ad8\u610f\u5473\u7740\u8fd9\u6bb5\u6587\u672c\u8d8a\u63a5\u8fd1\u81ea\u7136\u82f1\u8bed\uff0c\u53cd\u4e4b\u5219\u66f4\u4e0d\u63a5\u8fd1\u81ea\u7136\u8bed\u8a00\u3002","title":"\u56db\u5143\u7ec4\u7edf\u8ba1"},{"location":"ClassicalCrypto/Characterisation/#_5","text":"\u5f53\u5bf9\u5bc6\u6587\u8fdb\u884c\u66b4\u529b\u7834\u89e3\u65f6\uff0c\u53ef\u80fd\u89e3\u5bc6\u51fa\u552f\u4e00\u6709\u610f\u4e49\u7684\u660e\u6587\u6240\u9700\u8981\u7684\u6700\u5c11\u5bc6\u6587\u91cf\u3002\u4e00\u822c\u800c\u8a00\uff0c\u552f\u4e00\u89e3\u8ddd\u79bb\u8d8a\u957f\uff0c\u5bc6\u7801\u4f53\u5236\u8d8a\u597d\u3002","title":"\u552f\u4e00\u89e3\u8ddd\u79bb"},{"location":"ClassicalCrypto/Characterisation/#_6","text":"\u901a\u8fc7\u5bf9\u6587\u672c\u8fdb\u884c\u5206\u8bcd\uff0c\u67e5\u627e\u5355\u8bcd\u6765\u786e\u5b9a\u6587\u672c\u4e0e\u82f1\u6587\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002 \u6ce8\u610f \u672c\u7ae0\u4ec5\u8be6\u7ec6\u9610\u8ff0\u4e86\u5361\u65b9\u7edf\u8ba1\u548c\u56db\u5143\u7ec4\u7edf\u8ba1... \u6b22\u8fce\u8865\u5145\u5176\u4ed6\u6587\u672c\u8868\u5f81\u65b9\u5f0f","title":"\u5355\u8bcd\u7edf\u8ba1"},{"location":"ClassicalCrypto/Chi-squared/","text":"\u5361\u65b9\u7edf\u8ba1\u7b80\u4ecb \u5361\u65b9\u7edf\u8ba1\u662f\u8861\u91cf\u4e24\u79cd\u5206\u7c7b\u6982\u7387\u5206\u5e03\u76f8\u4f3c\u7a0b\u5ea6\u7684\u6307\u6807\uff0c\u5982\u679c\u4e24\u79cd\u5206\u7c7b\u7684\u5206\u5e03\u76f8\u540c\u5219\u5361\u65b9\u7edf\u8ba1\u4e3a0\uff0c\u5982\u679c\u5206\u5e03\u975e\u5e38\u4e0d\u540c\uff0c\u5219\u4f1a\u4ea7\u751f\u66f4\u9ad8\u7684\u6570\u503c\uff0c\u516c\u5f0f\u5982\u4e0b\uff1a \u5176\u4e2d\uff0cC A \u662f\u5b57\u6bcdA\u7684\u8ba1\u6570\uff08\u4e0d\u662f\u6982\u7387\uff09\uff0cE A \u662f\u5b57\u6bcdA\u7684\u9884\u671f\u8ba1\u6570\u3002 \u5361\u65b9\u7edf\u8ba1\u91cf\u662f\u7531\u6bcf\u4e2a\u5b57\u6bcd\u5b9e\u9645\u51fa\u73b0\u6b21\u6570\u548c\u9884\u671f\u51fa\u73b0\u6b21\u6570\u4e4b\u5dee\u7684\u5e73\u65b9\u9664\u4ee5\u9884\u671f\u51fa\u73b0\u6b21\u6570\u7684\u548c\u3002 \u6211\u4eec\u77e5\u9053\u6b63\u5e38\u7684\u82f1\u6587\u6587\u672c\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6982\u7387\uff0c\u800c\u5361\u65b9\u7edf\u8ba1\u4f7f\u7528\u7684\u662f\u8ba1\u6570\u5374\u4e0d\u662f\u6982\u7387\uff0c\u56e0\u6b64\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u6982\u7387\u8f6c\u6362\u4e3a\u9884\u671f\u6b21\u6570\u3002\u4e0b\u5217\u8868\u683c\u4e3a\u82f1\u6587\u5b57\u6bcd\u548c\u5b83\u4eec\u5728\u82f1\u6587\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u9891\u7387\uff1a \u5361\u65b9\u7edf\u8ba1\u4e3e\u4f8b \u4f8b\u5982\uff1a\u6b63\u5e38\u82f1\u6587\u6587\u672c\u4e2dE\u7684\u51fa\u73b0\u6982\u7387\u4e3a0.127\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6982\u7387\u4e58\u4ee5\u5bc6\u6587\u957f\u5ea6\u8ba1\u7b97\u51fa\u5728100\u4e2a\u82f1\u6587\u6587\u672c\u4e2d\u4f1a\u51fa\u73b012.7\u6b21\u5b57\u6bcdE\u3002 \u4f8b\u9898 \u8bf7\u8ba1\u7b97\u4ee5\u4e0b\u6587\u672c\u4e2dA\u7684 \u5361\u65b9\u7edf\u8ba1\u91cf \uff1a aoljhlzhyjpwolypzvulvmaollhysplzaruvduhukzptwslzajpwoly zpapzhafwlvmzbizapabapvujpwolypudopjolhjoslaalypuaolwsh pualeapzzopmalkhjlyahpuubtilyvmwshjlzkvduaolhswohila \uff08\u5171162\u4e2a\u5b57\u7b26\uff09 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b57\u6bcdA\u51fa\u73b0\u4e8618\u6b21\uff0c\u5982\u679c\u5b83\u662f\u82f1\u6587\uff0c\u6211\u4eec\u9884\u8ba1\u5b83\u4f1a\u51fa\u73b0162 * 0.082 = 13.284\u6b21\uff0c\u6839\u636e\u516c\u5f0f\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\uff1a \u63a5\u4e0b\u6765\u518d\u5bf9\u5176\u4ed6\u5b57\u6bcd\u6267\u884c\u6b64\u8fc7\u7a0b\uff0c\u7136\u540e\u5c0626\u4e2a\u5b57\u6bcd\u7684\u5361\u65b9\u7edf\u8ba1\u91cf\u76f8\u52a0\u3002\u5f97\u5230\u7684\u7ed3\u679c\u662f1634.09\u3002 \u7834\u89e3\u51ef\u6492\u5bc6\u7801 \u51ef\u6492\u5bc6\u7801\u5bc6\u94a5\u7a7a\u95f4\u8f83\u5c0f\uff0c\u53ea\u670926\u79cd\u53ef\u80fd\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u7834\u89e3\u51ef\u6492\u52a0\u5bc6\u3002 \u4f8b\u9898 \u8bf7\u7834\u89e3\u4e00\u6bb5\u51ef\u6492\u52a0\u5bc6\u7684\u5bc6\u6587\uff1a aoljhlzhyjpwolypzvulvmaollhysplzaruvduhukzptwslzajpwoly zpapzhafwlvmzbizapabapvujpwolypudopjolhjoslaalypuaolwsh pualeapzzopmalkhjlyahpuubtilyvmwshjlzkvduaolhswohila \u6211\u4eec\u9996\u5148\u8ba1\u7b97\u4f7f\u7528\u5bc6\u94a51\u7684\u5361\u65b9\u7edf\u8ba1\u91cf\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3001\u76f4\u5230\u8ba1\u7b97\u5230\u5bc6\u94a525\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a decryption key plaintext chi-squared ------------------------------------------------------------- 0 AOLJHLZHYJPWOLYPZVULVMAOL ... 1634.09 1 ZNKIGKYGXIOVNKXOYUTKULZNK ... 3441.13 2 YMJHFJXFWHNUMJWNXTSJTKYMJ ... 2973.71 3 XLIGEIWEVGMTLIVMWSRISJXLI ... 1551.67 4 WKHFDHVDUFLSKHULVRQHRIWKH ... 1199.40 5 VJGECGUCTEKRJGTKUQPGQHVJG ... 1466.62 6 UIFDBFTBSDJQIFSJTPOFPGUIF ... 1782.26 7 THECAESARCIPHERISONEOFTHE ... 33.67 8 SGDBZDRZQBHOGDQHRNMDNESGD ... 1747.07 9 RFCAYCQYPAGNFCPGQMLCMDRFC ... 1386.62 10 QEBZXBPXOZFMEBOFPLKBLCQEB ... 3423.96 11 PDAYWAOWNYELDANEOKJAKBPDA ... 809.38 12 OCZXVZNVMXDKCZMDNJIZJAOCZ ... 4646.96 13 NBYWUYMULWCJBYLCMIHYIZNBY ... 724.11 14 MAXVTXLTKVBIAXKBLHGXHYMAX ... 2159.43 15 LZWUSWKSJUAHZWJAKGFWGXLZW ... 1787.26 16 KYVTRVJRITZGYVIZJFEVFWKYV ... 3527.17 17 JXUSQUIQHSYFXUHYIEDUEVJXU ... 2967.66 18 IWTRPTHPGRXEWTGXHDCTDUIWT ... 1368.70 19 HVSQOSGOFQWDVSFWGCBSCTHVS ... 929.17 20 GURPNRFNEPVCUREVFBARBSGUR ... 461.19 21 FTQOMQEMDOUBTQDUEAZQARFTQ ... 4395.68 22 ESPNLPDLCNTASPCTDZYPZQESP ... 703.43 23 DROMKOCKBMSZROBSCYXOYPDRO ... 1226.79 24 CQNLJNBJALRYQNARBXWNXOCQN ... 1817.85 25 BPMKIMAIZKQXPMZQAWVMWNBPM ... 2939.16 \u901a\u8fc7\u5206\u6790\u4e0a\u8868\uff0c\u53ef\u4ee5\u770b\u5230\u5bc6\u94a57\u7684\u5361\u65b9\u7edf\u8ba1\u91cf\u6700\u63a5\u8fd10\uff0c\u56e0\u6b64\u63a8\u65ad\u51fa\u52a0\u5bc6\u7684\u5bc6\u94a5\u4e3a7\u3002","title":"\u5361\u65b9\u7edf\u8ba1"},{"location":"ClassicalCrypto/Chi-squared/#_1","text":"\u5361\u65b9\u7edf\u8ba1\u662f\u8861\u91cf\u4e24\u79cd\u5206\u7c7b\u6982\u7387\u5206\u5e03\u76f8\u4f3c\u7a0b\u5ea6\u7684\u6307\u6807\uff0c\u5982\u679c\u4e24\u79cd\u5206\u7c7b\u7684\u5206\u5e03\u76f8\u540c\u5219\u5361\u65b9\u7edf\u8ba1\u4e3a0\uff0c\u5982\u679c\u5206\u5e03\u975e\u5e38\u4e0d\u540c\uff0c\u5219\u4f1a\u4ea7\u751f\u66f4\u9ad8\u7684\u6570\u503c\uff0c\u516c\u5f0f\u5982\u4e0b\uff1a \u5176\u4e2d\uff0cC A \u662f\u5b57\u6bcdA\u7684\u8ba1\u6570\uff08\u4e0d\u662f\u6982\u7387\uff09\uff0cE A \u662f\u5b57\u6bcdA\u7684\u9884\u671f\u8ba1\u6570\u3002 \u5361\u65b9\u7edf\u8ba1\u91cf\u662f\u7531\u6bcf\u4e2a\u5b57\u6bcd\u5b9e\u9645\u51fa\u73b0\u6b21\u6570\u548c\u9884\u671f\u51fa\u73b0\u6b21\u6570\u4e4b\u5dee\u7684\u5e73\u65b9\u9664\u4ee5\u9884\u671f\u51fa\u73b0\u6b21\u6570\u7684\u548c\u3002 \u6211\u4eec\u77e5\u9053\u6b63\u5e38\u7684\u82f1\u6587\u6587\u672c\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6982\u7387\uff0c\u800c\u5361\u65b9\u7edf\u8ba1\u4f7f\u7528\u7684\u662f\u8ba1\u6570\u5374\u4e0d\u662f\u6982\u7387\uff0c\u56e0\u6b64\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u6982\u7387\u8f6c\u6362\u4e3a\u9884\u671f\u6b21\u6570\u3002\u4e0b\u5217\u8868\u683c\u4e3a\u82f1\u6587\u5b57\u6bcd\u548c\u5b83\u4eec\u5728\u82f1\u6587\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u9891\u7387\uff1a","title":"\u5361\u65b9\u7edf\u8ba1\u7b80\u4ecb"},{"location":"ClassicalCrypto/Chi-squared/#_2","text":"\u4f8b\u5982\uff1a\u6b63\u5e38\u82f1\u6587\u6587\u672c\u4e2dE\u7684\u51fa\u73b0\u6982\u7387\u4e3a0.127\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6982\u7387\u4e58\u4ee5\u5bc6\u6587\u957f\u5ea6\u8ba1\u7b97\u51fa\u5728100\u4e2a\u82f1\u6587\u6587\u672c\u4e2d\u4f1a\u51fa\u73b012.7\u6b21\u5b57\u6bcdE\u3002 \u4f8b\u9898 \u8bf7\u8ba1\u7b97\u4ee5\u4e0b\u6587\u672c\u4e2dA\u7684 \u5361\u65b9\u7edf\u8ba1\u91cf \uff1a aoljhlzhyjpwolypzvulvmaollhysplzaruvduhukzptwslzajpwoly zpapzhafwlvmzbizapabapvujpwolypudopjolhjoslaalypuaolwsh pualeapzzopmalkhjlyahpuubtilyvmwshjlzkvduaolhswohila \uff08\u5171162\u4e2a\u5b57\u7b26\uff09 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b57\u6bcdA\u51fa\u73b0\u4e8618\u6b21\uff0c\u5982\u679c\u5b83\u662f\u82f1\u6587\uff0c\u6211\u4eec\u9884\u8ba1\u5b83\u4f1a\u51fa\u73b0162 * 0.082 = 13.284\u6b21\uff0c\u6839\u636e\u516c\u5f0f\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\uff1a \u63a5\u4e0b\u6765\u518d\u5bf9\u5176\u4ed6\u5b57\u6bcd\u6267\u884c\u6b64\u8fc7\u7a0b\uff0c\u7136\u540e\u5c0626\u4e2a\u5b57\u6bcd\u7684\u5361\u65b9\u7edf\u8ba1\u91cf\u76f8\u52a0\u3002\u5f97\u5230\u7684\u7ed3\u679c\u662f1634.09\u3002","title":"\u5361\u65b9\u7edf\u8ba1\u4e3e\u4f8b"},{"location":"ClassicalCrypto/Chi-squared/#_3","text":"\u51ef\u6492\u5bc6\u7801\u5bc6\u94a5\u7a7a\u95f4\u8f83\u5c0f\uff0c\u53ea\u670926\u79cd\u53ef\u80fd\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u7834\u89e3\u51ef\u6492\u52a0\u5bc6\u3002 \u4f8b\u9898 \u8bf7\u7834\u89e3\u4e00\u6bb5\u51ef\u6492\u52a0\u5bc6\u7684\u5bc6\u6587\uff1a aoljhlzhyjpwolypzvulvmaollhysplzaruvduhukzptwslzajpwoly zpapzhafwlvmzbizapabapvujpwolypudopjolhjoslaalypuaolwsh pualeapzzopmalkhjlyahpuubtilyvmwshjlzkvduaolhswohila \u6211\u4eec\u9996\u5148\u8ba1\u7b97\u4f7f\u7528\u5bc6\u94a51\u7684\u5361\u65b9\u7edf\u8ba1\u91cf\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3001\u76f4\u5230\u8ba1\u7b97\u5230\u5bc6\u94a525\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a decryption key plaintext chi-squared ------------------------------------------------------------- 0 AOLJHLZHYJPWOLYPZVULVMAOL ... 1634.09 1 ZNKIGKYGXIOVNKXOYUTKULZNK ... 3441.13 2 YMJHFJXFWHNUMJWNXTSJTKYMJ ... 2973.71 3 XLIGEIWEVGMTLIVMWSRISJXLI ... 1551.67 4 WKHFDHVDUFLSKHULVRQHRIWKH ... 1199.40 5 VJGECGUCTEKRJGTKUQPGQHVJG ... 1466.62 6 UIFDBFTBSDJQIFSJTPOFPGUIF ... 1782.26 7 THECAESARCIPHERISONEOFTHE ... 33.67 8 SGDBZDRZQBHOGDQHRNMDNESGD ... 1747.07 9 RFCAYCQYPAGNFCPGQMLCMDRFC ... 1386.62 10 QEBZXBPXOZFMEBOFPLKBLCQEB ... 3423.96 11 PDAYWAOWNYELDANEOKJAKBPDA ... 809.38 12 OCZXVZNVMXDKCZMDNJIZJAOCZ ... 4646.96 13 NBYWUYMULWCJBYLCMIHYIZNBY ... 724.11 14 MAXVTXLTKVBIAXKBLHGXHYMAX ... 2159.43 15 LZWUSWKSJUAHZWJAKGFWGXLZW ... 1787.26 16 KYVTRVJRITZGYVIZJFEVFWKYV ... 3527.17 17 JXUSQUIQHSYFXUHYIEDUEVJXU ... 2967.66 18 IWTRPTHPGRXEWTGXHDCTDUIWT ... 1368.70 19 HVSQOSGOFQWDVSFWGCBSCTHVS ... 929.17 20 GURPNRFNEPVCUREVFBARBSGUR ... 461.19 21 FTQOMQEMDOUBTQDUEAZQARFTQ ... 4395.68 22 ESPNLPDLCNTASPCTDZYPZQESP ... 703.43 23 DROMKOCKBMSZROBSCYXOYPDRO ... 1226.79 24 CQNLJNBJALRYQNARBXWNXOCQN ... 1817.85 25 BPMKIMAIZKQXPMZQAWVMWNBPM ... 2939.16 \u901a\u8fc7\u5206\u6790\u4e0a\u8868\uff0c\u53ef\u4ee5\u770b\u5230\u5bc6\u94a57\u7684\u5361\u65b9\u7edf\u8ba1\u91cf\u6700\u63a5\u8fd10\uff0c\u56e0\u6b64\u63a8\u65ad\u51fa\u52a0\u5bc6\u7684\u5bc6\u94a5\u4e3a7\u3002","title":"\u7834\u89e3\u51ef\u6492\u5bc6\u7801"},{"location":"ClassicalCrypto/IndexofCoincidence/","text":"\u91cd\u5408\u6307\u6570\u7b80\u4ecb \u91cd\u5408\u6307\u6570\u662f\u8861\u91cf\u9891\u7387\u5206\u5e03\u548c\u5747\u5300\u5206\u5e03\u76f8\u4f3c\u7a0b\u5ea6\u7684\u5ea6\u91cf\u3002\u9891\u7387\u5206\u6790\u662f\u7ecf\u5178\u5bc6\u7801\u5206\u6790\u91cc\u7684\u91cd\u8981\u5de5\u5177\uff0c\u5982\u679c\u6211\u4eec\u5206\u522b\u4f7f\u7528\u66ff\u6362\u5bc6\u7801\u548c\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u52a0\u5bc6\u4e00\u6bb5\u6587\u672c\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u7ef4\u5409\u5c3c\u4e9a\u7684\u9891\u7387\u5206\u5e03\u66f4\u52a0\u5e73\u5766\uff0c\u800c\u66ff\u6362\u5bc6\u7801\u7684\u9891\u7387\u5206\u5e03\u66f4\u52a0\u201c\u7c97\u7cd9\u201d\u3002\u800c\u91cd\u5408\u6307\u6570\u6b63\u662f\u5c06\u9891\u7387\u5206\u5e03\u8fd9\u79cd\u76f4\u89c2\u7684\u89c6\u89c9\u8f6c\u6362\u4e3a\u6570\u5b57\u8868\u8fbe\u5f0f\u3002 \u5982\u679c\u9891\u7387\u5206\u5e03\u975e\u5e38\u201c\u7c97\u7cd9\u201d\uff0c\u91cd\u5408\u6307\u6570\u4f1a\u8f83\u9ad8\u3002\u5982\u679c\u9891\u7387\u5206\u5e03\u975e\u5e38\u5e73\u5766\uff0c\u91cd\u5408\u6307\u6570\u4f1a\u66f4\u4f4e\u3002 \u5982\u679c\u4e00\u6bb5\u82f1\u6587\u6587\u672c\u4f7f\u7528\u66ff\u6362\u5bc6\u7801\u52a0\u5bc6\uff0c\u90a3\u8fd9\u6bb5\u5bc6\u6587\u7684IC\uff08\u91cd\u5408\u6307\u6570\uff09\u4e0d\u4f1a\u6539\u53d8\uff08\u5982\u4e0a\u56fe\uff09\u3002 \u91cd\u5408\u6307\u6570 IC\uff08\u91cd\u5408\u6307\u6570\uff09\u7684\u5b9a\u4e49\u4e3a\uff1a \u5176\u4e2df i \u662f\u5bc6\u6587\u4e2d\u5b57\u6bcdi\u7684\u8ba1\u6570\uff08\u5176\u4e2di = A\uff0cB\uff0c...\uff0cZ\uff09\uff0cN\u662f\u5bc6\u6587\u4e2d\u7684\u5b57\u6bcd\u603b\u6570\u3002 A Measure of Roughness \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u6bb5\u5927\u69821000\u4e2a\u5b57\u7b26\u7684\u82f1\u6587\u6587\u672c\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u65ad\u51fa\u5b57\u6bcdE\u51fa\u73b0\u7684\u6b21\u6570\u7ea6\u4e3a127\u6b21\uff08\u5b57\u6bcdE\u7684\u6982\u7387\u4e3a12.7%\uff0c\u89c1\u9891\u7387\u5206\u6790\u5c0f\u8282\uff09\uff0c\u5373\uff1a \u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u524d\u63d0\u5c31\u662f\u6240\u6709\u7684\u6982\u7387\u4e4b\u548c\u4e3a1\uff1a \u5982\u679c\u5bc6\u6587\u4e2d\u6240\u6709\u7684\u5b57\u6bcd\u90fd\u4ee5\u76f8\u540c\u7684\u9891\u7387\u51fa\u73b0\uff0c\u5219\u6bcf\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u6982\u7387\u90fd\u4e3a1/26\uff08\u6216\u8005\u8bf4\u662f0.0385\uff09\uff0c\u8fd9\u5c06\u5f97\u5230\u5b8c\u5168\u5e73\u5766\u7684\u9891\u7387\u5206\u5e03\u3002\u5b57\u6bcdE\u51fa\u73b0\u7684\u6982\u7387\u548c\u9884\u671f\u6982\u7387\u4e4b\u5dee\u4e3aP E - (1/26) = 0.127-0.0385 = 0.0885\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u8ba1\u7b97\u6240\u6709\u5b57\u6bcd\u7684\u5dee\u5f02\u4e4b\u548c\uff0c\u4f46\u8fd9\u91cc\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u6709\u4e9b\u5b57\u6bcd\u4f1a\u4ea7\u751f\u6b63\u5dee\u5f02\u3001\u6709\u4e9b\u5b57\u6bcd\u4f1a\u4ea7\u751f\u8d1f\u5dee\u5f02\uff0c\u8fd9\u610f\u5473\u7740\u603b\u5dee\u5f02\u4f1a\u76f8\u4e92\u62b5\u6d88\uff0c\u6700\u7ec8\u7ed3\u679c\u90fd\u4e3a0. \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u5dee\u5f02\u8fdb\u884c\u5e73\u65b9\u5316\u5904\u7406\uff0c\u786e\u4fdd\u5dee\u5f02\u4e4b\u548c\u59cb\u7ec8\u4e3a\u6b63\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e4b\u4e3aM.R.\uff08A Measure of Roughness\uff09\uff1a \u53ef\u4ee5\u5316\u7b80\u4e3a\uff1a \u5373\uff1a \u53c8\u6240\u6709\u5b57\u6bcdP i \u4e4b\u548c\u4e3a1\uff0c\u6545\uff1a \u91cd\u5408\u6307\u6570\u7684\u5b9e\u8d28 \u8fd9\u4e2a\u516c\u5f0f\u7a76\u7adf\u610f\u5473\u7740\u4ec0\u4e48\u5462\uff1f P A \u662f\u968f\u673a\u9009\u62e9\u5b57\u6bcdA\u7684\u6982\u7387\uff0c\u800cP 2 A \u662f\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u5b57\u6bcd\u90fd\u662fA\u7684\u6982\u7387\uff0c\u540c\u6837P 2 B \u662f\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u5b57\u6bcd\u90fd\u662fB\u7684\u6982\u7387\u3002\u5982\u679c\u60f3\u77e5\u9053\u968f\u673a\u6311\u9009\u7684\u4e24\u4e2a\u5b57\u6bcd\u662f\u540c\u4e00\u5b57\u6bcd\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\uff1a \u901a\u8fc7\u8fd9\u4e00\u70b9\u6211\u4eec\u53ef\u4ee5\u8fd1\u4f3c\u8ba1\u7b97M.R.\u3002\u5982\u679c\u4e00\u6bb5\u5bc6\u6587\u4e2d\u670910\u4e2aA\uff0c\u7b2c\u4e00\u6b21\u53ef\u4ee5\u4ece10\u4e2aA\u4e2d\u9009\u62e9\uff0c\u7b2c\u4e8c\u6b21\u4ec5\u5269\u4e0b9\u4e2aA\u4f9b\u9009\u62e9\u3002\u8fd9\u610f\u5473\u7740\u670910*9\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u9009\u62e9A\u3002\u5728\u8fd9\u4e2a\u8ba1\u6570\u4e2d\uff0c\u6bcf\u5bf9\u5747\u88ab\u7edf\u8ba1\u4e86\u4e24\u6b21\uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u6570\u503c\u4e3a (10*9)\u3002 \u56e0\u6b64\u7edf\u8ba1\u5bc6\u6587\u4e2dA\u5bf9\u7684\u8ba1\u7b97\u65b9\u6cd5\u4e3af A (f A -1)/2\uff0c\u540c\u6837\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u5b57\u6bcd\u5747\u4e3aB\u7684\u6570\u91cf\u4e3a\uff1af B (f B -1)/2 \u90a3\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u51fa\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u5b57\u6bcd\uff0c\u4e14\u4e24\u4e2a\u5b57\u6bcd\u76f8\u540c\u7684\u516c\u5f0f\u4e3a\uff1a \u5982\u679c\u6211\u4eec\u7684\u5bc6\u6587\u4e2d\u6709N\u4e2a\u5b57\u6bcd\uff0c\u5219\u603b\u5171\u6709N(N-1)/2\u4e2a\u9009\u62e92\u4e2a\u5b57\u6bcd\u7684\u65b9\u5f0f\u30022\u4e2a\u5b57\u6bcd\u76f8\u540c\u7684\u53ef\u80fd\u6027\u662f\u9009\u62e92\u4e2a\u76f8\u540c\u5b57\u6bcd\u7684\u65b9\u5f0f\u7684\u603b\u6570\u9664\u4ee5\u9009\u62e92\u4e2a\u5b57\u6bcd\u7684\u65b9\u5f0f\u3002 \u8fd9\u4ee3\u8868\u4e86\u4e24\u4e2a\u5b57\u6bcd\u76f8\u4f3c\u7684\u53ef\u80fd\u6027\uff0c\u4e5f\u5c31\u662fIC\uff08\u91cd\u5408\u6307\u6570\uff09 \u91cd\u5408\u6307\u6570\u7a0b\u5e8f\u5b9e\u73b0 \u6ce8\u610f \u8bf7\u6ce8\u610f\uff1a\u4ee5\u540e\u5728\u7a0b\u5e8f\u4e2d\u5f15\u7528IndexCoin\uff0c\u5747\u6307\u7684\u662f\u8be5\u6587\u4ef6\u3002 ### ### FileName:IndexCoin.py ### Date:2018-08-07 ### Time:12:33 GMT ### Author:nianhua ### def Index_of_Coincidence ( string ): cipher = IC = 0 alpha = { a : 0 , b : 0 , c : 0 , d : 0 , e : 0 , f : 0 , g : 0 , h : 0 , i : 0 , j : 0 , k : 0 , l : 0 , m : 0 , n : 0 , o : 0 , p : 0 , q : 0 , r : 0 , s : 0 , t : 0 , u : 0 , v : 0 , w : 0 , x : 0 , y : 0 , z : 0 } for i in string : if i . isalpha () == True : cipher += i . lower () N = len ( cipher ) N = float ( N * ( N - 1 )) for i in cipher : alpha [ i ] += 1 for i in alpha : i = alpha [ i ] IC += i * ( i - 1 ) IC = IC / N return IC \u91cd\u5408\u6307\u6570\u8ba1\u7b97\u4e3e\u4f8b \u4e3e\u4f8b \u8bf7\u8ba1\u7b97\u4ee5\u4e0b\u4e24\u6bb5\u5bc6\u6587\u7684IC\uff08\u91cd\u5408\u6307\u6570\uff09\u3002 \u66ff\u6362\u5bc6\u7801\uff1a wmzfxtdhzfngfwxwnwxjevxdmzoxfkvxdmzowmkwmkfgzzexenfzpjotkebmneloz lfjpbzkofxwvjefxfwfjpfngfwxwnwxeszyzobdhkxewzawvmkokvwzopjoklxppz ozewvxdmzowzawvmkokvwzoxwlxppzofpojtvkzfkovxdmzoxewmkwwmzvxdmzokh dmkgzwxfejwfxtdhbwmzkhdmkgzwfmxpwzlxwxfvjtdhzwzhbrntghzl \u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\uff1a vptzmdrttzysubxaykkwcjmgjmgpwreqeoiivppalrujtlrzpchljftupucywvsyi uuwufirtaxagfpaxzxjqnhbfjvqibxzpotciiaxahmevmmagyczpjxvtndyeuknul vvpbrptygzilbkeppyetvmgpxuknulvjhzdtgrgapygzrptymevppaxygkxwlvtia wlrdmipweqbhpqgngioirnxwhfvvawpjkglxamjewbwpvvmafnlojalh \u4f7f\u7528\u4e0a\u4e00\u5c0f\u8282\u7684\u91cd\u5408\u6307\u6570\u8ba1\u7b97\u7a0b\u5e8f\u5373\u53ef\uff1a from IndexCoin import * print Index_of_Coincidence ( vptzmdrttzysubxaykkwcjmgjmgpwreqeoiivppalrujtlrzpchljftupucywvsyiuuwufirtaxagfpaxzxjqnhbfjvqibxzpotciiaxahmevmmagyczpjxvtndyeuknulvvpbrptygzilbkeppyetvmgpxuknulvjhzdtgrgapygzrptymevppaxygkxwlvtiawlrdmipweqbhpqgngioirnxwhfvvawpjkglxamjewbwpvvmafnlojalh ) print Index_of_Coincidence ( wmzfxtdhzfngfwxwnwxjevxdmzoxfkvxdmzowmkwmkfgzzexenfzpjotkebmnelozlfjpbzkofxwvjefxfwfjpfngfwxwnwxeszyzobdhkxewzawvmkokvwzopjoklxppzozewvxdmzowzawvmkokvwzoxwlxppzofpojtvkzfkovxdmzoxewmkwwmzvxdmzokhdmkgzwxfejwfxtdhbwmzkhdmkgzwfmxpwzlxwxfvjtdhzwzhbrntghzl )","title":"\u91cd\u5408\u6307\u6570"},{"location":"ClassicalCrypto/IndexofCoincidence/#_1","text":"\u91cd\u5408\u6307\u6570\u662f\u8861\u91cf\u9891\u7387\u5206\u5e03\u548c\u5747\u5300\u5206\u5e03\u76f8\u4f3c\u7a0b\u5ea6\u7684\u5ea6\u91cf\u3002\u9891\u7387\u5206\u6790\u662f\u7ecf\u5178\u5bc6\u7801\u5206\u6790\u91cc\u7684\u91cd\u8981\u5de5\u5177\uff0c\u5982\u679c\u6211\u4eec\u5206\u522b\u4f7f\u7528\u66ff\u6362\u5bc6\u7801\u548c\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u52a0\u5bc6\u4e00\u6bb5\u6587\u672c\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u7ef4\u5409\u5c3c\u4e9a\u7684\u9891\u7387\u5206\u5e03\u66f4\u52a0\u5e73\u5766\uff0c\u800c\u66ff\u6362\u5bc6\u7801\u7684\u9891\u7387\u5206\u5e03\u66f4\u52a0\u201c\u7c97\u7cd9\u201d\u3002\u800c\u91cd\u5408\u6307\u6570\u6b63\u662f\u5c06\u9891\u7387\u5206\u5e03\u8fd9\u79cd\u76f4\u89c2\u7684\u89c6\u89c9\u8f6c\u6362\u4e3a\u6570\u5b57\u8868\u8fbe\u5f0f\u3002 \u5982\u679c\u9891\u7387\u5206\u5e03\u975e\u5e38\u201c\u7c97\u7cd9\u201d\uff0c\u91cd\u5408\u6307\u6570\u4f1a\u8f83\u9ad8\u3002\u5982\u679c\u9891\u7387\u5206\u5e03\u975e\u5e38\u5e73\u5766\uff0c\u91cd\u5408\u6307\u6570\u4f1a\u66f4\u4f4e\u3002 \u5982\u679c\u4e00\u6bb5\u82f1\u6587\u6587\u672c\u4f7f\u7528\u66ff\u6362\u5bc6\u7801\u52a0\u5bc6\uff0c\u90a3\u8fd9\u6bb5\u5bc6\u6587\u7684IC\uff08\u91cd\u5408\u6307\u6570\uff09\u4e0d\u4f1a\u6539\u53d8\uff08\u5982\u4e0a\u56fe\uff09\u3002 \u91cd\u5408\u6307\u6570 IC\uff08\u91cd\u5408\u6307\u6570\uff09\u7684\u5b9a\u4e49\u4e3a\uff1a \u5176\u4e2df i \u662f\u5bc6\u6587\u4e2d\u5b57\u6bcdi\u7684\u8ba1\u6570\uff08\u5176\u4e2di = A\uff0cB\uff0c...\uff0cZ\uff09\uff0cN\u662f\u5bc6\u6587\u4e2d\u7684\u5b57\u6bcd\u603b\u6570\u3002","title":"\u91cd\u5408\u6307\u6570\u7b80\u4ecb"},{"location":"ClassicalCrypto/IndexofCoincidence/#a-measure-of-roughness","text":"\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u6bb5\u5927\u69821000\u4e2a\u5b57\u7b26\u7684\u82f1\u6587\u6587\u672c\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u65ad\u51fa\u5b57\u6bcdE\u51fa\u73b0\u7684\u6b21\u6570\u7ea6\u4e3a127\u6b21\uff08\u5b57\u6bcdE\u7684\u6982\u7387\u4e3a12.7%\uff0c\u89c1\u9891\u7387\u5206\u6790\u5c0f\u8282\uff09\uff0c\u5373\uff1a \u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u524d\u63d0\u5c31\u662f\u6240\u6709\u7684\u6982\u7387\u4e4b\u548c\u4e3a1\uff1a \u5982\u679c\u5bc6\u6587\u4e2d\u6240\u6709\u7684\u5b57\u6bcd\u90fd\u4ee5\u76f8\u540c\u7684\u9891\u7387\u51fa\u73b0\uff0c\u5219\u6bcf\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u6982\u7387\u90fd\u4e3a1/26\uff08\u6216\u8005\u8bf4\u662f0.0385\uff09\uff0c\u8fd9\u5c06\u5f97\u5230\u5b8c\u5168\u5e73\u5766\u7684\u9891\u7387\u5206\u5e03\u3002\u5b57\u6bcdE\u51fa\u73b0\u7684\u6982\u7387\u548c\u9884\u671f\u6982\u7387\u4e4b\u5dee\u4e3aP E - (1/26) = 0.127-0.0385 = 0.0885\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u8ba1\u7b97\u6240\u6709\u5b57\u6bcd\u7684\u5dee\u5f02\u4e4b\u548c\uff0c\u4f46\u8fd9\u91cc\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u6709\u4e9b\u5b57\u6bcd\u4f1a\u4ea7\u751f\u6b63\u5dee\u5f02\u3001\u6709\u4e9b\u5b57\u6bcd\u4f1a\u4ea7\u751f\u8d1f\u5dee\u5f02\uff0c\u8fd9\u610f\u5473\u7740\u603b\u5dee\u5f02\u4f1a\u76f8\u4e92\u62b5\u6d88\uff0c\u6700\u7ec8\u7ed3\u679c\u90fd\u4e3a0. \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u5dee\u5f02\u8fdb\u884c\u5e73\u65b9\u5316\u5904\u7406\uff0c\u786e\u4fdd\u5dee\u5f02\u4e4b\u548c\u59cb\u7ec8\u4e3a\u6b63\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e4b\u4e3aM.R.\uff08A Measure of Roughness\uff09\uff1a \u53ef\u4ee5\u5316\u7b80\u4e3a\uff1a \u5373\uff1a \u53c8\u6240\u6709\u5b57\u6bcdP i \u4e4b\u548c\u4e3a1\uff0c\u6545\uff1a \u91cd\u5408\u6307\u6570\u7684\u5b9e\u8d28 \u8fd9\u4e2a\u516c\u5f0f\u7a76\u7adf\u610f\u5473\u7740\u4ec0\u4e48\u5462\uff1f P A \u662f\u968f\u673a\u9009\u62e9\u5b57\u6bcdA\u7684\u6982\u7387\uff0c\u800cP 2 A \u662f\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u5b57\u6bcd\u90fd\u662fA\u7684\u6982\u7387\uff0c\u540c\u6837P 2 B \u662f\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u5b57\u6bcd\u90fd\u662fB\u7684\u6982\u7387\u3002\u5982\u679c\u60f3\u77e5\u9053\u968f\u673a\u6311\u9009\u7684\u4e24\u4e2a\u5b57\u6bcd\u662f\u540c\u4e00\u5b57\u6bcd\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\uff1a \u901a\u8fc7\u8fd9\u4e00\u70b9\u6211\u4eec\u53ef\u4ee5\u8fd1\u4f3c\u8ba1\u7b97M.R.\u3002\u5982\u679c\u4e00\u6bb5\u5bc6\u6587\u4e2d\u670910\u4e2aA\uff0c\u7b2c\u4e00\u6b21\u53ef\u4ee5\u4ece10\u4e2aA\u4e2d\u9009\u62e9\uff0c\u7b2c\u4e8c\u6b21\u4ec5\u5269\u4e0b9\u4e2aA\u4f9b\u9009\u62e9\u3002\u8fd9\u610f\u5473\u7740\u670910*9\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u9009\u62e9A\u3002\u5728\u8fd9\u4e2a\u8ba1\u6570\u4e2d\uff0c\u6bcf\u5bf9\u5747\u88ab\u7edf\u8ba1\u4e86\u4e24\u6b21\uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u6570\u503c\u4e3a (10*9)\u3002 \u56e0\u6b64\u7edf\u8ba1\u5bc6\u6587\u4e2dA\u5bf9\u7684\u8ba1\u7b97\u65b9\u6cd5\u4e3af A (f A -1)/2\uff0c\u540c\u6837\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u5b57\u6bcd\u5747\u4e3aB\u7684\u6570\u91cf\u4e3a\uff1af B (f B -1)/2 \u90a3\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u51fa\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u5b57\u6bcd\uff0c\u4e14\u4e24\u4e2a\u5b57\u6bcd\u76f8\u540c\u7684\u516c\u5f0f\u4e3a\uff1a \u5982\u679c\u6211\u4eec\u7684\u5bc6\u6587\u4e2d\u6709N\u4e2a\u5b57\u6bcd\uff0c\u5219\u603b\u5171\u6709N(N-1)/2\u4e2a\u9009\u62e92\u4e2a\u5b57\u6bcd\u7684\u65b9\u5f0f\u30022\u4e2a\u5b57\u6bcd\u76f8\u540c\u7684\u53ef\u80fd\u6027\u662f\u9009\u62e92\u4e2a\u76f8\u540c\u5b57\u6bcd\u7684\u65b9\u5f0f\u7684\u603b\u6570\u9664\u4ee5\u9009\u62e92\u4e2a\u5b57\u6bcd\u7684\u65b9\u5f0f\u3002 \u8fd9\u4ee3\u8868\u4e86\u4e24\u4e2a\u5b57\u6bcd\u76f8\u4f3c\u7684\u53ef\u80fd\u6027\uff0c\u4e5f\u5c31\u662fIC\uff08\u91cd\u5408\u6307\u6570\uff09","title":"A Measure of Roughness"},{"location":"ClassicalCrypto/IndexofCoincidence/#_2","text":"\u6ce8\u610f \u8bf7\u6ce8\u610f\uff1a\u4ee5\u540e\u5728\u7a0b\u5e8f\u4e2d\u5f15\u7528IndexCoin\uff0c\u5747\u6307\u7684\u662f\u8be5\u6587\u4ef6\u3002 ### ### FileName:IndexCoin.py ### Date:2018-08-07 ### Time:12:33 GMT ### Author:nianhua ### def Index_of_Coincidence ( string ): cipher = IC = 0 alpha = { a : 0 , b : 0 , c : 0 , d : 0 , e : 0 , f : 0 , g : 0 , h : 0 , i : 0 , j : 0 , k : 0 , l : 0 , m : 0 , n : 0 , o : 0 , p : 0 , q : 0 , r : 0 , s : 0 , t : 0 , u : 0 , v : 0 , w : 0 , x : 0 , y : 0 , z : 0 } for i in string : if i . isalpha () == True : cipher += i . lower () N = len ( cipher ) N = float ( N * ( N - 1 )) for i in cipher : alpha [ i ] += 1 for i in alpha : i = alpha [ i ] IC += i * ( i - 1 ) IC = IC / N return IC","title":"\u91cd\u5408\u6307\u6570\u7a0b\u5e8f\u5b9e\u73b0"},{"location":"ClassicalCrypto/IndexofCoincidence/#_3","text":"\u4e3e\u4f8b \u8bf7\u8ba1\u7b97\u4ee5\u4e0b\u4e24\u6bb5\u5bc6\u6587\u7684IC\uff08\u91cd\u5408\u6307\u6570\uff09\u3002 \u66ff\u6362\u5bc6\u7801\uff1a wmzfxtdhzfngfwxwnwxjevxdmzoxfkvxdmzowmkwmkfgzzexenfzpjotkebmneloz lfjpbzkofxwvjefxfwfjpfngfwxwnwxeszyzobdhkxewzawvmkokvwzopjoklxppz ozewvxdmzowzawvmkokvwzoxwlxppzofpojtvkzfkovxdmzoxewmkwwmzvxdmzokh dmkgzwxfejwfxtdhbwmzkhdmkgzwfmxpwzlxwxfvjtdhzwzhbrntghzl \u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\uff1a vptzmdrttzysubxaykkwcjmgjmgpwreqeoiivppalrujtlrzpchljftupucywvsyi uuwufirtaxagfpaxzxjqnhbfjvqibxzpotciiaxahmevmmagyczpjxvtndyeuknul vvpbrptygzilbkeppyetvmgpxuknulvjhzdtgrgapygzrptymevppaxygkxwlvtia wlrdmipweqbhpqgngioirnxwhfvvawpjkglxamjewbwpvvmafnlojalh \u4f7f\u7528\u4e0a\u4e00\u5c0f\u8282\u7684\u91cd\u5408\u6307\u6570\u8ba1\u7b97\u7a0b\u5e8f\u5373\u53ef\uff1a from IndexCoin import * print Index_of_Coincidence ( vptzmdrttzysubxaykkwcjmgjmgpwreqeoiivppalrujtlrzpchljftupucywvsyiuuwufirtaxagfpaxzxjqnhbfjvqibxzpotciiaxahmevmmagyczpjxvtndyeuknulvvpbrptygzilbkeppyetvmgpxuknulvjhzdtgrgapygzrptymevppaxygkxwlvtiawlrdmipweqbhpqgngioirnxwhfvvawpjkglxamjewbwpvvmafnlojalh ) print Index_of_Coincidence ( wmzfxtdhzfngfwxwnwxjevxdmzoxfkvxdmzowmkwmkfgzzexenfzpjotkebmnelozlfjpbzkofxwvjefxfwfjpfngfwxwnwxeszyzobdhkxewzawvmkokvwzopjoklxppzozewvxdmzowzawvmkokvwzoxwlxppzofpojtvkzfkovxdmzoxewmkwwmzvxdmzokhdmkgzwxfejwfxtdhbwmzkhdmkgzwfmxpwzlxwxfvjtdhzwzhbrntghzl )","title":"\u91cd\u5408\u6307\u6570\u8ba1\u7b97\u4e3e\u4f8b"},{"location":"ClassicalCrypto/Quadgram/","text":"\u56db\u5143\u7ec4\u7edf\u8ba1\u7b80\u4ecb \u5728\u5c1d\u8bd5\u7834\u89e3\u5bc6\u7801\u7684\u65f6\u5019\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u4e0d\u540c\u7684\u5bc6\u94a5\u8fdb\u884c\u89e3\u5bc6\uff0c\u7136\u540e\u67e5\u770b\u5df2\u89e3\u5bc6\u7684\u6587\u672c\uff0c\u5982\u679c\u6587\u672c\u770b\u8d77\u6765\u975e\u5e38\u50cf\u82f1\u6587\uff0c\u90a3\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u5bc6\u94a5\u6709\u53ef\u80fd\u662f\u6b63\u786e\u7684\u3002 \u56db\u5143\u7ec4\u7edf\u8ba1\uff08Quadgram Statistics\uff09\u662f\u4e00\u79cd\u786e\u5b9a\u4e00\u6bb5\u6587\u672c\u4e0e\u82f1\u6587\u76f8\u4f3c\u7a0b\u5ea6\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\u6587\u672cATTACK\u4e2d\u7684\u56db\u5143\u7ec4\u662fATTA\u3001TTAC\u3001TACK\u3002 \u8981\u4f7f\u7528\u56db\u5143\u7ec4\u7edf\u8ba1\u6765\u786e\u5b9a\u6587\u672c\u4e0e\u82f1\u6587\u7684\u76f8\u4f3c\u7a0b\u5ea6\uff0c\u9996\u5148\u6211\u4eec\u8981\u786e\u5b9a\u54ea\u4e9b\u56db\u5143\u7ec4\u5728\u82f1\u6587\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u9ad8\u3001\u54ea\u4e9b\u56db\u5143\u7ec4\u5728\u82f1\u6587\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u4f4e\u3002\u56e0\u6b64\u6211\u4eec\u7edf\u8ba1\u4e86\u6258\u5c14\u6cf0\u7684\u300a\u6218\u4e89\u4e0e\u548c\u5e73\u300b\u4e2d\u7684\u6240\u6709\u51fa\u73b0\u7684\u56db\u5143\u7ec4\uff0c\u518d\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u56db\u5143\u7ec4\u7684\u6982\u7387\u3002 Quadgram Count LogProbability AAAA 1 -6.40018764963 QKPC 0 -9.40018764963 YOUR 1132 -3.34634122278 TION 4694 -2.72864456437 ATTA 359 -3.84509320105 \u56db\u5143\u7ec4\u7edf\u8ba1 english_quadgrams.txt \u4e0b\u8f7d\u5730\u5740 \u63d0\u793a \u53ef\u4ee5\u770b\u51fa\u67d0\u4e9b\u56db\u5143\u7ec4\u7684\u51fa\u73b0\u9891\u7387\u8fdc\u9ad8\u4e8e\u5176\u4ed6\u56db\u5143\u7ec4\uff0c\u8fd9\u53ef\u7528\u4e8e\u786e\u5b9a\u7279\u5b9a\u6587\u672c\u7247\u6bb5\u4e0e\u82f1\u8bed\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u6587\u672c\u4e2d\u5305\u542bQPKC\u5219\u53ef\u80fd\u4e0d\u662f\u82f1\u8bed\uff0c\u5982\u679c\u5305\u542bTION\uff0c\u5219\u5f88\u5927\u7a0b\u5ea6\u53ef\u80fd\u662f\u82f1\u8bed\u3002 \u8981\u8ba1\u7b97\u4e00\u6bb5\u6587\u672c\u662f\u82f1\u6587\u7684\u6982\u7387\uff0c\u6211\u4eec\u5fc5\u987b\u63d0\u53d6\u51fa\u6587\u672c\u4e2d\u6240\u6709\u7684\u56db\u5143\u7ec4\uff0c\u7136\u540e\u4e58\u4ee5\u6bcf\u4e2a\u56db\u5143\u7ec4\u7684\u6982\u7387\u3002\u5bf9\u4e8e\u6587\u672cATTACK\uff0c\u56db\u5143\u7ec4\u662fATTA\u3001TTAC\u548cTACK\uff0c\u5219\u603b\u6982\u7387\u4e3a\uff1a \u4f8b\u5982\uff1a \u5728\u4e0a\u9762\u7684\u7b49\u5f0f\u4e2d\uff0ccount()\u662f\u7279\u5b9a\u56db\u5143\u7ec4\u51fa\u73b0\u7684\u5b57\u6570\uff0cN\u662f\u8bad\u7ec3\u6837\u672c\u4e2d\u56db\u5143\u7ec4\u7684\u603b\u6570\u3002 \u63d0\u793a \u592a\u591a\u7684\u5c0f\u6570\u76f8\u4e58\u65f6\uff0c\u6d6e\u70b9\u6570\u6709\u53ef\u80fd\u4f1a\u9020\u6210\u6570\u503c\u4e0b\u6ea2\uff0c\u56e0\u6b64\u5bf9\u6bcf\u4e2a\u6982\u7387\u53d6\u5bf9\u6570\u3002 \u6211\u4eec\u90fd\u77e5\u9053 log(a*b) = log(a)+log(b) \uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u516c\u5f0f\u4e3a\uff1a \u4f7f\u7528\u5bf9\u6570\u6765\u8ba1\u7b97\u4e00\u6bb5\u6587\u672c\u7684\u5206\u6570\uff0c\u6570\u503c\u8d8a\u5927\u610f\u5473\u7740\u8fd9\u6bb5\u6587\u672c\u8d8a\u53ef\u80fd\u662f\u82f1\u6587\u3001\u6570\u5b57\u8d8a\u5c0f\u610f\u5473\u7740\u4e0d\u592a\u53ef\u80fd\u662f\u82f1\u6587\u3002 \u56db\u5143\u7ec4\u7edf\u8ba1\u4e3e\u4f8b \u4f8b\u5b50 \u8ba1\u7b97\u660e\u6587\u6587\u672c ATTACK THE EAST WALL OF THE CASTLE AT DAWN \u7684\u56db\u5143\u7ec4\u7edf\u8ba1\u5206\u6570 \u4ee5\u53ca\u7ecf\u8fc7\u51ef\u6492\u52a0\u5bc6\u540e\u5bc6\u6587 FYYFHP YMJ JFXY BFQQ TK YMJ HFXYQJ FY IFBS \u7684\u56db\u5143\u7ec4\u7edf\u8ba1\u5206\u6570 \u901a\u8fc7\u5728\u6587\u672c\u4e2d\u63d0\u53d6\u56db\u5143\u7ec4\uff0c\u7136\u540e\u4f7f\u7528\u516c\u5f0f\u8ba1\u7b97\u56db\u5143\u7ec4\u7edf\u8ba1\u5206\u6570\u3002\u660e\u6587\u6587\u672c\u5206\u6570\u4e3a-129.24\u3001\u52a0\u5bc6\u540e\u7684\u6587\u672c\u5206\u6570\u4e3a-288.10\u3002\u5f88\u660e\u663e\u539f\u59cb\u6587\u672c\u5177\u6709\u66f4\u9ad8\u7684\u5206\u6570\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u60f3\u8981\u7684\u6548\u679c\u3002 \u660e\u6587\u6587\u672c\u5206\u6570\u8f83\u9ad8\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u50cf\"EAST\"\u548c\"OFTH\"\u8fd9\u6837\u7684\u56db\u5143\u7ec4\u5728\u82f1\u6587\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u66f4\u9ad8\uff0c\u5b83\u4eec\u5bf9\u603b\u5206\u6570\u7684\u8d21\u732e\u66f4\u5927\u3002\u800c\u52a0\u5bc6\u540e\u6587\u672c\u4e2d\"FYYF\"\u548c\"BFQQ\"\u4e4b\u7c7b\u7684\u56db\u5143\u7ec4\u5728\u82f1\u6587\u4e2d\u975e\u5e38\u7f55\u89c1\uff0c\u56e0\u6b64\u62c9\u4f4e\u4e86\u603b\u5206\u6570\u3002 \u56db\u5143\u7ec4\u7edf\u8ba1\u7684\u7a0b\u5e8f\u5b9e\u73b0 fileName:ngram_score.py Allows scoring of text using n-gram probabilities 17/07/12 from math import log10 class ngram_score ( object ): def __init__ ( self , ngramfile , sep = ): load a file containing ngrams and counts, calculate log probabilities self . ngrams = {} for line in file ( ngramfile ): key , count = line . split ( sep ) self . ngrams [ key ] = int ( count ) self . L = len ( key ) self . N = sum ( self . ngrams . itervalues ()) #calculate log probabilities for key in self . ngrams . keys (): self . ngrams [ key ] = log10 ( float ( self . ngrams [ key ]) / self . N ) self . floor = log10 ( 0.01 / self . N ) def score ( self , text ): compute the score of text score = 0 ngrams = self . ngrams . __getitem__ for i in xrange ( len ( text ) - self . L + 1 ): if text [ i : i + self . L ] in self . ngrams : score += ngrams ( text [ i : i + self . L ]) else : score += self . floor return score \u4f7f\u7528\u65b9\u6cd5\uff1a import ngram_score as ns fitness = ns . ngram_score ( quadgrams.txt ) print fitness . score ( HELLOWORLD )","title":"\u56db\u5143\u7ec4\u7edf\u8ba1"},{"location":"ClassicalCrypto/Quadgram/#_1","text":"\u5728\u5c1d\u8bd5\u7834\u89e3\u5bc6\u7801\u7684\u65f6\u5019\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u4e0d\u540c\u7684\u5bc6\u94a5\u8fdb\u884c\u89e3\u5bc6\uff0c\u7136\u540e\u67e5\u770b\u5df2\u89e3\u5bc6\u7684\u6587\u672c\uff0c\u5982\u679c\u6587\u672c\u770b\u8d77\u6765\u975e\u5e38\u50cf\u82f1\u6587\uff0c\u90a3\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u5bc6\u94a5\u6709\u53ef\u80fd\u662f\u6b63\u786e\u7684\u3002 \u56db\u5143\u7ec4\u7edf\u8ba1\uff08Quadgram Statistics\uff09\u662f\u4e00\u79cd\u786e\u5b9a\u4e00\u6bb5\u6587\u672c\u4e0e\u82f1\u6587\u76f8\u4f3c\u7a0b\u5ea6\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\u6587\u672cATTACK\u4e2d\u7684\u56db\u5143\u7ec4\u662fATTA\u3001TTAC\u3001TACK\u3002 \u8981\u4f7f\u7528\u56db\u5143\u7ec4\u7edf\u8ba1\u6765\u786e\u5b9a\u6587\u672c\u4e0e\u82f1\u6587\u7684\u76f8\u4f3c\u7a0b\u5ea6\uff0c\u9996\u5148\u6211\u4eec\u8981\u786e\u5b9a\u54ea\u4e9b\u56db\u5143\u7ec4\u5728\u82f1\u6587\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u9ad8\u3001\u54ea\u4e9b\u56db\u5143\u7ec4\u5728\u82f1\u6587\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u4f4e\u3002\u56e0\u6b64\u6211\u4eec\u7edf\u8ba1\u4e86\u6258\u5c14\u6cf0\u7684\u300a\u6218\u4e89\u4e0e\u548c\u5e73\u300b\u4e2d\u7684\u6240\u6709\u51fa\u73b0\u7684\u56db\u5143\u7ec4\uff0c\u518d\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u56db\u5143\u7ec4\u7684\u6982\u7387\u3002 Quadgram Count LogProbability AAAA 1 -6.40018764963 QKPC 0 -9.40018764963 YOUR 1132 -3.34634122278 TION 4694 -2.72864456437 ATTA 359 -3.84509320105 \u56db\u5143\u7ec4\u7edf\u8ba1 english_quadgrams.txt \u4e0b\u8f7d\u5730\u5740 \u63d0\u793a \u53ef\u4ee5\u770b\u51fa\u67d0\u4e9b\u56db\u5143\u7ec4\u7684\u51fa\u73b0\u9891\u7387\u8fdc\u9ad8\u4e8e\u5176\u4ed6\u56db\u5143\u7ec4\uff0c\u8fd9\u53ef\u7528\u4e8e\u786e\u5b9a\u7279\u5b9a\u6587\u672c\u7247\u6bb5\u4e0e\u82f1\u8bed\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u6587\u672c\u4e2d\u5305\u542bQPKC\u5219\u53ef\u80fd\u4e0d\u662f\u82f1\u8bed\uff0c\u5982\u679c\u5305\u542bTION\uff0c\u5219\u5f88\u5927\u7a0b\u5ea6\u53ef\u80fd\u662f\u82f1\u8bed\u3002 \u8981\u8ba1\u7b97\u4e00\u6bb5\u6587\u672c\u662f\u82f1\u6587\u7684\u6982\u7387\uff0c\u6211\u4eec\u5fc5\u987b\u63d0\u53d6\u51fa\u6587\u672c\u4e2d\u6240\u6709\u7684\u56db\u5143\u7ec4\uff0c\u7136\u540e\u4e58\u4ee5\u6bcf\u4e2a\u56db\u5143\u7ec4\u7684\u6982\u7387\u3002\u5bf9\u4e8e\u6587\u672cATTACK\uff0c\u56db\u5143\u7ec4\u662fATTA\u3001TTAC\u548cTACK\uff0c\u5219\u603b\u6982\u7387\u4e3a\uff1a \u4f8b\u5982\uff1a \u5728\u4e0a\u9762\u7684\u7b49\u5f0f\u4e2d\uff0ccount()\u662f\u7279\u5b9a\u56db\u5143\u7ec4\u51fa\u73b0\u7684\u5b57\u6570\uff0cN\u662f\u8bad\u7ec3\u6837\u672c\u4e2d\u56db\u5143\u7ec4\u7684\u603b\u6570\u3002 \u63d0\u793a \u592a\u591a\u7684\u5c0f\u6570\u76f8\u4e58\u65f6\uff0c\u6d6e\u70b9\u6570\u6709\u53ef\u80fd\u4f1a\u9020\u6210\u6570\u503c\u4e0b\u6ea2\uff0c\u56e0\u6b64\u5bf9\u6bcf\u4e2a\u6982\u7387\u53d6\u5bf9\u6570\u3002 \u6211\u4eec\u90fd\u77e5\u9053 log(a*b) = log(a)+log(b) \uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u516c\u5f0f\u4e3a\uff1a \u4f7f\u7528\u5bf9\u6570\u6765\u8ba1\u7b97\u4e00\u6bb5\u6587\u672c\u7684\u5206\u6570\uff0c\u6570\u503c\u8d8a\u5927\u610f\u5473\u7740\u8fd9\u6bb5\u6587\u672c\u8d8a\u53ef\u80fd\u662f\u82f1\u6587\u3001\u6570\u5b57\u8d8a\u5c0f\u610f\u5473\u7740\u4e0d\u592a\u53ef\u80fd\u662f\u82f1\u6587\u3002","title":"\u56db\u5143\u7ec4\u7edf\u8ba1\u7b80\u4ecb"},{"location":"ClassicalCrypto/Quadgram/#_2","text":"\u4f8b\u5b50 \u8ba1\u7b97\u660e\u6587\u6587\u672c ATTACK THE EAST WALL OF THE CASTLE AT DAWN \u7684\u56db\u5143\u7ec4\u7edf\u8ba1\u5206\u6570 \u4ee5\u53ca\u7ecf\u8fc7\u51ef\u6492\u52a0\u5bc6\u540e\u5bc6\u6587 FYYFHP YMJ JFXY BFQQ TK YMJ HFXYQJ FY IFBS \u7684\u56db\u5143\u7ec4\u7edf\u8ba1\u5206\u6570 \u901a\u8fc7\u5728\u6587\u672c\u4e2d\u63d0\u53d6\u56db\u5143\u7ec4\uff0c\u7136\u540e\u4f7f\u7528\u516c\u5f0f\u8ba1\u7b97\u56db\u5143\u7ec4\u7edf\u8ba1\u5206\u6570\u3002\u660e\u6587\u6587\u672c\u5206\u6570\u4e3a-129.24\u3001\u52a0\u5bc6\u540e\u7684\u6587\u672c\u5206\u6570\u4e3a-288.10\u3002\u5f88\u660e\u663e\u539f\u59cb\u6587\u672c\u5177\u6709\u66f4\u9ad8\u7684\u5206\u6570\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u60f3\u8981\u7684\u6548\u679c\u3002 \u660e\u6587\u6587\u672c\u5206\u6570\u8f83\u9ad8\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u50cf\"EAST\"\u548c\"OFTH\"\u8fd9\u6837\u7684\u56db\u5143\u7ec4\u5728\u82f1\u6587\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u66f4\u9ad8\uff0c\u5b83\u4eec\u5bf9\u603b\u5206\u6570\u7684\u8d21\u732e\u66f4\u5927\u3002\u800c\u52a0\u5bc6\u540e\u6587\u672c\u4e2d\"FYYF\"\u548c\"BFQQ\"\u4e4b\u7c7b\u7684\u56db\u5143\u7ec4\u5728\u82f1\u6587\u4e2d\u975e\u5e38\u7f55\u89c1\uff0c\u56e0\u6b64\u62c9\u4f4e\u4e86\u603b\u5206\u6570\u3002","title":"\u56db\u5143\u7ec4\u7edf\u8ba1\u4e3e\u4f8b"},{"location":"ClassicalCrypto/Quadgram/#_3","text":"fileName:ngram_score.py Allows scoring of text using n-gram probabilities 17/07/12 from math import log10 class ngram_score ( object ): def __init__ ( self , ngramfile , sep = ): load a file containing ngrams and counts, calculate log probabilities self . ngrams = {} for line in file ( ngramfile ): key , count = line . split ( sep ) self . ngrams [ key ] = int ( count ) self . L = len ( key ) self . N = sum ( self . ngrams . itervalues ()) #calculate log probabilities for key in self . ngrams . keys (): self . ngrams [ key ] = log10 ( float ( self . ngrams [ key ]) / self . N ) self . floor = log10 ( 0.01 / self . N ) def score ( self , text ): compute the score of text score = 0 ngrams = self . ngrams . __getitem__ for i in xrange ( len ( text ) - self . L + 1 ): if text [ i : i + self . L ] in self . ngrams : score += ngrams ( text [ i : i + self . L ]) else : score += self . floor return score \u4f7f\u7528\u65b9\u6cd5\uff1a import ngram_score as ns fitness = ns . ngram_score ( quadgrams.txt ) print fitness . score ( HELLOWORLD )","title":"\u56db\u5143\u7ec4\u7edf\u8ba1\u7684\u7a0b\u5e8f\u5b9e\u73b0"},{"location":"ClassicalCrypto/RailFenceCipher/","text":"\u5fc5\u8bfb \u4e0a\u8282\u4e2d\u7684\u5bc6\u7801\u68d2\u5bc6\u7801\u5176\u5b9e\u4e5f\u662f\u6805\u680f\u5bc6\u7801\u7684\u4e00\u79cd \u6805\u680f\u5bc6\u7801\u53ef\u5206\u4e3aN\u578b\u548cV\u578b\u4e24\u79cd \u6805\u680f\u5bc6\u7801\u7b80\u4ecb \u6240\u8c13\u6805\u680f\u5bc6\u7801\uff0c\u5c31\u662f\u5c06\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u4e3aN\u4e2a\u4e00\u7ec4\uff0c\u518d\u4ece\u6bcf\u7ec4\u7684\u9009\u51fa\u4e00\u4e2a\u5b57\u6bcd\u8fde\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u6bb5\u65e0\u89c4\u5f8b\u7684\u5bc6\u6587\u3002 \u6805\u680f\u5bc6\u7801\u5e76\u975e\u4e00\u79cd\u5f3a\u7684\u52a0\u5bc6\u6cd5\uff0c\u5176\u52a0\u5bc6\u539f\u7406\u9650\u5236\u4e86\u5bc6\u94a5\u7684\u6700\u9ad8\u6570\u91cf\u4e0d\u53ef\u80fd\u8d85\u8fc7\u660e\u6587\u5b57\u6bcd\u6570\uff0c\u800c\u5b9e\u9645\u52a0\u5bc6\u65f6\u5bc6\u94a5\u6570\u76ee\u66f4\u5c11\uff0c\u56e0\u6b64\u6709\u4e9b\u5bc6\u7801\u5206\u6790\u5458\u751a\u81f3\u80fd\u7528\u624b\u76f4\u63a5\u89e3\u51fa\u660e\u6587\u3002 \u6805\u680f\u5bc6\u7801\u5206\u7c7b \u6805\u680f\u5bc6\u7801\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff0c\u7b2c\u4e00\u79cd\u662fN\u578b\u6805\u680f\u5bc6\u7801\uff08\u52a0\u5bc6\u65b9\u5f0f\u6e90\u81ea\u767e\u5ea6\u767e\u79d1\uff09\u3001\u7b2c\u4e8c\u79cd\u662fV\u578b\u6805\u680f\u5bc6\u7801\uff08\u52a0\u5bc6\u65b9\u5f0f\u6e90\u81ea\u7ef4\u57fa\u767e\u79d1\uff09\u3002 N\u578b\u6805\u680f\u5bc6\u7801 \u4f7f\u7528\u5bc6\u94a58\uff08\u6805\u680f\u7684\u680f\u6570\uff09\u52a0\u5bc6\u4e00\u4e0b\u660e\u6587 1234567891234567891234567891234567891 1.......9.......8.......7.......6.......5.............................. .2.......1.......9.......8.......7.......6............................. ..3.......2.......1.......9.......8.......7............................ ...4.......3.......2.......1.......9.......8........................... ....5.......4.......3.......2.......1.......9.......................... .....6.......5.......4.......3.......2.......1......................... ......7.......6.......5.......4.......3................................ .......8.......7.......6.......5.......4............................... \u9996\u5148\u753b\u51fa8\u680f\u8868\u683c\uff0c\u660e\u6587\u7531\u4e0a\u81f3\u4e0b\u987a\u5e8f\u5199\u4e0a\uff0c\u5f53\u5230\u8fbe\u6700\u4f4e\u90e8\u65f6\uff0c\u518d\u56de\u5230\u7b2c\u4e00\u680f\u91cd\u65b0\u5f00\u59cb\uff0c\u4e00\u76f4\u91cd\u590d\u76f4\u81f3\u6574\u7bc7\u660e\u6587\u5199\u5b8c\u4e3a\u6b62\u3002 \u6a2a\u5411\u8bfb\u53d6\u8868\u683c\u5373\u4e3a\u5bc6\u6587\uff1a 1987652198763219874321985432196543217654387654 \u3002 V\u578b\u6805\u680f\u5bc6\u7801 \u4f7f\u7528\u5bc6\u94a58\uff08\u6805\u680f\u7684\u680f\u6570\uff09\u52a0\u5bc6\u4e00\u4e0b\u660e\u6587 Will invade Kentucky on October the eighth# signal is Frozen chicken'# W.............n.............b.............#.............r.............# .i...........e.t...........o.e...........h. ...........F.o........... . ..l.........K...u.........t...r.........t...s......... ...z.........n.. ...l....... .....c.......c..... .......h.....i....... .....e.......e... .... .....e.......k.....O.......t.....g.......g.....s.......n.....k.... .....i...d.........y... .........h...i.........n...i......... ...c..... ......n.a........... .n...........e.e...........a. ...........c.i...... .......v.............o............. .............l.............h....... \u5728V\u578b\u6805\u680f\u5bc6\u7801\u4e2d\uff0c\u660e\u6587\u7531\u4e0a\u81f3\u4e0b\u987a\u5e8f\u5199\u4e0a\uff0c\u5f53\u5230\u8fbe\u6700\u4f4e\u90e8\u65f6\uff0c\u518d\u56de\u5934\u5411\u4e0a\uff0c\u4e00\u76f4\u91cd\u590d\u76f4\u81f3\u6574\u7bc7\u660e\u6587\u5199\u5b8c\u4e3a\u6b62\u3002 \u6a2a\u5411\u8bfb\u53d6\u8868\u683c\u5373\u4e3a\u5bc6\u6587\uff1a Wnb#r#ietoehFo'lkutrts'znl cc hi ee ekOtggsnkidy hini cna neea civo lh \u3002 \u6805\u680f\u5bc6\u7801\u7684\u7a0b\u5e8f\u5b9e\u73b0 \u63d0\u793a \u8bf7\u5c06\u8be5\u6587\u4ef6\u5b58\u50a8\u4e3arailfence.py\uff0c\u540e\u6587\u5f15\u7528\u5747\u6307\u8be5\u6587\u4ef6 ### ### Running in python3 ### FileName:railfence.py ### Date:2018-08-07 ### Time:12:33 GMT ### Author:nianhua ### from math import * class Railfence: def Nencipher(self,plaintext,key): ciphertext = for j in range(key): for i in range(len(plaintext)//key+1): try: ciphertext += plaintext[i*key+j:i*key+j+1] except: pass return ciphertext def Ndecipher(self,ciphertext,key): plaintext = [] plainstr = column = len(ciphertext)//key remainder = len(ciphertext)%key for i in range(key): if i remainder: plaintext.append(ciphertext[:column+1]) ciphertext = ciphertext[column+1:] else: plaintext.append(ciphertext[:column]) ciphertext = ciphertext[column:] for i in range(column+1): for j in range(key): try: plainstr += plaintext[j][i] except: pass return plainstr def Vencipher(self,plaintext,key): ciphertext = v = ceil(len(plaintext)/(2*(key-1))) for i in range(key): for j in range(v): try: ciphertext += plaintext[(j*(key-1)*2) + i] if(i != 0 and i != (key-1)): ciphertext += plaintext[(j*(key-1)*2) + (((key-1)*2)-i)] except: pass return ciphertext def Vdecipher(self,ciphertext,key): cipherarray = [] plaintext = v = ceil(len(ciphertext)/(2*(key-1))) rv = len(ciphertext)//(2*(key-1)) re = len(ciphertext)%(2*(key-1)) maxlen = 0 cipherarray.append(ciphertext[:v]) ciphertext = ciphertext[v:] if re = (key-1): for i in range(re-1): cipherarray.append(ciphertext[:2*rv+1]) ciphertext = ciphertext[2*rv+1:] for i in range(key-(re+1)): cipherarray.append(ciphertext[:2*rv]) ciphertext = ciphertext[2*rv:] cipherarray.append(ciphertext) ciphertext = else: for i in range(2*key-re-2): cipherarray.append(ciphertext[:2*rv+1]) ciphertext = ciphertext[2*rv+1:] for i in range(re-key): cipherarray.append(ciphertext[:(2*rv+2)]) ciphertext = ciphertext[(2*rv+2):] cipherarray.append(ciphertext) ciphertext = cipherarray = [i for i in cipherarray if i != ] for i in cipherarray: if(len(i) maxlen): maxlen = len(i) for i in range(ceil(maxlen/2)): for j in range(len(cipherarray)): plaintext += cipherarray[j][:1] cipherarray[j] = cipherarray[j][1:] for j in range(len(cipherarray)-2,0,-1): plaintext += cipherarray[j][:1] cipherarray[j] = cipherarray[j][1:] return plaintext def main(): newobj = Railfence() print(newobj.Vdecipher(newobj.Vencipher( Will invade Kentucky on October the eighth. signal is Frozen chicken ,8),8)) if __main__ == __name__ : main() \u6805\u680f\u5bc6\u7801\u7684\u7834\u89e3 \u524d\u63d0 \u6805\u680f\u5bc6\u7801\u7684\u5bc6\u94a5\u7a7a\u95f4\u5fc5\u5b9a\u5c0f\u4e8e\u5bc6\u6587\u957f\u5ea6\u7684 \uff08\u56e0\u4e3a\u5982\u679c\u5bc6\u94a5\u5927\u4e8e\u5bc6\u6587\u957f\u5ea6\u7684 \uff0c\u5219\u7ed3\u675f\u90e8\u5206\u7684\u660e\u6587\u672a\u88ab\u52a0\u5bc6\uff09\u3002 \u4ece\u4e0a\u9762\u7684\u524d\u63d0\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u6805\u680f\u5bc6\u7801\u7684\u5bc6\u94a5\u7a7a\u95f4\u8f83\u5c0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u5f0f\u8fdb\u884c\u653b\u51fb\u3002 \u9996\u5148\u6211\u4eec\u7f16\u5199\u4e24\u79cd\u6805\u680f\u5bc6\u7801\u7684\u52a0\u5bc6\u89e3\u5bc6\u4ee3\u7801\u3002 \u5bf9V\u578b\u52a0\u5bc6\u540e\u7684\u5bc6\u6587 Wnb.r.ietoeh Fo\"lKutrts\"znl cc hi ee ekOtggsnkidy hini cna neea civo lh \u8fdb\u884c\u66b4\u529b\u7834\u89e3 from railfence import * newobj = Railfence() string = Wnb.r.ietoeh Fo lKutrts znl cc hi ee ekOtggsnkidy hini cna neea civo lh for i in range(2,10): print(i,newobj.Vdecipher(string,i)) \u8fd0\u884c\u7a0b\u5e8f\uff0c\u67e5\u770b\u6548\u679c\uff1a \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7b2c\u516b\u884c\u662f\u660e\u663e\u662f\u6709\u610f\u4e49\u7684\u660e\u6587\uff0c\u56e0\u6b64\u5bc6\u94a5\u4e3a8 \u95ee\u9898 \u5982\u679c\u5bc6\u6587\u7531100\u4f4d\u5b57\u6bcd\u7ec4\u6210\uff0c\u90a3\u6211\u4eec\u81f3\u5c11\u9700\u8981\u5c1d\u8bd550\u4e2a\u5bc6\u94a5\uff1f \u6805\u680f\u5bc6\u7801\u5c0f\u7ed3 \u7ed3\u8bba \u6805\u680f\u5bc6\u7801\u662f\u4e00\u4e2a\u975e\u5e38\u5bb9\u6613\u7834\u89e3\u7684\u5bc6\u7801\uff0c\u5bc6\u7801\u5206\u6790\u8005\u53ea\u9700\u8981\u5c1d\u8bd5\u51e0\u4e2a\u5bc6\u94a5\u5373\u53ef\u627e\u5230\u6b63\u786e\u7684\u660e\u6587\u3002\u5982\u679c\u60a8\u77e5\u9053\u67d0\u4e9b\u660e\u6587\uff0c\u6216\u8005\u53ef\u4ee5\u731c\u51fa\u4e00\u4e9b\u660e\u6587\uff0c\u90a3\u4e48\u5c06\u66f4\u5bb9\u6613\u627e\u5230\u5bc6\u94a5\u3002 \u6362\u4f4d\u5bc6\u7801\u7684\u4e00\u4e2a\u7279\u70b9\u662f\u5b57\u7b26\u7684\u9891\u7387\u5206\u5e03\u4e0e\u81ea\u7136\u6587\u672c\u7684\u9891\u7387\u5206\u5e03\u76f8\u540c\uff08\u56e0\u4e3a\u6ca1\u6709\u8fdb\u884c\u66ff\u6362\uff0c\u5b83\u53ea\u662f\u6df7\u5408\u7684\u987a\u5e8f\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u5e94\u8be5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a","title":"\u6805\u680f\u5bc6\u7801"},{"location":"ClassicalCrypto/RailFenceCipher/#_1","text":"\u6240\u8c13\u6805\u680f\u5bc6\u7801\uff0c\u5c31\u662f\u5c06\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u4e3aN\u4e2a\u4e00\u7ec4\uff0c\u518d\u4ece\u6bcf\u7ec4\u7684\u9009\u51fa\u4e00\u4e2a\u5b57\u6bcd\u8fde\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u6bb5\u65e0\u89c4\u5f8b\u7684\u5bc6\u6587\u3002 \u6805\u680f\u5bc6\u7801\u5e76\u975e\u4e00\u79cd\u5f3a\u7684\u52a0\u5bc6\u6cd5\uff0c\u5176\u52a0\u5bc6\u539f\u7406\u9650\u5236\u4e86\u5bc6\u94a5\u7684\u6700\u9ad8\u6570\u91cf\u4e0d\u53ef\u80fd\u8d85\u8fc7\u660e\u6587\u5b57\u6bcd\u6570\uff0c\u800c\u5b9e\u9645\u52a0\u5bc6\u65f6\u5bc6\u94a5\u6570\u76ee\u66f4\u5c11\uff0c\u56e0\u6b64\u6709\u4e9b\u5bc6\u7801\u5206\u6790\u5458\u751a\u81f3\u80fd\u7528\u624b\u76f4\u63a5\u89e3\u51fa\u660e\u6587\u3002","title":"\u6805\u680f\u5bc6\u7801\u7b80\u4ecb"},{"location":"ClassicalCrypto/RailFenceCipher/#_2","text":"\u6805\u680f\u5bc6\u7801\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff0c\u7b2c\u4e00\u79cd\u662fN\u578b\u6805\u680f\u5bc6\u7801\uff08\u52a0\u5bc6\u65b9\u5f0f\u6e90\u81ea\u767e\u5ea6\u767e\u79d1\uff09\u3001\u7b2c\u4e8c\u79cd\u662fV\u578b\u6805\u680f\u5bc6\u7801\uff08\u52a0\u5bc6\u65b9\u5f0f\u6e90\u81ea\u7ef4\u57fa\u767e\u79d1\uff09\u3002","title":"\u6805\u680f\u5bc6\u7801\u5206\u7c7b"},{"location":"ClassicalCrypto/RailFenceCipher/#n","text":"\u4f7f\u7528\u5bc6\u94a58\uff08\u6805\u680f\u7684\u680f\u6570\uff09\u52a0\u5bc6\u4e00\u4e0b\u660e\u6587 1234567891234567891234567891234567891 1.......9.......8.......7.......6.......5.............................. .2.......1.......9.......8.......7.......6............................. ..3.......2.......1.......9.......8.......7............................ ...4.......3.......2.......1.......9.......8........................... ....5.......4.......3.......2.......1.......9.......................... .....6.......5.......4.......3.......2.......1......................... ......7.......6.......5.......4.......3................................ .......8.......7.......6.......5.......4............................... \u9996\u5148\u753b\u51fa8\u680f\u8868\u683c\uff0c\u660e\u6587\u7531\u4e0a\u81f3\u4e0b\u987a\u5e8f\u5199\u4e0a\uff0c\u5f53\u5230\u8fbe\u6700\u4f4e\u90e8\u65f6\uff0c\u518d\u56de\u5230\u7b2c\u4e00\u680f\u91cd\u65b0\u5f00\u59cb\uff0c\u4e00\u76f4\u91cd\u590d\u76f4\u81f3\u6574\u7bc7\u660e\u6587\u5199\u5b8c\u4e3a\u6b62\u3002 \u6a2a\u5411\u8bfb\u53d6\u8868\u683c\u5373\u4e3a\u5bc6\u6587\uff1a 1987652198763219874321985432196543217654387654 \u3002","title":"N\u578b\u6805\u680f\u5bc6\u7801"},{"location":"ClassicalCrypto/RailFenceCipher/#v","text":"\u4f7f\u7528\u5bc6\u94a58\uff08\u6805\u680f\u7684\u680f\u6570\uff09\u52a0\u5bc6\u4e00\u4e0b\u660e\u6587 Will invade Kentucky on October the eighth# signal is Frozen chicken'# W.............n.............b.............#.............r.............# .i...........e.t...........o.e...........h. ...........F.o........... . ..l.........K...u.........t...r.........t...s......... ...z.........n.. ...l....... .....c.......c..... .......h.....i....... .....e.......e... .... .....e.......k.....O.......t.....g.......g.....s.......n.....k.... .....i...d.........y... .........h...i.........n...i......... ...c..... ......n.a........... .n...........e.e...........a. ...........c.i...... .......v.............o............. .............l.............h....... \u5728V\u578b\u6805\u680f\u5bc6\u7801\u4e2d\uff0c\u660e\u6587\u7531\u4e0a\u81f3\u4e0b\u987a\u5e8f\u5199\u4e0a\uff0c\u5f53\u5230\u8fbe\u6700\u4f4e\u90e8\u65f6\uff0c\u518d\u56de\u5934\u5411\u4e0a\uff0c\u4e00\u76f4\u91cd\u590d\u76f4\u81f3\u6574\u7bc7\u660e\u6587\u5199\u5b8c\u4e3a\u6b62\u3002 \u6a2a\u5411\u8bfb\u53d6\u8868\u683c\u5373\u4e3a\u5bc6\u6587\uff1a Wnb#r#ietoehFo'lkutrts'znl cc hi ee ekOtggsnkidy hini cna neea civo lh \u3002","title":"V\u578b\u6805\u680f\u5bc6\u7801"},{"location":"ClassicalCrypto/RailFenceCipher/#_3","text":"\u63d0\u793a \u8bf7\u5c06\u8be5\u6587\u4ef6\u5b58\u50a8\u4e3arailfence.py\uff0c\u540e\u6587\u5f15\u7528\u5747\u6307\u8be5\u6587\u4ef6 ### ### Running in python3 ### FileName:railfence.py ### Date:2018-08-07 ### Time:12:33 GMT ### Author:nianhua ### from math import * class Railfence: def Nencipher(self,plaintext,key): ciphertext = for j in range(key): for i in range(len(plaintext)//key+1): try: ciphertext += plaintext[i*key+j:i*key+j+1] except: pass return ciphertext def Ndecipher(self,ciphertext,key): plaintext = [] plainstr = column = len(ciphertext)//key remainder = len(ciphertext)%key for i in range(key): if i remainder: plaintext.append(ciphertext[:column+1]) ciphertext = ciphertext[column+1:] else: plaintext.append(ciphertext[:column]) ciphertext = ciphertext[column:] for i in range(column+1): for j in range(key): try: plainstr += plaintext[j][i] except: pass return plainstr def Vencipher(self,plaintext,key): ciphertext = v = ceil(len(plaintext)/(2*(key-1))) for i in range(key): for j in range(v): try: ciphertext += plaintext[(j*(key-1)*2) + i] if(i != 0 and i != (key-1)): ciphertext += plaintext[(j*(key-1)*2) + (((key-1)*2)-i)] except: pass return ciphertext def Vdecipher(self,ciphertext,key): cipherarray = [] plaintext = v = ceil(len(ciphertext)/(2*(key-1))) rv = len(ciphertext)//(2*(key-1)) re = len(ciphertext)%(2*(key-1)) maxlen = 0 cipherarray.append(ciphertext[:v]) ciphertext = ciphertext[v:] if re = (key-1): for i in range(re-1): cipherarray.append(ciphertext[:2*rv+1]) ciphertext = ciphertext[2*rv+1:] for i in range(key-(re+1)): cipherarray.append(ciphertext[:2*rv]) ciphertext = ciphertext[2*rv:] cipherarray.append(ciphertext) ciphertext = else: for i in range(2*key-re-2): cipherarray.append(ciphertext[:2*rv+1]) ciphertext = ciphertext[2*rv+1:] for i in range(re-key): cipherarray.append(ciphertext[:(2*rv+2)]) ciphertext = ciphertext[(2*rv+2):] cipherarray.append(ciphertext) ciphertext = cipherarray = [i for i in cipherarray if i != ] for i in cipherarray: if(len(i) maxlen): maxlen = len(i) for i in range(ceil(maxlen/2)): for j in range(len(cipherarray)): plaintext += cipherarray[j][:1] cipherarray[j] = cipherarray[j][1:] for j in range(len(cipherarray)-2,0,-1): plaintext += cipherarray[j][:1] cipherarray[j] = cipherarray[j][1:] return plaintext def main(): newobj = Railfence() print(newobj.Vdecipher(newobj.Vencipher( Will invade Kentucky on October the eighth. signal is Frozen chicken ,8),8)) if __main__ == __name__ : main()","title":"\u6805\u680f\u5bc6\u7801\u7684\u7a0b\u5e8f\u5b9e\u73b0"},{"location":"ClassicalCrypto/RailFenceCipher/#_4","text":"\u524d\u63d0 \u6805\u680f\u5bc6\u7801\u7684\u5bc6\u94a5\u7a7a\u95f4\u5fc5\u5b9a\u5c0f\u4e8e\u5bc6\u6587\u957f\u5ea6\u7684 \uff08\u56e0\u4e3a\u5982\u679c\u5bc6\u94a5\u5927\u4e8e\u5bc6\u6587\u957f\u5ea6\u7684 \uff0c\u5219\u7ed3\u675f\u90e8\u5206\u7684\u660e\u6587\u672a\u88ab\u52a0\u5bc6\uff09\u3002 \u4ece\u4e0a\u9762\u7684\u524d\u63d0\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u6805\u680f\u5bc6\u7801\u7684\u5bc6\u94a5\u7a7a\u95f4\u8f83\u5c0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u5f0f\u8fdb\u884c\u653b\u51fb\u3002 \u9996\u5148\u6211\u4eec\u7f16\u5199\u4e24\u79cd\u6805\u680f\u5bc6\u7801\u7684\u52a0\u5bc6\u89e3\u5bc6\u4ee3\u7801\u3002 \u5bf9V\u578b\u52a0\u5bc6\u540e\u7684\u5bc6\u6587 Wnb.r.ietoeh Fo\"lKutrts\"znl cc hi ee ekOtggsnkidy hini cna neea civo lh \u8fdb\u884c\u66b4\u529b\u7834\u89e3 from railfence import * newobj = Railfence() string = Wnb.r.ietoeh Fo lKutrts znl cc hi ee ekOtggsnkidy hini cna neea civo lh for i in range(2,10): print(i,newobj.Vdecipher(string,i)) \u8fd0\u884c\u7a0b\u5e8f\uff0c\u67e5\u770b\u6548\u679c\uff1a \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7b2c\u516b\u884c\u662f\u660e\u663e\u662f\u6709\u610f\u4e49\u7684\u660e\u6587\uff0c\u56e0\u6b64\u5bc6\u94a5\u4e3a8 \u95ee\u9898 \u5982\u679c\u5bc6\u6587\u7531100\u4f4d\u5b57\u6bcd\u7ec4\u6210\uff0c\u90a3\u6211\u4eec\u81f3\u5c11\u9700\u8981\u5c1d\u8bd550\u4e2a\u5bc6\u94a5\uff1f","title":"\u6805\u680f\u5bc6\u7801\u7684\u7834\u89e3"},{"location":"ClassicalCrypto/RailFenceCipher/#_5","text":"\u7ed3\u8bba \u6805\u680f\u5bc6\u7801\u662f\u4e00\u4e2a\u975e\u5e38\u5bb9\u6613\u7834\u89e3\u7684\u5bc6\u7801\uff0c\u5bc6\u7801\u5206\u6790\u8005\u53ea\u9700\u8981\u5c1d\u8bd5\u51e0\u4e2a\u5bc6\u94a5\u5373\u53ef\u627e\u5230\u6b63\u786e\u7684\u660e\u6587\u3002\u5982\u679c\u60a8\u77e5\u9053\u67d0\u4e9b\u660e\u6587\uff0c\u6216\u8005\u53ef\u4ee5\u731c\u51fa\u4e00\u4e9b\u660e\u6587\uff0c\u90a3\u4e48\u5c06\u66f4\u5bb9\u6613\u627e\u5230\u5bc6\u94a5\u3002 \u6362\u4f4d\u5bc6\u7801\u7684\u4e00\u4e2a\u7279\u70b9\u662f\u5b57\u7b26\u7684\u9891\u7387\u5206\u5e03\u4e0e\u81ea\u7136\u6587\u672c\u7684\u9891\u7387\u5206\u5e03\u76f8\u540c\uff08\u56e0\u4e3a\u6ca1\u6709\u8fdb\u884c\u66ff\u6362\uff0c\u5b83\u53ea\u662f\u6df7\u5408\u7684\u987a\u5e8f\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u5e94\u8be5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a","title":"\u6805\u680f\u5bc6\u7801\u5c0f\u7ed3"},{"location":"ClassicalCrypto/Transpcipher/","text":"\u5217\u79fb\u4f4d\u5bc6\u7801\u7b80\u4ecb \u5217\u79fb\u4f4d\u5bc6\u7801\u662f\u4e00\u79cd\u6bd4\u8f83\u7b80\u5355\u3001\u6613\u4e8e\u5b9e\u73b0\u7684\u6362\u4f4d\u5bc6\u7801\uff0c\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u5730\u89c4\u5219\u5c06\u660e\u6587\u6253\u4e71\u6df7\u5408\u6210\u5bc6\u6587\u3002 \u867d\u7136\u5217\u79fb\u4f4d\u5bc6\u7801\u672c\u8eab\u5f88\u5f31\uff0c\u4f46\u5982\u679c\u7ed3\u5408\u5176\u4ed6\u5bc6\u7801\u4e00\u8d77\u4f7f\u7528\uff0c\u4f8b\u5982\u66ff\u6362\u5bc6\u7801\uff0c\u7ec4\u5408\u540e\u7684\u5bc6\u7801\u66f4\u96be\u7834\u89e3\u3002 \u4f8b\u9898 \u4e0b\u9762\u6211\u4eec\u4ee5\u660e\u6587\"The quick brown fox jumps over the lazy dog\" \u5bc6\u94a5 how are u\u4e3a\u4f8b\uff1a \u586b\u51655\u884c7\u5217\u8868(\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff0c\u5982\u679c\u660e\u6587\u4e0d\u80fd\u586b\u5145\u5b8c\u8868\u683c\u53ef\u4ee5\u7ea6\u5b9a\u4f7f\u7528\u67d0\u4e2a\u5b57\u6bcd\u8fdb\u884c\u586b\u5145) \u6309how are u\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u51fa\u73b0\u7684\u5148\u540e\u987a\u5e8f\u8fdb\u884c\u7f16\u53f7\uff0c\u6211\u4eec\u5c31\u6709a\u4e3a1,e\u4e3a2\uff0ch\u4e3a3\uff0co\u4e3a4\uff0cr\u4e3a5\uff0cu\u4e3a6\uff0cw\u4e3a7\uff0c\u6240\u4ee5\u5148\u5199\u51faa\u5217\uff0c\u5176\u6b21e\u5217\uff0c\u4ee5\u6b64\u7c7b\u63a8\u5199\u51fa\u7684\u7ed3\u679c\u4fbf\u662f\u5bc6\u6587\uff1a \u5bc6\u6587\uff1a qoury inpho Tkool hbxva uwmtd cfseg erjez \u5217\u79fb\u4f4d\u5bc6\u7801\u7684\u7a0b\u5e8f\u5b9e\u73b0 \u5728python\u4e2d\u52a0\u5bc6\u52a0\u5bc6\u660e\u6587\uff0c\u53ef\u4ee5\u4f7f\u7528pycipher\u6a21\u5757\uff08\u4f7f\u7528pip install pycipher\u5b89\u88c5\uff09\u3002 from pycipher import ColTrans ColTrans( HELLO ).encipher( defend the east wall of the castle ) ETSLELDDALHTFHTOCEEEWFANEATS ColTrans( HELLO ).decipher( ETSLELDDALHTFHTOCEEEWFANEATS ) DEFENDTHEEASTWALLOFTHECASTLE \u5217\u79fb\u4f4d\u5bc6\u7801\u7684\u5bc6\u7801\u5206\u6790 \u5f3a\u8c03 \u5982\u679c\u4f7f\u7528\u957f\u5bc6\u94a5\uff08\u6bd4\u5982\u5bc6\u94a5\u957f\u5ea6\u4e3a20\uff09\uff0c\u5217\u79fb\u4f4d\u5bc6\u7801\u662f\u4e00\u79cd\u4ee4\u4eba\u60ca\u8bb6\u7684\u5b89\u5168\u5bc6\u7801\u3002 \u66b4\u529b\u7834\u89e3 \u7834\u89e3\u5217\u79fb\u4f4d\u5bc6\u7801\u7684\u7b2c\u4e00\u6b65\u5c31\u662f\u66b4\u529b\u7834\u89e3\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u5f88\u77ed\u65f6\u95f4\u5185\u904d\u53869\u4f4d\u4ee5\u4e0b\u7684\u5bc6\u94a5\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u4e0d\u540c\u7684\u5bc6\u94a5\u7a7a\u95f4\uff1a Key Length No. of permutations Examples 2 2 AB, BA 3 6 ABC, BAC, CBA, ... 4 24 ABCD, ABDC, ACBD, ... 5 120 ABCDE, ABCED, ... 6 720 ABCDEF, ABDCFE, ... 7 5,040 ABCDEFG, ABDCGEF, ... 8 40,320 ABCDEFGH, ... 9 362,880 ABCDEFGHI, ... 10 3,628,800 ABCDEFGHIJ, ... 11 39,916,800 ABCDEFGHIJK, ... 12 479,001,600 ABCDEFGHIJKL, ... \u53ef\u4ee5\u770b\u5230\u5bc6\u94a5\u957f\u5ea6\u4e3a9\u7684\u65f6\u5019\uff0c\u5bc6\u94a5\u7a7a\u95f4\u4ec5\u4e3a41\u4e07\u5de6\u53f3\uff0c\u8ba1\u7b97\u673a\u53ef\u4ee5\u5f88\u5feb\u7684\u904d\u5386\u5b8c\u3002 \u5b57\u5178\u653b\u51fb \u5982\u679c\u7206\u7834\u5931\u8d25\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b57\u5178\u653b\u51fb\u3002\u5217\u79fb\u4f4d\u5bc6\u7801\u7ecf\u5e38\u4f7f\u7528\u5355\u8bcd\u6216\u77ed\u8bed\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u5e38\u7528\u8bcd\u8bed\u4f5c\u4e3a\u5b57\u5178\u8fdb\u884c\u7834\u89e3. \u6211\u4eec\u5728\u66b4\u529b\u7834\u89e3\u4e2d\u6d4b\u8bd5\u4e86\u8f83\u77ed\u7684\u5355\u8bcd\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u6d4b\u8bd5\u957f\u5ea6\u8d85\u8fc79\u7684\u5b57\u5178\uff0c\u5305\u542b\u5730\u540d\uff0c\u4eba\u540d\uff0c\u5386\u53f2\u540d\u7b49\u3002 \u4f46\u5982\u679c\u5173\u952e\u5b57\u662f\u7c7b\u4f3c\"THEBLOOMSINSEPTEMBER\"\u8fd9\u79cd\u7684\uff0c\u90a3\u591a\u5f3a\u5927\u7684\u5b57\u5178\u4e5f\u6ca1\u6709\u7528\u4e86.... \u722c\u5c71\u7b97\u6cd5 \u6b64\u5904\u7684\u722c\u5c71\u7b97\u6cd5\u548c\u6211\u4eec\u5728\u66ff\u6362\u5bc6\u7801\u4e2d\u7684\u722c\u5c71\u7b97\u6cd5\u662f\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u9996\u5148\u5047\u8bbe\u5bc6\u94a5\u957f\u5ea6\u4e3a10\uff0c\u7136\u540e\u9009\u62e9\u6b64\u957f\u5ea6\u7684\u968f\u673a\u7236\u5bc6\u94a5\uff0c\u901a\u8fc7\u5728\u7236\u5bc6\u94a5\u4e2d\u8fdb\u884c\u968f\u673a\u4ea4\u6362\u6765\u751f\u6210\u5b50\u5bc6\u94a5\uff0c\u5982\u679c\u5b50\u5bc6\u94a5\u53ef\u8bfb\u6027\u66f4\u9ad8\uff0c\u90a3\u6211\u4eec\u5c31\u7528\u5b50\u5bc6\u94a5\u4ee3\u66ff\u7236\u5bc6\u94a5\u3002 \u5728\u7ecf\u8fc7\u6210\u767e\u4e0a\u5343\u7684\u5faa\u73af\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u627e\u5230\u6b63\u786e\u7684\u5bc6\u94a5\u3002\u5982\u679c\u627e\u4e0d\u5230\u6b63\u786e\u7684\u5bc6\u94a5\uff0c\u6211\u4eec\u53ef\u4ee5\u589e\u52a0\u5bc6\u94a5\u957f\u5ea6\u518d\u6267\u884c\u722c\u5c71\u7b97\u6cd5\u3002 \u4f46\u5bf9\u4e8e\u957f\u5ea6\u5927\u4e8e20\u4ee5\u4e0a\u7684\u5bc6\u94a5\u6765\u8bf4\uff0c\u6a21\u62df\u9000\u706b\u7b97\u6cd5\u53ef\u80fd\u662f\u66f4\u597d\u5730\u9009\u62e9\u3002 \u95ee\u9898 \u5982\u679c\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u653b\u51fb\u5217\u79fb\u4f4d\u5bc6\u7801\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u5224\u65ad\u5bc6\u94a5\u662f\u5426\u6b63\u786e\uff1f","title":"\u5217\u79fb\u4f4d\u5bc6\u7801"},{"location":"ClassicalCrypto/Transpcipher/#_1","text":"\u5217\u79fb\u4f4d\u5bc6\u7801\u662f\u4e00\u79cd\u6bd4\u8f83\u7b80\u5355\u3001\u6613\u4e8e\u5b9e\u73b0\u7684\u6362\u4f4d\u5bc6\u7801\uff0c\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u5730\u89c4\u5219\u5c06\u660e\u6587\u6253\u4e71\u6df7\u5408\u6210\u5bc6\u6587\u3002 \u867d\u7136\u5217\u79fb\u4f4d\u5bc6\u7801\u672c\u8eab\u5f88\u5f31\uff0c\u4f46\u5982\u679c\u7ed3\u5408\u5176\u4ed6\u5bc6\u7801\u4e00\u8d77\u4f7f\u7528\uff0c\u4f8b\u5982\u66ff\u6362\u5bc6\u7801\uff0c\u7ec4\u5408\u540e\u7684\u5bc6\u7801\u66f4\u96be\u7834\u89e3\u3002 \u4f8b\u9898 \u4e0b\u9762\u6211\u4eec\u4ee5\u660e\u6587\"The quick brown fox jumps over the lazy dog\" \u5bc6\u94a5 how are u\u4e3a\u4f8b\uff1a \u586b\u51655\u884c7\u5217\u8868(\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff0c\u5982\u679c\u660e\u6587\u4e0d\u80fd\u586b\u5145\u5b8c\u8868\u683c\u53ef\u4ee5\u7ea6\u5b9a\u4f7f\u7528\u67d0\u4e2a\u5b57\u6bcd\u8fdb\u884c\u586b\u5145) \u6309how are u\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u51fa\u73b0\u7684\u5148\u540e\u987a\u5e8f\u8fdb\u884c\u7f16\u53f7\uff0c\u6211\u4eec\u5c31\u6709a\u4e3a1,e\u4e3a2\uff0ch\u4e3a3\uff0co\u4e3a4\uff0cr\u4e3a5\uff0cu\u4e3a6\uff0cw\u4e3a7\uff0c\u6240\u4ee5\u5148\u5199\u51faa\u5217\uff0c\u5176\u6b21e\u5217\uff0c\u4ee5\u6b64\u7c7b\u63a8\u5199\u51fa\u7684\u7ed3\u679c\u4fbf\u662f\u5bc6\u6587\uff1a \u5bc6\u6587\uff1a qoury inpho Tkool hbxva uwmtd cfseg erjez","title":"\u5217\u79fb\u4f4d\u5bc6\u7801\u7b80\u4ecb"},{"location":"ClassicalCrypto/Transpcipher/#_2","text":"\u5728python\u4e2d\u52a0\u5bc6\u52a0\u5bc6\u660e\u6587\uff0c\u53ef\u4ee5\u4f7f\u7528pycipher\u6a21\u5757\uff08\u4f7f\u7528pip install pycipher\u5b89\u88c5\uff09\u3002 from pycipher import ColTrans ColTrans( HELLO ).encipher( defend the east wall of the castle ) ETSLELDDALHTFHTOCEEEWFANEATS ColTrans( HELLO ).decipher( ETSLELDDALHTFHTOCEEEWFANEATS ) DEFENDTHEEASTWALLOFTHECASTLE","title":"\u5217\u79fb\u4f4d\u5bc6\u7801\u7684\u7a0b\u5e8f\u5b9e\u73b0"},{"location":"ClassicalCrypto/Transpcipher/#_3","text":"\u5f3a\u8c03 \u5982\u679c\u4f7f\u7528\u957f\u5bc6\u94a5\uff08\u6bd4\u5982\u5bc6\u94a5\u957f\u5ea6\u4e3a20\uff09\uff0c\u5217\u79fb\u4f4d\u5bc6\u7801\u662f\u4e00\u79cd\u4ee4\u4eba\u60ca\u8bb6\u7684\u5b89\u5168\u5bc6\u7801\u3002","title":"\u5217\u79fb\u4f4d\u5bc6\u7801\u7684\u5bc6\u7801\u5206\u6790"},{"location":"ClassicalCrypto/Transpcipher/#_4","text":"\u7834\u89e3\u5217\u79fb\u4f4d\u5bc6\u7801\u7684\u7b2c\u4e00\u6b65\u5c31\u662f\u66b4\u529b\u7834\u89e3\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u5f88\u77ed\u65f6\u95f4\u5185\u904d\u53869\u4f4d\u4ee5\u4e0b\u7684\u5bc6\u94a5\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u4e0d\u540c\u7684\u5bc6\u94a5\u7a7a\u95f4\uff1a Key Length No. of permutations Examples 2 2 AB, BA 3 6 ABC, BAC, CBA, ... 4 24 ABCD, ABDC, ACBD, ... 5 120 ABCDE, ABCED, ... 6 720 ABCDEF, ABDCFE, ... 7 5,040 ABCDEFG, ABDCGEF, ... 8 40,320 ABCDEFGH, ... 9 362,880 ABCDEFGHI, ... 10 3,628,800 ABCDEFGHIJ, ... 11 39,916,800 ABCDEFGHIJK, ... 12 479,001,600 ABCDEFGHIJKL, ... \u53ef\u4ee5\u770b\u5230\u5bc6\u94a5\u957f\u5ea6\u4e3a9\u7684\u65f6\u5019\uff0c\u5bc6\u94a5\u7a7a\u95f4\u4ec5\u4e3a41\u4e07\u5de6\u53f3\uff0c\u8ba1\u7b97\u673a\u53ef\u4ee5\u5f88\u5feb\u7684\u904d\u5386\u5b8c\u3002","title":"\u66b4\u529b\u7834\u89e3"},{"location":"ClassicalCrypto/Transpcipher/#_5","text":"\u5982\u679c\u7206\u7834\u5931\u8d25\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b57\u5178\u653b\u51fb\u3002\u5217\u79fb\u4f4d\u5bc6\u7801\u7ecf\u5e38\u4f7f\u7528\u5355\u8bcd\u6216\u77ed\u8bed\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u5e38\u7528\u8bcd\u8bed\u4f5c\u4e3a\u5b57\u5178\u8fdb\u884c\u7834\u89e3. \u6211\u4eec\u5728\u66b4\u529b\u7834\u89e3\u4e2d\u6d4b\u8bd5\u4e86\u8f83\u77ed\u7684\u5355\u8bcd\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u6d4b\u8bd5\u957f\u5ea6\u8d85\u8fc79\u7684\u5b57\u5178\uff0c\u5305\u542b\u5730\u540d\uff0c\u4eba\u540d\uff0c\u5386\u53f2\u540d\u7b49\u3002 \u4f46\u5982\u679c\u5173\u952e\u5b57\u662f\u7c7b\u4f3c\"THEBLOOMSINSEPTEMBER\"\u8fd9\u79cd\u7684\uff0c\u90a3\u591a\u5f3a\u5927\u7684\u5b57\u5178\u4e5f\u6ca1\u6709\u7528\u4e86....","title":"\u5b57\u5178\u653b\u51fb"},{"location":"ClassicalCrypto/Transpcipher/#_6","text":"\u6b64\u5904\u7684\u722c\u5c71\u7b97\u6cd5\u548c\u6211\u4eec\u5728\u66ff\u6362\u5bc6\u7801\u4e2d\u7684\u722c\u5c71\u7b97\u6cd5\u662f\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u9996\u5148\u5047\u8bbe\u5bc6\u94a5\u957f\u5ea6\u4e3a10\uff0c\u7136\u540e\u9009\u62e9\u6b64\u957f\u5ea6\u7684\u968f\u673a\u7236\u5bc6\u94a5\uff0c\u901a\u8fc7\u5728\u7236\u5bc6\u94a5\u4e2d\u8fdb\u884c\u968f\u673a\u4ea4\u6362\u6765\u751f\u6210\u5b50\u5bc6\u94a5\uff0c\u5982\u679c\u5b50\u5bc6\u94a5\u53ef\u8bfb\u6027\u66f4\u9ad8\uff0c\u90a3\u6211\u4eec\u5c31\u7528\u5b50\u5bc6\u94a5\u4ee3\u66ff\u7236\u5bc6\u94a5\u3002 \u5728\u7ecf\u8fc7\u6210\u767e\u4e0a\u5343\u7684\u5faa\u73af\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u627e\u5230\u6b63\u786e\u7684\u5bc6\u94a5\u3002\u5982\u679c\u627e\u4e0d\u5230\u6b63\u786e\u7684\u5bc6\u94a5\uff0c\u6211\u4eec\u53ef\u4ee5\u589e\u52a0\u5bc6\u94a5\u957f\u5ea6\u518d\u6267\u884c\u722c\u5c71\u7b97\u6cd5\u3002 \u4f46\u5bf9\u4e8e\u957f\u5ea6\u5927\u4e8e20\u4ee5\u4e0a\u7684\u5bc6\u94a5\u6765\u8bf4\uff0c\u6a21\u62df\u9000\u706b\u7b97\u6cd5\u53ef\u80fd\u662f\u66f4\u597d\u5730\u9009\u62e9\u3002 \u95ee\u9898 \u5982\u679c\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u653b\u51fb\u5217\u79fb\u4f4d\u5bc6\u7801\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u5224\u65ad\u5bc6\u94a5\u662f\u5426\u6b63\u786e\uff1f","title":"\u722c\u5c71\u7b97\u6cd5"},{"location":"ClassicalCrypto/UnicityDistance/","text":"\u552f\u4e00\u89e3\u8ddd\u79bb\u7b80\u4ecb \u552f\u4e00\u89e3\u4e3e\u4f8b\u56de\u7b54\u4e86\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53\u5bf9\u5bc6\u6587\u8fdb\u884c\u66b4\u529b\u7834\u89e3\u65f6\uff0c\u53ef\u80fd\u89e3\u5bc6\u51fa\u552f\u4e00\u6709\u610f\u4e49\u7684\u660e\u6587\u6240\u9700\u8981\u7684\u6700\u5c11\u5bc6\u6587\u91cf\u662f\u591a\u5c11\uff1f\u7b54\u6848\u53d6\u51b3\u4e8e\u82f1\u8bed\u7684\u5197\u4f59\u7a0b\u5ea6\u3002\u6211\u4eec\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a \u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u7ed9\u5b9a\u4e86\u4e00\u4e2a\u5f85\u89e3\u5bc6\u7684\u6d88\u606f\uff1aFJKFPO\uff08\u5b83\u4f7f\u7528\u66ff\u6362\u5bc6\u7801\u52a0\u5bc6\uff09\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u7834\u89e3\u5b83\u5417\uff1f \u7b54\u6848 \u6211\u4eec\u4e0d\u4e00\u5b9a\u80fd\u7834\u89e3\u8fd9\u6bb5\u5bc6\u6587\uff0c\u867d\u7136\u5b83\u5f88\u77ed\uff0c\u4f46\u662f\u53ef\u4ee5\u627e\u5230\u5f88\u591a\u79cd\u7b26\u5408\u8981\u6c42\u7684\u5355\u8bcd\uff0c\u4f46\u5728\u6211\u4eec\u6c38\u8fdc\u4e0d\u77e5\u9053\u54ea\u4e2a\u5355\u8bcd\u662f\u771f\u6b63\u7684\u539f\u59cb\u660e\u6587 thatis ofyour season onyour thatwe thetop thetwo oxford thatin thatof \u5197\u4f59 \u66ff\u6362\u5bc6\u7801\u7684\u5bc6\u94a5\u753126\u4e2a\u5b57\u6bcd\u7ec4\u6210\uff0c\u5bc6\u94a5\u7684\u603b\u6570\u662f26!\uff08\u9636\u4e58\uff09\u3002\u5219\u4ee5\u6bd4\u7279\u4e3a\u5355\u4f4d\u6d4b\u91cf\u7684\u4fe1\u606f\u91cf\u4e3a\uff1a \u5f85\u8865\u5145 \u552f\u4e00\u89e3\u8ddd\u79bb \u5f85\u8865\u5145 \u5f15\u6587 \u5173\u4e8e\u552f\u4e00\u89e3\u8ddd\u79bb\u95ee\u9898\u6709\u6b67\u4e49\u53ef\u53c2\u8003: \u738b\u52c7.\u7f8e\u56fd\u6570\u5b66\u5bb6\u9999\u519c\u552f\u4e00\u89e3\u8ddd\u79bb\u7406\u8bba\u63a2\u7a76[J].\u4fe1\u606f\u7f51\u7edc\u5b89\u5168,2009(08):61-63.","title":"\u552f\u4e00\u89e3\u8ddd\u79bb"},{"location":"ClassicalCrypto/UnicityDistance/#_1","text":"\u552f\u4e00\u89e3\u4e3e\u4f8b\u56de\u7b54\u4e86\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53\u5bf9\u5bc6\u6587\u8fdb\u884c\u66b4\u529b\u7834\u89e3\u65f6\uff0c\u53ef\u80fd\u89e3\u5bc6\u51fa\u552f\u4e00\u6709\u610f\u4e49\u7684\u660e\u6587\u6240\u9700\u8981\u7684\u6700\u5c11\u5bc6\u6587\u91cf\u662f\u591a\u5c11\uff1f\u7b54\u6848\u53d6\u51b3\u4e8e\u82f1\u8bed\u7684\u5197\u4f59\u7a0b\u5ea6\u3002\u6211\u4eec\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a \u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u7ed9\u5b9a\u4e86\u4e00\u4e2a\u5f85\u89e3\u5bc6\u7684\u6d88\u606f\uff1aFJKFPO\uff08\u5b83\u4f7f\u7528\u66ff\u6362\u5bc6\u7801\u52a0\u5bc6\uff09\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u7834\u89e3\u5b83\u5417\uff1f \u7b54\u6848 \u6211\u4eec\u4e0d\u4e00\u5b9a\u80fd\u7834\u89e3\u8fd9\u6bb5\u5bc6\u6587\uff0c\u867d\u7136\u5b83\u5f88\u77ed\uff0c\u4f46\u662f\u53ef\u4ee5\u627e\u5230\u5f88\u591a\u79cd\u7b26\u5408\u8981\u6c42\u7684\u5355\u8bcd\uff0c\u4f46\u5728\u6211\u4eec\u6c38\u8fdc\u4e0d\u77e5\u9053\u54ea\u4e2a\u5355\u8bcd\u662f\u771f\u6b63\u7684\u539f\u59cb\u660e\u6587 thatis ofyour season onyour thatwe thetop thetwo oxford thatin thatof","title":"\u552f\u4e00\u89e3\u8ddd\u79bb\u7b80\u4ecb"},{"location":"ClassicalCrypto/UnicityDistance/#_2","text":"\u66ff\u6362\u5bc6\u7801\u7684\u5bc6\u94a5\u753126\u4e2a\u5b57\u6bcd\u7ec4\u6210\uff0c\u5bc6\u94a5\u7684\u603b\u6570\u662f26!\uff08\u9636\u4e58\uff09\u3002\u5219\u4ee5\u6bd4\u7279\u4e3a\u5355\u4f4d\u6d4b\u91cf\u7684\u4fe1\u606f\u91cf\u4e3a\uff1a \u5f85\u8865\u5145","title":"\u5197\u4f59"},{"location":"ClassicalCrypto/UnicityDistance/#_3","text":"\u5f85\u8865\u5145","title":"\u552f\u4e00\u89e3\u8ddd\u79bb"},{"location":"ClassicalCrypto/UnicityDistance/#_4","text":"\u5173\u4e8e\u552f\u4e00\u89e3\u8ddd\u79bb\u95ee\u9898\u6709\u6b67\u4e49\u53ef\u53c2\u8003: \u738b\u52c7.\u7f8e\u56fd\u6570\u5b66\u5bb6\u9999\u519c\u552f\u4e00\u89e3\u8ddd\u79bb\u7406\u8bba\u63a2\u7a76[J].\u4fe1\u606f\u7f51\u7edc\u5b89\u5168,2009(08):61-63.","title":"\u5f15\u6587"},{"location":"ClassicalCrypto/WordStatistics/","text":"\u5355\u8bcd\u7edf\u8ba1\u7b80\u4ecb \u5728\u4e4b\u524d\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528\u56db\u5143\u7ec4\u6765\u786e\u5b9a\u4e00\u6bb5\u6587\u672c\u548c\u82f1\u6587\u7684\u76f8\u4f3c\u7a0b\u5ea6\uff0c\u800c\u672c\u8282\u4e3b\u8981\u901a\u8fc7\u5206\u6790\u4e00\u6bb5\u6587\u672c\u4e2d\u5305\u542b\u7684\u82f1\u6587\u5355\u8bcd\u6765\u786e\u5b9a\u6587\u672c\u4e0e\u82f1\u6587\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002 \u5728\u8fd9\u4e4b\u524d\u6709\u4e00\u4e2a\u524d\u63d0\uff1a\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u8bed\u6599\u5e93\uff0c\u4ee5\u4fbf\u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u6982\u7387\u3002\u4e3a\u4e86\u51c6\u786e\u7684\u8ba1\u7b97\u6982\u7387\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u8c37\u6b4c\u7684 trillion word database \u6570\u636e\u5e93\u3002 \u5206\u8bcd \u4e3a\u4e86\u8ba1\u7b97\u4e00\u6bb5\u6587\u672c\u4e0e\u82f1\u6587\u7684\u76f8\u4f3c\u7a0b\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u63d0\u53d6\u6240\u6709\u7684\u5355\u8bcd\uff0c\u5c06\u6240\u6709\u7684\u5355\u8bcd\u6982\u7387\u76f8\u4e58\u5f97\u5230\u6587\u672c\u7684\u603b\u6982\u7387\u3002\u4f46\u662f\u5728\u7834\u89e3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5bc6\u6587\u5f80\u5f80\u662f\u672a\u7ecf\u8fc7\u5206\u8bcd\u7684\u4e00\u6574\u6bb5\u6587\u672c\uff0c\u5982\u679c\u6211\u4eec\u5bf9\u8fd9\u6bb5\u6587\u672c\u66b4\u529b\u5206\u8bcd\uff0c\u5219\u53ef\u80fd\u4f1a\u67092^(L-1)\u79cd\u5206\u8bcd\u60c5\u51b5\u3002 \u5e78\u8fd0\u7684\u662f\uff0cPeter Norvig\u5728\u300a\u7f8e\u4e3d\u7684\u6570\u636e\u300b\u4e00\u4e66\u4e2d\u63d0\u51fa\u4e86\u4e00\u79cd\u4f18\u96c5\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e4b\u4e3amomoized\u9012\u5f52\uff0c\u6709\u5173\u4e8emomoized\u7684\u66f4\u591a\u8be6\u7ec6\u8d44\u6599\u8bf7\u9605\u8bfb Peter Norvig\u7684\u7f51\u7ad9 \u5355\u8bcd\u7edf\u8ba1\u7684\u7a0b\u5e8f\u5b9e\u73b0 \u5355\u8bcd\u7edf\u8ba1\u5b57\u5178\u4e0b\u8f7d\u5730\u5740 python\u7a0b\u5e8f\uff1a from math import log10 class word_score ( object ): def __init__ ( self ): load a file containing ngrams and counts, calculate log probabilities self . Pw = {} for line in file ( count_1w.txt ): key , count = line . split ( \\t ) self . Pw [ key . upper ()] = self . Pw . get ( key . upper (), 0 ) + int ( count ) self . N = 1024908267229 ## Number of tokens #calculate first order log probabilities for key in self . Pw . keys (): self . Pw [ key ] = log10 ( float ( self . Pw [ key ]) / self . N ) #get second order word model self . Pw2 = {} for line in file ( count_2w.txt ): key , count = line . split ( \\t ) self . Pw2 [ key . upper ()] = self . Pw2 . get ( key . upper (), 0 ) + int ( count ) #calculate second order log probabilities for key in self . Pw2 . keys (): word1 , word2 = key . split () if word1 not in self . Pw : self . Pw2 [ key ] = log10 ( float ( self . Pw2 [ key ]) / self . N ) else : self . Pw2 [ key ] = log10 ( float ( self . Pw2 [ key ]) / self . N ) - self . Pw [ word1 ] # precalculate the probabilities we assign to words not in our dict, L is length of word self . unseen = [ log10 ( 10. / ( self . N * 10 ** L )) for L in range ( 50 )] # conditional word probability def cPw ( self , word , prev = UNK ): if word not in self . Pw : return self . unseen [ len ( word )] elif prev + + word not in self . Pw2 : return self . Pw [ word ] else : return self . Pw2 [ prev + + word ] def score ( self , text , maxwordlen = 20 ): prob = [[ - 99e99 ] * maxwordlen for _ in range ( len ( text ))] strs = [[ ] * maxwordlen for _ in range ( len ( text ))] for j in range ( maxwordlen ): prob [ 0 ][ j ] = self . cPw ( text [: j + 1 ]) strs [ 0 ][ j ] = [ text [: j + 1 ]] for i in range ( 1 , len ( text )): for j in range ( maxwordlen ): if i + j + 1 len ( text ): break candidates = [( prob [ i - k - 1 ][ k ] + self . cPw ( text [ i : i + j + 1 ], strs [ i - k - 1 ][ k ][ - 1 ]), strs [ i - k - 1 ][ k ] + [ text [ i : i + j + 1 ]] ) for k in range ( min ( i , maxwordlen ))] prob [ i ][ j ], strs [ i ][ j ] = max ( candidates ) ends = [( prob [ - i - 1 ][ i ], strs [ - i - 1 ][ i ]) for i in range ( min ( len ( text ), maxwordlen ))] return max ( ends ) \u4e3e\u4f8b \u4e3e\u4f8b \u6765\u5c1d\u8bd5\u5c06\u53e5\u5b50 HELLOHOWAREYOUTODAY \u5206\u6bb5\uff0c\u5e76\u8ba1\u7b97\u5206\u6570 from word_score import word_score fitness = word_score () print fitness . score ( HELLOHOWAREYOUTODAY ) \u7a0b\u5e8f\u7684\u9884\u671f\u8fd4\u56de\u7ed3\u679c\u662f\uff1a (-15.227537974076597,['HELLO','HOW','ARE','YOU','TODAY']) \u63d0\u793a \u5176\u4e2d\u6587\u672c\u5fc5\u987b\u4e3a\u5927\u5199\u7a0b\u5e8f\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c","title":"\u5355\u8bcd\u7edf\u8ba1"},{"location":"ClassicalCrypto/WordStatistics/#_1","text":"\u5728\u4e4b\u524d\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528\u56db\u5143\u7ec4\u6765\u786e\u5b9a\u4e00\u6bb5\u6587\u672c\u548c\u82f1\u6587\u7684\u76f8\u4f3c\u7a0b\u5ea6\uff0c\u800c\u672c\u8282\u4e3b\u8981\u901a\u8fc7\u5206\u6790\u4e00\u6bb5\u6587\u672c\u4e2d\u5305\u542b\u7684\u82f1\u6587\u5355\u8bcd\u6765\u786e\u5b9a\u6587\u672c\u4e0e\u82f1\u6587\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002 \u5728\u8fd9\u4e4b\u524d\u6709\u4e00\u4e2a\u524d\u63d0\uff1a\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u8bed\u6599\u5e93\uff0c\u4ee5\u4fbf\u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u6982\u7387\u3002\u4e3a\u4e86\u51c6\u786e\u7684\u8ba1\u7b97\u6982\u7387\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u8c37\u6b4c\u7684 trillion word database \u6570\u636e\u5e93\u3002","title":"\u5355\u8bcd\u7edf\u8ba1\u7b80\u4ecb"},{"location":"ClassicalCrypto/WordStatistics/#_2","text":"\u4e3a\u4e86\u8ba1\u7b97\u4e00\u6bb5\u6587\u672c\u4e0e\u82f1\u6587\u7684\u76f8\u4f3c\u7a0b\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u63d0\u53d6\u6240\u6709\u7684\u5355\u8bcd\uff0c\u5c06\u6240\u6709\u7684\u5355\u8bcd\u6982\u7387\u76f8\u4e58\u5f97\u5230\u6587\u672c\u7684\u603b\u6982\u7387\u3002\u4f46\u662f\u5728\u7834\u89e3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5bc6\u6587\u5f80\u5f80\u662f\u672a\u7ecf\u8fc7\u5206\u8bcd\u7684\u4e00\u6574\u6bb5\u6587\u672c\uff0c\u5982\u679c\u6211\u4eec\u5bf9\u8fd9\u6bb5\u6587\u672c\u66b4\u529b\u5206\u8bcd\uff0c\u5219\u53ef\u80fd\u4f1a\u67092^(L-1)\u79cd\u5206\u8bcd\u60c5\u51b5\u3002 \u5e78\u8fd0\u7684\u662f\uff0cPeter Norvig\u5728\u300a\u7f8e\u4e3d\u7684\u6570\u636e\u300b\u4e00\u4e66\u4e2d\u63d0\u51fa\u4e86\u4e00\u79cd\u4f18\u96c5\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e4b\u4e3amomoized\u9012\u5f52\uff0c\u6709\u5173\u4e8emomoized\u7684\u66f4\u591a\u8be6\u7ec6\u8d44\u6599\u8bf7\u9605\u8bfb Peter Norvig\u7684\u7f51\u7ad9","title":"\u5206\u8bcd"},{"location":"ClassicalCrypto/WordStatistics/#_3","text":"\u5355\u8bcd\u7edf\u8ba1\u5b57\u5178\u4e0b\u8f7d\u5730\u5740 python\u7a0b\u5e8f\uff1a from math import log10 class word_score ( object ): def __init__ ( self ): load a file containing ngrams and counts, calculate log probabilities self . Pw = {} for line in file ( count_1w.txt ): key , count = line . split ( \\t ) self . Pw [ key . upper ()] = self . Pw . get ( key . upper (), 0 ) + int ( count ) self . N = 1024908267229 ## Number of tokens #calculate first order log probabilities for key in self . Pw . keys (): self . Pw [ key ] = log10 ( float ( self . Pw [ key ]) / self . N ) #get second order word model self . Pw2 = {} for line in file ( count_2w.txt ): key , count = line . split ( \\t ) self . Pw2 [ key . upper ()] = self . Pw2 . get ( key . upper (), 0 ) + int ( count ) #calculate second order log probabilities for key in self . Pw2 . keys (): word1 , word2 = key . split () if word1 not in self . Pw : self . Pw2 [ key ] = log10 ( float ( self . Pw2 [ key ]) / self . N ) else : self . Pw2 [ key ] = log10 ( float ( self . Pw2 [ key ]) / self . N ) - self . Pw [ word1 ] # precalculate the probabilities we assign to words not in our dict, L is length of word self . unseen = [ log10 ( 10. / ( self . N * 10 ** L )) for L in range ( 50 )] # conditional word probability def cPw ( self , word , prev = UNK ): if word not in self . Pw : return self . unseen [ len ( word )] elif prev + + word not in self . Pw2 : return self . Pw [ word ] else : return self . Pw2 [ prev + + word ] def score ( self , text , maxwordlen = 20 ): prob = [[ - 99e99 ] * maxwordlen for _ in range ( len ( text ))] strs = [[ ] * maxwordlen for _ in range ( len ( text ))] for j in range ( maxwordlen ): prob [ 0 ][ j ] = self . cPw ( text [: j + 1 ]) strs [ 0 ][ j ] = [ text [: j + 1 ]] for i in range ( 1 , len ( text )): for j in range ( maxwordlen ): if i + j + 1 len ( text ): break candidates = [( prob [ i - k - 1 ][ k ] + self . cPw ( text [ i : i + j + 1 ], strs [ i - k - 1 ][ k ][ - 1 ]), strs [ i - k - 1 ][ k ] + [ text [ i : i + j + 1 ]] ) for k in range ( min ( i , maxwordlen ))] prob [ i ][ j ], strs [ i ][ j ] = max ( candidates ) ends = [( prob [ - i - 1 ][ i ], strs [ - i - 1 ][ i ]) for i in range ( min ( len ( text ), maxwordlen ))] return max ( ends )","title":"\u5355\u8bcd\u7edf\u8ba1\u7684\u7a0b\u5e8f\u5b9e\u73b0"},{"location":"ClassicalCrypto/WordStatistics/#_4","text":"\u4e3e\u4f8b \u6765\u5c1d\u8bd5\u5c06\u53e5\u5b50 HELLOHOWAREYOUTODAY \u5206\u6bb5\uff0c\u5e76\u8ba1\u7b97\u5206\u6570 from word_score import word_score fitness = word_score () print fitness . score ( HELLOHOWAREYOUTODAY ) \u7a0b\u5e8f\u7684\u9884\u671f\u8fd4\u56de\u7ed3\u679c\u662f\uff1a (-15.227537974076597,['HELLO','HOW','ARE','YOU','TODAY']) \u63d0\u793a \u5176\u4e2d\u6587\u672c\u5fc5\u987b\u4e3a\u5927\u5199\u7a0b\u5e8f\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c","title":"\u4e3e\u4f8b"},{"location":"ClassicalCrypto/caesarCipher/","text":"\u51ef\u6492\u5bc6\u7801\u7b80\u4ecb \u51ef\u6492\u5bc6\u7801\u662f\u5386\u53f2\u4e0a\u5df2\u77e5\u6700\u65e9\u7684\u5bc6\u7801\u4e4b\u4e00\u3002\u51ef\u6492\u5bc6\u7801\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\u201c\u79fb\u52a8\u201d\u4e86\u4e00\u5b9a\u7684\u4f4d\u7f6e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5bc6\u7801\u4e3a1\uff0c\u5219A\u5c06\u66ff\u6362\u4e3aB\uff0cB\u5c06\u66ff\u6362\u4e3aC\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u76f8\u4f20\u6700\u65e9\u662f\u51ef\u6492\u5927\u5e1d\u7528\u6765\u548c\u5c06\u519b\u8fdb\u884c\u79d8\u5bc6\u4ea4\u6d41\u65f6\u6240\u7528\u7684\u52a0\u5bc6\u65b9\u6cd5\u3002 \u6211\u4eec\u66f4\u52a0\u76f4\u89c2\u7684\u4e86\u89e3\u4e00\u4e0b\u51ef\u6492\u52a0\u5bc6\uff0c\u5982\u679c\u5bc6\u7801\u4e3a3\uff0c\u5219A\u88ab\u66ff\u6362\u6210D\u3001B\u88ab\u66ff\u6362\u6210E\uff0c\u5982\u4e0b\u56fe\u6240\u793a \u51ef\u6492\u5bc6\u7801\u793a\u4f8b \u4e3e\u4f8b \u6211\u4eec\u4f7f\u7528\u5bc6\u94a51\u6765\u52a0\u5bc6 defend the east wall of the castle \u9996\u5148\u5199\u51fa\u5bc6\u94a5\u4e3a1\u65f6\u660e\u6587\u548c\u5bc6\u6587\u7684\u5bf9\u7167\u8868\uff1a \u5bf9\u8981\u52a0\u5bc6\u7684\u660e\u6587\u9010\u4e2a\u67e5\u8868\u66ff\u6362\uff1aD\u66ff\u6362\u4e3aE\u3001E\u66ff\u6362\u4e3aF\u3001F\u66ff\u6362\u4e3aG\u3001E\u66ff\u6362\u4e3aF... \u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u6574\u6bb5\u660e\u6587\u90fd\u88ab\u52a0\u5bc6\u3002 plaintext: defend the east wall of the castle ciphertext: efgfoe uif fbtu xbmm pg uif dbtumf \u51ef\u6492\u5bc6\u7801\u7684\u6570\u5b66\u63cf\u8ff0 \u9996\u5148\uff0c\u6211\u4eec\u5c06\u6240\u6709\u5b57\u7b26\u7ffb\u8bd1\u6210\u6570\u5b57\uff0c'a'= 0\uff0c'b'= 1\uff0c'c'= 2\uff0c...\uff0c'z'= 25\u3002\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u6570\u5b66\u63cf\u8ff0\u8868\u793a\u51ef\u6492\u5bc6\u7801\u52a0\u5bc6\u51fd\u6570e(x)\uff0c\u5176\u4e2dx\u662f\u6211\u4eec\u8981\u52a0\u5bc6\u7684\u5b57\u7b26\uff0c\u5982\uff1a \u5176\u4e2dk\u662f\u5bc6\u94a5\uff08\u6bcf\u6b21\u52a0\u5bc6\u4f7f\u7528\u7684\u4f4d\u79fb\uff09\u3002\u4f7f\u7528\u8fd9\u4e2a\u516c\u5f0f\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u4e3a\u6570\u5b57\uff0c\u6211\u4eec\u9700\u8981\u518d\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u6bcd\u3002 \u89e3\u5bc6\u7684\u6570\u5b66\u63cf\u8ff0\u5982\u4e0b\uff1a \u51ef\u6492\u5bc6\u7801\u7684\u5bc6\u7801\u5206\u6790 lll \u51ef\u6492\u5bc6\u7801\u7684\u7a0b\u5e8f\u5b9e\u73b0 \u6ce8\u610f \u8be5\u7a0b\u5e8f\u9700\u8981\u914d\u5408\u6587\u672c\u8868\u5f81\u4e2d\u7684ngram_score\u8bc4\u5206\u6a21\u5757\uff0c\u4ee5\u53caquadgrams\u5b57\u5178\u3002\u8bf7\u79fb\u6b65\u81f3 \u56db\u5143\u7ec4\u7edf\u8ba1 \u3002 ### ### Date:2018-08-24 ### Time:09:00 GMT ### Author:nianhua ### from ngram_score import * fitness = ngram_score ( quadgrams.txt ) alphabetb = ABCDEFGHIJKLMNOPQRSTUVWXYZ alphabets = abcdefghijklmnopqrstuvwxyz scoretmp = [] newliste = [] ciphertext = input ( \u8bf7\u8f93\u5165\u8981\u7834\u89e3\u7684\u5bc6\u7801: ) def caser ( i ): plaintext = for j in ciphertext : if 64 ord ( j ) 91 : plaintext += alphabetb [ alphabetb . find ( j ) - i - 1 ] elif 96 ord ( j ) 123 : plaintext += alphabets [ alphabets . find ( j ) - i - 1 ] else : plaintext += j return plaintext def main (): for i in range ( 26 ): scoretmp . append ([]) plaintext = caser ( i ) scoretmp [ i ] . append ( i ) scoretmp [ i ] . append ( plaintext ) scoretmp [ i ] . append ( fitness . score ( . join ( list ( filter ( str . isalpha , plaintext ))) . upper ())) for i in range ( 26 ): scorevi = - 99e9 goodvi = 0 for j in scoretmp : if j [ 2 ] scorevi : scorevi = j [ 2 ] goodvi = j [ 0 ] newliste . append ( scoretmp [ goodvi ][:]) scoretmp [ goodvi ][ 2 ] = - 99e9 print ( %2d : %4.2f : %s % ( newliste [ i ][ 0 ], newliste [ i ][ 2 ], newliste [ i ][ 1 ])) if __main__ == __name__ : main () \u4e3e\u4f8b \u8bf7\u4f7f\u7528\u7a0b\u5e8f\u7834\u89e3\u8fd9\u6bb5\u5bc6\u6587\uff1a Yvccf Nficu \u67e5\u770b\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\uff1a \u7a0b\u5e8f\u901a\u8fc7\u7206\u7834\u51ef\u6492\u5bc6\u7801\u7684\u5bc6\u94a5\uff0c\u5e76\u5bf9\u89e3\u5bc6\u51fa\u6765\u7684\u6587\u672c\u8fdb\u884c\u8bc4\u5206\uff0c\u6309\u7167\u8bc4\u5206\u9ad8\u4f4e\u8fdb\u884c\u6392\u5e8f\u3002","title":"\u51ef\u6492\u5bc6\u7801"},{"location":"ClassicalCrypto/caesarCipher/#_1","text":"\u51ef\u6492\u5bc6\u7801\u662f\u5386\u53f2\u4e0a\u5df2\u77e5\u6700\u65e9\u7684\u5bc6\u7801\u4e4b\u4e00\u3002\u51ef\u6492\u5bc6\u7801\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\u201c\u79fb\u52a8\u201d\u4e86\u4e00\u5b9a\u7684\u4f4d\u7f6e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5bc6\u7801\u4e3a1\uff0c\u5219A\u5c06\u66ff\u6362\u4e3aB\uff0cB\u5c06\u66ff\u6362\u4e3aC\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u76f8\u4f20\u6700\u65e9\u662f\u51ef\u6492\u5927\u5e1d\u7528\u6765\u548c\u5c06\u519b\u8fdb\u884c\u79d8\u5bc6\u4ea4\u6d41\u65f6\u6240\u7528\u7684\u52a0\u5bc6\u65b9\u6cd5\u3002 \u6211\u4eec\u66f4\u52a0\u76f4\u89c2\u7684\u4e86\u89e3\u4e00\u4e0b\u51ef\u6492\u52a0\u5bc6\uff0c\u5982\u679c\u5bc6\u7801\u4e3a3\uff0c\u5219A\u88ab\u66ff\u6362\u6210D\u3001B\u88ab\u66ff\u6362\u6210E\uff0c\u5982\u4e0b\u56fe\u6240\u793a","title":"\u51ef\u6492\u5bc6\u7801\u7b80\u4ecb"},{"location":"ClassicalCrypto/caesarCipher/#_2","text":"\u4e3e\u4f8b \u6211\u4eec\u4f7f\u7528\u5bc6\u94a51\u6765\u52a0\u5bc6 defend the east wall of the castle \u9996\u5148\u5199\u51fa\u5bc6\u94a5\u4e3a1\u65f6\u660e\u6587\u548c\u5bc6\u6587\u7684\u5bf9\u7167\u8868\uff1a \u5bf9\u8981\u52a0\u5bc6\u7684\u660e\u6587\u9010\u4e2a\u67e5\u8868\u66ff\u6362\uff1aD\u66ff\u6362\u4e3aE\u3001E\u66ff\u6362\u4e3aF\u3001F\u66ff\u6362\u4e3aG\u3001E\u66ff\u6362\u4e3aF... \u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u6574\u6bb5\u660e\u6587\u90fd\u88ab\u52a0\u5bc6\u3002 plaintext: defend the east wall of the castle ciphertext: efgfoe uif fbtu xbmm pg uif dbtumf","title":"\u51ef\u6492\u5bc6\u7801\u793a\u4f8b"},{"location":"ClassicalCrypto/caesarCipher/#_3","text":"\u9996\u5148\uff0c\u6211\u4eec\u5c06\u6240\u6709\u5b57\u7b26\u7ffb\u8bd1\u6210\u6570\u5b57\uff0c'a'= 0\uff0c'b'= 1\uff0c'c'= 2\uff0c...\uff0c'z'= 25\u3002\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u6570\u5b66\u63cf\u8ff0\u8868\u793a\u51ef\u6492\u5bc6\u7801\u52a0\u5bc6\u51fd\u6570e(x)\uff0c\u5176\u4e2dx\u662f\u6211\u4eec\u8981\u52a0\u5bc6\u7684\u5b57\u7b26\uff0c\u5982\uff1a \u5176\u4e2dk\u662f\u5bc6\u94a5\uff08\u6bcf\u6b21\u52a0\u5bc6\u4f7f\u7528\u7684\u4f4d\u79fb\uff09\u3002\u4f7f\u7528\u8fd9\u4e2a\u516c\u5f0f\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u4e3a\u6570\u5b57\uff0c\u6211\u4eec\u9700\u8981\u518d\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u6bcd\u3002 \u89e3\u5bc6\u7684\u6570\u5b66\u63cf\u8ff0\u5982\u4e0b\uff1a","title":"\u51ef\u6492\u5bc6\u7801\u7684\u6570\u5b66\u63cf\u8ff0"},{"location":"ClassicalCrypto/caesarCipher/#_4","text":"lll","title":"\u51ef\u6492\u5bc6\u7801\u7684\u5bc6\u7801\u5206\u6790"},{"location":"ClassicalCrypto/caesarCipher/#_5","text":"\u6ce8\u610f \u8be5\u7a0b\u5e8f\u9700\u8981\u914d\u5408\u6587\u672c\u8868\u5f81\u4e2d\u7684ngram_score\u8bc4\u5206\u6a21\u5757\uff0c\u4ee5\u53caquadgrams\u5b57\u5178\u3002\u8bf7\u79fb\u6b65\u81f3 \u56db\u5143\u7ec4\u7edf\u8ba1 \u3002 ### ### Date:2018-08-24 ### Time:09:00 GMT ### Author:nianhua ### from ngram_score import * fitness = ngram_score ( quadgrams.txt ) alphabetb = ABCDEFGHIJKLMNOPQRSTUVWXYZ alphabets = abcdefghijklmnopqrstuvwxyz scoretmp = [] newliste = [] ciphertext = input ( \u8bf7\u8f93\u5165\u8981\u7834\u89e3\u7684\u5bc6\u7801: ) def caser ( i ): plaintext = for j in ciphertext : if 64 ord ( j ) 91 : plaintext += alphabetb [ alphabetb . find ( j ) - i - 1 ] elif 96 ord ( j ) 123 : plaintext += alphabets [ alphabets . find ( j ) - i - 1 ] else : plaintext += j return plaintext def main (): for i in range ( 26 ): scoretmp . append ([]) plaintext = caser ( i ) scoretmp [ i ] . append ( i ) scoretmp [ i ] . append ( plaintext ) scoretmp [ i ] . append ( fitness . score ( . join ( list ( filter ( str . isalpha , plaintext ))) . upper ())) for i in range ( 26 ): scorevi = - 99e9 goodvi = 0 for j in scoretmp : if j [ 2 ] scorevi : scorevi = j [ 2 ] goodvi = j [ 0 ] newliste . append ( scoretmp [ goodvi ][:]) scoretmp [ goodvi ][ 2 ] = - 99e9 print ( %2d : %4.2f : %s % ( newliste [ i ][ 0 ], newliste [ i ][ 2 ], newliste [ i ][ 1 ])) if __main__ == __name__ : main () \u4e3e\u4f8b \u8bf7\u4f7f\u7528\u7a0b\u5e8f\u7834\u89e3\u8fd9\u6bb5\u5bc6\u6587\uff1a Yvccf Nficu \u67e5\u770b\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\uff1a \u7a0b\u5e8f\u901a\u8fc7\u7206\u7834\u51ef\u6492\u5bc6\u7801\u7684\u5bc6\u94a5\uff0c\u5e76\u5bf9\u89e3\u5bc6\u51fa\u6765\u7684\u6587\u672c\u8fdb\u884c\u8bc4\u5206\uff0c\u6309\u7167\u8bc4\u5206\u9ad8\u4f4e\u8fdb\u884c\u6392\u5e8f\u3002","title":"\u51ef\u6492\u5bc6\u7801\u7684\u7a0b\u5e8f\u5b9e\u73b0"},{"location":"ClassicalCrypto/cryptoBar/","text":"\u5bc6\u7801\u68d2\u5bc6\u7801\u7b80\u4ecb \u5bc6\u7801\u68d2\u662f\u4e2a\u53ef\u4f7f\u7684\u4f20\u9012\u8baf\u606f\u5b57\u6bcd\u987a\u5e8f\u6539\u53d8\u7684\u5de5\u5177\uff0c\u7531\u4e00\u6761\u52a0\u5de5\u8fc7\u3001\u4e14\u6709\u5939\u5e26\u8baf\u606f\u7684\u76ae\u9769\u7ed5\u5728\u4e00\u4e2a\u6728\u68d2\u6240\u7ec4\u6210\u3002\u5728\u53e4\u5e0c\u814a\uff0c\u6587\u4e66\u8bb0\u8f7d\u7740\u65af\u5df4\u8fbe\u4eba\u7528\u6b64\u4e8e\u519b\u4e8b\u4e0a\u7684\u8baf\u606f\u4f20\u9012\u3002 \u4f8b\u9898 \u4f8b\u9898 \u5047\u8bbe\u67d0\u6728\u68d2\u53ef\u5199\u4e0b\u4e24\u4e2a\u5b57\u6bcd\u3002 \u8bf7\u52a0\u5bc6\u660e\u6587\uff1aHelp me I am under attack. \u5219\u52a0\u5bc6\u4e4b\u540e\u7684\u5bc6\u6587\uff1a HNEDLEPRMAETITAAMCUK \u5bc6\u7801\u68d2\u5bc6\u7801\u5176\u5b9e\u5c31\u662f\u4e00\u6839\u5e03\u6761\u7f20\u7ed5\u4e8e\u6728\u68d2\u667a\u5546\uff0c\u6a2a\u5411\u4e66\u5199\u660e\u6587\uff0c\u53d6\u4e0b\u5e03\u6761\uff0c\u5373\u4e3a\u52a0\u5bc6\u540e\u7684\u5bc6\u6587\u3002\u89e3\u5bc6\uff1a\u518d\u5c06\u5e03\u6761\u7f20\u7ed5\u4e8e\u68d2\u4e0a\uff0c\u6a2a\u5411\u8bfb\u53d6\u3002","title":"\u5bc6\u7801\u68d2\u5bc6\u7801"},{"location":"ClassicalCrypto/cryptoBar/#_1","text":"\u5bc6\u7801\u68d2\u662f\u4e2a\u53ef\u4f7f\u7684\u4f20\u9012\u8baf\u606f\u5b57\u6bcd\u987a\u5e8f\u6539\u53d8\u7684\u5de5\u5177\uff0c\u7531\u4e00\u6761\u52a0\u5de5\u8fc7\u3001\u4e14\u6709\u5939\u5e26\u8baf\u606f\u7684\u76ae\u9769\u7ed5\u5728\u4e00\u4e2a\u6728\u68d2\u6240\u7ec4\u6210\u3002\u5728\u53e4\u5e0c\u814a\uff0c\u6587\u4e66\u8bb0\u8f7d\u7740\u65af\u5df4\u8fbe\u4eba\u7528\u6b64\u4e8e\u519b\u4e8b\u4e0a\u7684\u8baf\u606f\u4f20\u9012\u3002","title":"\u5bc6\u7801\u68d2\u5bc6\u7801\u7b80\u4ecb"},{"location":"ClassicalCrypto/cryptoBar/#_2","text":"\u4f8b\u9898 \u5047\u8bbe\u67d0\u6728\u68d2\u53ef\u5199\u4e0b\u4e24\u4e2a\u5b57\u6bcd\u3002 \u8bf7\u52a0\u5bc6\u660e\u6587\uff1aHelp me I am under attack. \u5219\u52a0\u5bc6\u4e4b\u540e\u7684\u5bc6\u6587\uff1a HNEDLEPRMAETITAAMCUK \u5bc6\u7801\u68d2\u5bc6\u7801\u5176\u5b9e\u5c31\u662f\u4e00\u6839\u5e03\u6761\u7f20\u7ed5\u4e8e\u6728\u68d2\u667a\u5546\uff0c\u6a2a\u5411\u4e66\u5199\u660e\u6587\uff0c\u53d6\u4e0b\u5e03\u6761\uff0c\u5373\u4e3a\u52a0\u5bc6\u540e\u7684\u5bc6\u6587\u3002\u89e3\u5bc6\uff1a\u518d\u5c06\u5e03\u6761\u7f20\u7ed5\u4e8e\u68d2\u4e0a\uff0c\u6a2a\u5411\u8bfb\u53d6\u3002","title":"\u4f8b\u9898"},{"location":"ClassicalCrypto/frequencyAnalysis/","text":"\u9891\u7387\u5206\u6790\u7b80\u4ecb \u9891\u7387\u5206\u6790\u662f\u6307\u7814\u7a76\u5b57\u6bcd\u6216\u8005\u5b57\u6bcd\u7ec4\u5408\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u9891\u7387\uff0c\u4f7f\u7528\u9891\u7387\u5206\u6790\u53ef\u4ee5\u7834\u89e3\u90e8\u5206\u53e4\u5178\u5bc6\u7801\u3002\u9891\u7387\u5206\u6790\u57fa\u4e8e\u5982\u4e0b\u539f\u7406\uff1a\u5728\u4efb\u4f55\u4e00\u79cd\u4e66\u9762\u8bed\u8a00\u4e2d\uff0c\u4e0d\u540c\u7684\u5b57\u6bcd\u6216\u5b57\u6bcd\u7ec4\u5408\u51fa\u73b0\u7684\u9891\u7387\u5404\u4e0d\u76f8\u540c\u3002\u800c\u4e14\uff0c\u5bf9\u4e8e\u4ee5\u8fd9\u79cd\u8bed\u8a00\u4e66\u5199\u7684\u4efb\u610f\u4e00\u6bb5\u6587\u672c\uff0c\u90fd\u5177\u6709\u5927\u81f4\u76f8\u540c\u7684\u7279\u5f81\u5b57\u6bcd\u5206\u5e03\u3002\u6bd4\u5982\uff0c\u5728\u82f1\u8bed\u4e2d\uff0c\u5b57\u6bcdE\u51fa\u73b0\u7684\u9891\u7387\u5f88\u9ad8\uff0c\u800cX\u5219\u51fa\u73b0\u5f97\u8f83\u5c11\u3002 \u82f1\u8bed\u4e2d\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u768412\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u7b80\u8bb0\u4e3a\u201cETAOIN SHRDLU\u201d\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u4e3a\u82f1\u6587\u7684\u5b57\u6bcd\u6982\u7387\u5206\u5e03\u3002 \u9891\u7387\u5206\u6790\u4e3e\u4f8b \u6211\u4eec\u4ee5\u51ef\u6492\u52a0\u5bc6\u6765\u4e3e\u4f8b\uff0c\u4f7f\u7528\u9891\u7387\u5206\u6790\u6765\u7834\u89e3\u51ef\u6492\u5bc6\u7801\uff1a \u4f8b\u9898 Eve\u622a\u83b7\u4e86Alice\u548cBob\u7684\u901a\u8baf\uff0c\u8fd9\u6bb5\u5bc6\u6587\u4f7f\u7528\u4e86\u51ef\u6492\u3002 if mjlft ufmmjoh mjft pof ebz if xbout up nblf gvo pg uif gbsnfst tp if tipvut xpmg xpmg xpmg jt dpnjoh uif ljoe gbsnfst bsf xpsljoh jo uif gjfme uifz ifbs uif tipvu boe ivssz up ifmq uif cpz uifsf jto u b x pmg j n kpljoh uif gbsfst bsf bohsz boe hp cbdl up uifjs gjfme bgufs b xijmf uif cjz tipvut bhbjo xpmg xpmg xpmg jt dpnjoh boe uif gbsnfst dpnf boe bsf difbufe bhbjo uif cpz mbvhit boe mbvhit uifz tbz zpv ufmm mjft xf xjmm opu cfmjfwf zpv mbufs b xpmg sfbmmz dpnft uif cpz jt wfsz tdbsfe xpmg xpmg xpmg jt dp njoh uif cpz tipvut boe tipvut ifmq ifmq \u6211\u4eec\u9996\u5148\u4f7f\u7528\u9891\u7387\u5206\u6790\uff0c\u5bf9\u5bc6\u6587\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\u8fdb\u884c\u7edf\u8ba1\uff1a \u63a5\u4e0b\u6765\u5bf9\u7167\u4e00\u4e0b\u6b63\u5e38\u7684\u82f1\u6587\u9891\u7387\uff0c\u5982\u56fe\uff1a \u901a\u8fc7\u5206\u6790\u9891\u7387\u56fe\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u5982\u679c\u5c06\u52a0\u5bc6\u540e\u7684\u6240\u6709\u5b57\u6bcd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\u5373\u53ef\u5f97\u5230\u660e\u6587\uff0c\u4f7f\u7528\u5bc6\u94a51\u5bf9\u51ef\u6492\u52a0\u5bc6\u8fdb\u884c\u89e3\u5bc6\uff1a \u6ce8\u610f \u5173\u4e8e\u52a0\u5bc6\u7b97\u6cd5\u7684\u95ee\u9898\uff0c\u8bf7\u79fb\u6b65\u81f3\u51ef\u6492\u52a0\u5bc6 \u6269\u5c55 \u9664\u4e86\u5206\u6790\u5355\u4e00\u5b57\u6bcd\u7684\u9891\u7387\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5206\u6790\u53cc\u5b57\u6bcd\u7684\u9891\u7387\u4ee5\u53ca\u4e09\u5b57\u6bcd\u7684\u9891\u7387","title":"\u9891\u7387\u5206\u6790"},{"location":"ClassicalCrypto/frequencyAnalysis/#_1","text":"\u9891\u7387\u5206\u6790\u662f\u6307\u7814\u7a76\u5b57\u6bcd\u6216\u8005\u5b57\u6bcd\u7ec4\u5408\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u9891\u7387\uff0c\u4f7f\u7528\u9891\u7387\u5206\u6790\u53ef\u4ee5\u7834\u89e3\u90e8\u5206\u53e4\u5178\u5bc6\u7801\u3002\u9891\u7387\u5206\u6790\u57fa\u4e8e\u5982\u4e0b\u539f\u7406\uff1a\u5728\u4efb\u4f55\u4e00\u79cd\u4e66\u9762\u8bed\u8a00\u4e2d\uff0c\u4e0d\u540c\u7684\u5b57\u6bcd\u6216\u5b57\u6bcd\u7ec4\u5408\u51fa\u73b0\u7684\u9891\u7387\u5404\u4e0d\u76f8\u540c\u3002\u800c\u4e14\uff0c\u5bf9\u4e8e\u4ee5\u8fd9\u79cd\u8bed\u8a00\u4e66\u5199\u7684\u4efb\u610f\u4e00\u6bb5\u6587\u672c\uff0c\u90fd\u5177\u6709\u5927\u81f4\u76f8\u540c\u7684\u7279\u5f81\u5b57\u6bcd\u5206\u5e03\u3002\u6bd4\u5982\uff0c\u5728\u82f1\u8bed\u4e2d\uff0c\u5b57\u6bcdE\u51fa\u73b0\u7684\u9891\u7387\u5f88\u9ad8\uff0c\u800cX\u5219\u51fa\u73b0\u5f97\u8f83\u5c11\u3002 \u82f1\u8bed\u4e2d\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u768412\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u7b80\u8bb0\u4e3a\u201cETAOIN SHRDLU\u201d\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u4e3a\u82f1\u6587\u7684\u5b57\u6bcd\u6982\u7387\u5206\u5e03\u3002","title":"\u9891\u7387\u5206\u6790\u7b80\u4ecb"},{"location":"ClassicalCrypto/frequencyAnalysis/#_2","text":"\u6211\u4eec\u4ee5\u51ef\u6492\u52a0\u5bc6\u6765\u4e3e\u4f8b\uff0c\u4f7f\u7528\u9891\u7387\u5206\u6790\u6765\u7834\u89e3\u51ef\u6492\u5bc6\u7801\uff1a \u4f8b\u9898 Eve\u622a\u83b7\u4e86Alice\u548cBob\u7684\u901a\u8baf\uff0c\u8fd9\u6bb5\u5bc6\u6587\u4f7f\u7528\u4e86\u51ef\u6492\u3002 if mjlft ufmmjoh mjft pof ebz if xbout up nblf gvo pg uif gbsnfst tp if tipvut xpmg xpmg xpmg jt dpnjoh uif ljoe gbsnfst bsf xpsljoh jo uif gjfme uifz ifbs uif tipvu boe ivssz up ifmq uif cpz uifsf jto u b x pmg j n kpljoh uif gbsfst bsf bohsz boe hp cbdl up uifjs gjfme bgufs b xijmf uif cjz tipvut bhbjo xpmg xpmg xpmg jt dpnjoh boe uif gbsnfst dpnf boe bsf difbufe bhbjo uif cpz mbvhit boe mbvhit uifz tbz zpv ufmm mjft xf xjmm opu cfmjfwf zpv mbufs b xpmg sfbmmz dpnft uif cpz jt wfsz tdbsfe xpmg xpmg xpmg jt dp njoh uif cpz tipvut boe tipvut ifmq ifmq \u6211\u4eec\u9996\u5148\u4f7f\u7528\u9891\u7387\u5206\u6790\uff0c\u5bf9\u5bc6\u6587\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\u8fdb\u884c\u7edf\u8ba1\uff1a \u63a5\u4e0b\u6765\u5bf9\u7167\u4e00\u4e0b\u6b63\u5e38\u7684\u82f1\u6587\u9891\u7387\uff0c\u5982\u56fe\uff1a \u901a\u8fc7\u5206\u6790\u9891\u7387\u56fe\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u5982\u679c\u5c06\u52a0\u5bc6\u540e\u7684\u6240\u6709\u5b57\u6bcd\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\u5373\u53ef\u5f97\u5230\u660e\u6587\uff0c\u4f7f\u7528\u5bc6\u94a51\u5bf9\u51ef\u6492\u52a0\u5bc6\u8fdb\u884c\u89e3\u5bc6\uff1a \u6ce8\u610f \u5173\u4e8e\u52a0\u5bc6\u7b97\u6cd5\u7684\u95ee\u9898\uff0c\u8bf7\u79fb\u6b65\u81f3\u51ef\u6492\u52a0\u5bc6 \u6269\u5c55 \u9664\u4e86\u5206\u6790\u5355\u4e00\u5b57\u6bcd\u7684\u9891\u7387\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5206\u6790\u53cc\u5b57\u6bcd\u7684\u9891\u7387\u4ee5\u53ca\u4e09\u5b57\u6bcd\u7684\u9891\u7387","title":"\u9891\u7387\u5206\u6790\u4e3e\u4f8b"},{"location":"ClassicalCrypto/introduction/","text":"\u6ce8\u610f \u867d\u7136\u53e4\u5178\u5bc6\u7801\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\u5df2\u7ecf\u5f88\u5c11\u88ab\u4f7f\u7528\uff0c\u4f46\u53e4\u5178\u5bc6\u7801\u5b66\u7684\u5bc6\u7801\u5206\u6790\u65b9\u6cd5\u503c\u5f97\u6211\u4eec\u501f\u9274\u5b66\u4e60 \u53e4\u5178\u5bc6\u7801\u5b66\u662f\u5bc6\u7801\u5b66\u4e2d\u7684\u4e00\u4e2a\u7c7b\u578b\uff0c\u5176\u5927\u90e8\u5206\u52a0\u5bc6\u65b9\u5f0f\u90fd\u662f\u5229\u7528\u7f6e\u6362\u5f0f\u5bc6\u7801\u6216\u4ee3\u6362\u5f0f\u5bc6\u7801\uff0c\u6709\u65f6\u5219\u662f\u4e24\u8005\u7684\u6df7\u5408\u3002 \u53e4\u5178\u5bc6\u7801\u5728\u5386\u53f2\u4e2d\u7ecf\u5e38\u4f7f\u7528\uff0c\u4f46\u73b0\u4ee3\u5df2\u7ecf\u5f88\u5c11\u4f7f\u7528\uff0c\u5927\u90e8\u5206\u7684\u5df2\u7ecf\u4e0d\u518d\u5b89\u5168\u4e86\u3002\u4e00\u822c\u800c\u8a00\uff0c\u53e4\u5178\u5bc6\u7801\u662f\u57fa\u4e8e\u4e00\u4e2a\u62fc\u97f3\u5b57\u6bcd\uff08\u50cf\u662f A-Z\uff09\u3001\u52a8\u624b\u64cd\u4f5c\u6216\u662f\u7b80\u5355\u7684\u8bbe\u5907\u3002 \u7ecf\u5178\u5bc6\u7801\u901a\u5e38\u5f88\u5bb9\u6613\u88ab\u7834\u89e3\u3002\u8bb8\u591a\u7ecf\u5178\u5bc6\u7801\u53ef\u5355\u5355\u7ecf\u7531\u5bc6\u6587\u800c\u7834\u89e3\uff0c\u6240\u4ee5\u5b83\u4eec\u5bb9\u6613\u53d7\u5230\u552f\u5bc6\u6587\u653b\u51fb\u3002 \u6709\u4e9b\u7ecf\u5178\u5bc6\u7801\uff08\u50cf\u662f\u51ef\u6492\u5bc6\u7801\uff09\u7684\u5bc6\u94a5\u4e2a\u6570\u6709\u9650\uff0c\u6240\u4ee5\u8fd9\u7c7b\u5bc6\u7801\u53ef\u4ee5\u66b4\u529b\u7834\u89e3\u5c1d\u8bd5\u6240\u6709\u7684\u5bc6\u94a5\u3002 \u4ee3\u6362\u5f0f\u5bc6\u7801\u6709\u6bd4\u8f83\u5927\u7684\u5bc6\u94a5\u6570\uff0c\u4f46\u662f\u5bb9\u6613\u88ab\u9891\u7387\u5206\u6790\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5bc6\u7801\u5b57\u6bcd\u5404\u4ee3\u8868\u4e86\u4e00\u4e2a\u660e\u6587\u5b57\u6bcd\u3002 \u591a\u5b57\u6bcd\u4ee3\u6362\u5f0f\u5bc6\u7801\uff08\u50cf\u662f\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\uff09\u4f7f\u7528\u591a\u4e2a\u66ff\u6362\u9632\u6b62\u4e86\u7b80\u5355\u7684\u9891\u7387\u5206\u6790\uff0c\u7136\u800c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66f4\u5148\u8fdb\u7684\u5361\u897f\u65af\u57fa\u6d4b\u8bd5\u6765\u7834\u89e3\u8fd9\u7c7b\u5bc6\u7801\u3002","title":"\u53e4\u5178\u5bc6\u7801\u5b66\u6d45\u6790"},{"location":"ClassicalCrypto/othercrypto/","text":"\u5176\u4ed6\u5bc6\u7801 \u4f8b\u9898 \u4f8b\u9898 \u5176\u4ed6\u5bc6\u7801","title":"\u5176\u4ed6\u5bc6\u7801"},{"location":"ClassicalCrypto/othercrypto/#_1","text":"","title":"\u5176\u4ed6\u5bc6\u7801"},{"location":"ClassicalCrypto/othercrypto/#_2","text":"\u4f8b\u9898 \u5176\u4ed6\u5bc6\u7801","title":"\u4f8b\u9898"},{"location":"ClassicalCrypto/routecipher/","text":"\u66f2\u8def\u5bc6\u7801\u7b80\u4ecb \u66f2\u8def\u5bc6\u7801\u662f\u4e00\u79cd\u7f6e\u6362\u5bc6\u7801\uff0c\u5176\u4e2d\u5bc6\u94a5\u662f\u4ece\u660e\u6587\u521b\u5efa\u7684\u5757\u4e2d\u8bfb\u53d6\u5bc6\u6587\u65f6\u8981\u9075\u5faa\u7684\u8def\u5f84,\u8be5\u5bc6\u94a5\u9700\u53cc\u65b9\u4e8b\u5148\u7ea6\u5b9a\u597d\uff08\u66f2\u8def\u8def\u5f84\uff09\u3002 \u4f8b\u9898 \u4f8b\u9898 \u660e\u6587\uff1aThe quick brown fox jumps over the lazy dog \u586b\u51655\u884c7\u5217\u8868\u4e2d\uff08\u4e8b\u5148\u7ea6\u5b9a\uff09 \u9996\u5148\uff0c\u6211\u4eec\u5728\u660e\u6587\u7684\u5408\u7406\u5927\u5c0f\u7684\u5757\u4e2d\u5199\u660e\u6587\u3002\u952e\u7684\u4e00\u90e8\u5206\u662f\u6b64\u7f51\u683c\u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u9700\u8981\u5728\u5f00\u59cb\u4e4b\u524d\u51b3\u5b9a\u7f51\u683c\u4e2d\u7684\u591a\u4e2a\u5217\u6216\u884c\u6570\uff085\u884c7\u5217\uff09\u3002 \u5c06\u660e\u6587\u5199\u5165\u7f51\u683c\u540e\uff0c\u5373\u53ef\u4f7f\u7528\u5df2\u5206\u914d\u7684\u8def\u5f84\u8bfb\u53d6\u5bc6\u6587\u3002 \u5219\u52a0\u5bc6\u4e4b\u540e\u7684\u5bc6\u6587\uff1a gesfc inpho dtmwu qoury zejre hbxva lookT \u66f2\u8def\u5bc6\u7801\u975e\u5e38\u6613\u4e8e\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u975e\u5e38\u5feb\u901f\u5730\u6df7\u6dc6\u6d88\u606f\u3002\u4f46\u662f\u5b83\u7684\u5b89\u5168\u6027\u53d6\u51b3\u4e8e\u4f60\u9009\u62e9\u7684\u8def\u7ebf\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u5728\u5bc6\u6587\u4e2d\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u663e\u793a\u5927\u5757\u7684\u660e\u6587\uff08\u6216\u4ec5\u4ec5\u662f\u7b80\u5355\u5730\u53cd\u8f6c\u660e\u6587\uff09\uff0c\u4ed4\u7ec6\u9009\u62e9\u8def\u7ebf\u5f88\u91cd\u8981\u3002 \u4f46\u662f\uff0c\u5bf9\u4e8e\u9002\u5f53\u5197\u957f\u7684\u6d88\u606f\uff0c\u53ef\u80fd\u6709\u65e0\u9650\u591a\u4e2a\u4e0d\u540c\u7684\u8def\u7531\u53ef\u4ee5\u901a\u8fc7\u7f51\u683c\u3002\u5b83\u4ec5\u53d7\u5230\u60f3\u8c61\u529b\u548c\u8def\u7ebf\u901a\u4fe1\u7684\u4fbf\u5229\u6027\u7684\u9650\u5236\u3002 \u66f2\u8def\u5bc6\u7801\u7684\u5386\u53f2\u7528\u9014\u662f\u8054\u76df\u90e8\u961f\u5728\u7f8e\u56fd\u5185\u6218\u671f\u95f4\u4f7f\u7528\u7684\u3002\u5b83\u4e0d\u662f\u901a\u8fc7\u7ed9\u5b9a\u8def\u7ebf\u8f6c\u6362\u5b57\u6bcd\uff0c\u800c\u662f\u79fb\u52a8\u6574\u4e2a\u5355\u8bcd\u3002\u4e00\u4e9b\u91cd\u8981\u7684\u8bcd\u8bed\u5e76\u6ca1\u6709\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u53d7\u5230\u4fdd\u62a4\uff0c\u56e0\u6b64\u5b83\u4eec\u9996\u5148\u4f7f\u7528\u4ee3\u7801\u5b57\u8fdb\u884c\u7f16\u7801\u3002\u6709\u65f6\uff0c\u5bc6\u7801\u52a0\u5bc6\u5458\u751a\u81f3\u4f1a\u5728\u5bc6\u6587\u4e2d\u6dfb\u52a0\u5b8c\u6574\u7684\u7a7a\u5b57\uff0c\u4f7f\u5f97\u4fe1\u606f\u53d8\u5f97\u5e7d\u9ed8\u3002","title":"\u66f2\u8def\u5bc6\u7801"},{"location":"ClassicalCrypto/routecipher/#_1","text":"\u66f2\u8def\u5bc6\u7801\u662f\u4e00\u79cd\u7f6e\u6362\u5bc6\u7801\uff0c\u5176\u4e2d\u5bc6\u94a5\u662f\u4ece\u660e\u6587\u521b\u5efa\u7684\u5757\u4e2d\u8bfb\u53d6\u5bc6\u6587\u65f6\u8981\u9075\u5faa\u7684\u8def\u5f84,\u8be5\u5bc6\u94a5\u9700\u53cc\u65b9\u4e8b\u5148\u7ea6\u5b9a\u597d\uff08\u66f2\u8def\u8def\u5f84\uff09\u3002","title":"\u66f2\u8def\u5bc6\u7801\u7b80\u4ecb"},{"location":"ClassicalCrypto/routecipher/#_2","text":"\u4f8b\u9898 \u660e\u6587\uff1aThe quick brown fox jumps over the lazy dog \u586b\u51655\u884c7\u5217\u8868\u4e2d\uff08\u4e8b\u5148\u7ea6\u5b9a\uff09 \u9996\u5148\uff0c\u6211\u4eec\u5728\u660e\u6587\u7684\u5408\u7406\u5927\u5c0f\u7684\u5757\u4e2d\u5199\u660e\u6587\u3002\u952e\u7684\u4e00\u90e8\u5206\u662f\u6b64\u7f51\u683c\u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u9700\u8981\u5728\u5f00\u59cb\u4e4b\u524d\u51b3\u5b9a\u7f51\u683c\u4e2d\u7684\u591a\u4e2a\u5217\u6216\u884c\u6570\uff085\u884c7\u5217\uff09\u3002 \u5c06\u660e\u6587\u5199\u5165\u7f51\u683c\u540e\uff0c\u5373\u53ef\u4f7f\u7528\u5df2\u5206\u914d\u7684\u8def\u5f84\u8bfb\u53d6\u5bc6\u6587\u3002 \u5219\u52a0\u5bc6\u4e4b\u540e\u7684\u5bc6\u6587\uff1a gesfc inpho dtmwu qoury zejre hbxva lookT \u66f2\u8def\u5bc6\u7801\u975e\u5e38\u6613\u4e8e\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u975e\u5e38\u5feb\u901f\u5730\u6df7\u6dc6\u6d88\u606f\u3002\u4f46\u662f\u5b83\u7684\u5b89\u5168\u6027\u53d6\u51b3\u4e8e\u4f60\u9009\u62e9\u7684\u8def\u7ebf\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u5728\u5bc6\u6587\u4e2d\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u663e\u793a\u5927\u5757\u7684\u660e\u6587\uff08\u6216\u4ec5\u4ec5\u662f\u7b80\u5355\u5730\u53cd\u8f6c\u660e\u6587\uff09\uff0c\u4ed4\u7ec6\u9009\u62e9\u8def\u7ebf\u5f88\u91cd\u8981\u3002 \u4f46\u662f\uff0c\u5bf9\u4e8e\u9002\u5f53\u5197\u957f\u7684\u6d88\u606f\uff0c\u53ef\u80fd\u6709\u65e0\u9650\u591a\u4e2a\u4e0d\u540c\u7684\u8def\u7531\u53ef\u4ee5\u901a\u8fc7\u7f51\u683c\u3002\u5b83\u4ec5\u53d7\u5230\u60f3\u8c61\u529b\u548c\u8def\u7ebf\u901a\u4fe1\u7684\u4fbf\u5229\u6027\u7684\u9650\u5236\u3002 \u66f2\u8def\u5bc6\u7801\u7684\u5386\u53f2\u7528\u9014\u662f\u8054\u76df\u90e8\u961f\u5728\u7f8e\u56fd\u5185\u6218\u671f\u95f4\u4f7f\u7528\u7684\u3002\u5b83\u4e0d\u662f\u901a\u8fc7\u7ed9\u5b9a\u8def\u7ebf\u8f6c\u6362\u5b57\u6bcd\uff0c\u800c\u662f\u79fb\u52a8\u6574\u4e2a\u5355\u8bcd\u3002\u4e00\u4e9b\u91cd\u8981\u7684\u8bcd\u8bed\u5e76\u6ca1\u6709\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u53d7\u5230\u4fdd\u62a4\uff0c\u56e0\u6b64\u5b83\u4eec\u9996\u5148\u4f7f\u7528\u4ee3\u7801\u5b57\u8fdb\u884c\u7f16\u7801\u3002\u6709\u65f6\uff0c\u5bc6\u7801\u52a0\u5bc6\u5458\u751a\u81f3\u4f1a\u5728\u5bc6\u6587\u4e2d\u6dfb\u52a0\u5b8c\u6574\u7684\u7a7a\u5b57\uff0c\u4f7f\u5f97\u4fe1\u606f\u53d8\u5f97\u5e7d\u9ed8\u3002","title":"\u4f8b\u9898"},{"location":"ClassicalCrypto/substitution/","text":"\u66ff\u6362\u5bc6\u7801\u53c8\u540d\u4ee3\u6362\u5f0f\u5bc6\u7801\uff0c\u662f\u5bc6\u7801\u5b66\u4e2d\u6309\u89c4\u5f8b\u5c06\u6587\u5b57\u52a0\u5bc6\u7684\u4e00\u79cd\u65b9\u5f0f\u3002 \u66ff\u6362\u5bc6\u7801\u662f\u6307\u5148\u5efa\u7acb\u4e00\u4e2a\u66ff\u6362\u8868\uff0c\u52a0\u5bc6\u65f6\u5c06\u9700\u8981\u52a0\u5bc6\u7684\u660e\u6587\u4f9d\u6b21\u901a\u8fc7\u67e5\u8868\u66ff\u6362\u4e3a\u76f8\u5e94\u7684\u5b57\u7b26\uff0c\u660e\u6587\u5b57\u7b26\u88ab\u9010\u4e2a\u66ff\u6362\u540e\uff0c\u751f\u6210\u65e0\u4efb\u4f55\u610f\u4e49\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u5bc6\u6587\uff0c\u66ff\u6362\u5bc6\u7801\u7684\u5bc6\u94a5\u5c31\u662f\u5176\u66ff\u6362\u8868\u3002 \u6839\u636e\u5bc6\u7801\u52a0/\u89e3\u5bc6\u65f6\u4f7f\u7528\u7684\u66ff\u6362\u8868\u7684\u591a\u5c11\uff0c\u66ff\u6362\u5bc6\u7801\u53c8\u53ef\u5206\u4e3a\u5355\u8868\u66ff\u6362\u5bc6\u7801\u548c\u591a\u8868\u66ff\u6362\u5bc6\u7801\u3002 \u6bd4\u5982\u732a\u5708\u5bc6\u7801\u5c31\u662f\u5e38\u89c1\u7684\u66ff\u6362\u5bc6\u7801\uff0c\u5176\u5c06\u5b57\u6bcd\u8f6c\u6362\u6210\u7531\u683c\u5b50\u7ec4\u6210\u7684\u5bc6\u6587\u3002 \u518d\u6bd4\u5982\u590f\u6d1b\u514b\u00b7\u798f\u5c14\u6469\u65af\u4e2d\u7684\u8df3\u821e\u5c0f\u4eba\uff0c\u5176\u7528\u8df3\u821e\u5c0f\u4eba\u66ff\u6362\u82f1\u8bed\uff0c\u798f\u5c14\u6469\u65af\u6700\u540e\u6839\u636e\u5206\u6790\u5b57\u6bcd\u9891\u7387\u6765\u7834\u89e3\u5bc6\u7801\u3002 \u4e3e\u4f8b \u6211\u4eec\u6765\u770b\u4e00\u79cd\u7b80\u5355\u7684\u66ff\u6362\u5bc6\u7801 ROT13 ROT13\u7684\u539f\u7406\u662f\uff1a A\u6362\u6210N\u3001B\u6362\u6210O\u3001\u4f9d\u6b64\u7c7b\u63a8\u5230M\u6362\u6210Z\uff0c\u7136\u540e\u5e8f\u5217\u53cd\u8f6c\uff1aN\u6362\u6210A\u3001O\u6362\u6210B\u3001\u6700\u540eZ\u6362\u6210M\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u52a0\u5bc6'HELLO'\u7684\u65f6\u5019\uff0cH\u88ab\u66ff\u6362\u6210U\u3001E\u88ab\u66ff\u6362\u6210R... \u66ff\u6362\u5bc6\u7801\u6700\u8457\u540d\u7684\u4f8b\u5b50\u6709:\u51ef\u6492\u5bc6\u7801\u3001\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u3001\u7b80\u5355\u66ff\u6362\u5bc6\u7801\u7b49\u7b49... \u8bcd\u9891\u5206\u6790 \u9488\u5bf9\u66ff\u6362\u5bc6\u7801\u6700\u6709\u6548\u7684\u653b\u51fb\u65b9\u5f0f\u662f\u8bcd\u9891\u5206\u6790\u3002","title":"\u66ff\u6362\u5bc6\u7801"},{"location":"ClassicalCrypto/tarnscrypto/","text":"\u8f6c\u7f6e\u5bc6\u7801\u7b80\u4ecb \u4f8b\u9898 \u4f8b\u9898 \u8bf7\u5c06Hello World \u5b57\u6bcd\u5411\u53f3\u79fb\u52a8\u4e24\u4f4d loHel ldwor","title":"\u8f6c\u7f6e\u5bc6\u7801"},{"location":"ClassicalCrypto/tarnscrypto/#_1","text":"","title":"\u8f6c\u7f6e\u5bc6\u7801\u7b80\u4ecb"},{"location":"ClassicalCrypto/tarnscrypto/#_2","text":"\u4f8b\u9898 \u8bf7\u5c06Hello World \u5b57\u6bcd\u5411\u53f3\u79fb\u52a8\u4e24\u4f4d loHel ldwor","title":"\u4f8b\u9898"},{"location":"ClassicalCrypto/transposition/","text":"\u7f6e\u6362\u5bc6\u7801\u53c8\u79f0\u6362\u4f4d\u5bc6\u7801\uff0c\u662f\u6839\u636e\u4e00\u5b9a\u7684\u89c4\u5219\u91cd\u65b0\u6392\u5217\u660e\u6587\uff0c\u4ee5\u4fbf\u6253\u7834\u660e\u6587\u7684\u7ed3\u6784\u7279\u6027\u3002 \u7f6e\u6362\u5bc6\u7801\u7684\u7279\u70b9\u662f \u4fdd\u6301\u660e\u6587\u7684\u6240\u6709\u5b57\u7b26\u4e0d\u53d8 \uff0c\u53ea\u662f\u5229\u7528\u7f6e\u6362\u6253\u4e71\u4e86\u660e\u6587\u5b57\u7b26\u7684 \u4f4d\u7f6e\u548c\u6b21\u5e8f \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6539\u53d8\u4e86\u660e\u6587\u7684\u7ed3\u6784\uff0c\u4e0d\u6539\u53d8\u660e\u6587\u7684\u5185\u5bb9\u3002 \u4e3e\u4f8b \u6211\u4eec\u6765\u770b\u4e00\u79cd\u7b80\u5355\u7684\u7f6e\u6362\u5bc6\u7801 \u5b57\u6bcd\u53f3\u79fb Hello world ----- oHell dworl \u52a0\u5bc6 \u53ef\u4ee5\u770b\u5230\u6211\u4eec\u5c06\u6bcf\u4e2a\u5355\u8bcd\u4e2d\u7684\u5b57\u6bcd\u90fd\u5411\u53f3\u79fb\u52a8\u4e86\u4e00\u4f4d\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u6539\u53d8\u660e\u6587\u7684\u5185\u5bb9\uff0c\u53ea\u662f\u6539\u53d8\u4e86\u660e\u6587\u7684\u7ed3\u6784\u3002","title":"\u7f6e\u6362\u5bc6\u7801"},{"location":"EncodeDecode/URL/","text":"URL\u7f16\u7801 \u7b80\u4ecb url\u7f16\u7801\u89e3\u7801,\u53c8\u53eb\u767e\u5206\u53f7\u7f16\u7801\uff0c\u662f\u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d(URL)\u7f16\u7801\u65b9\u5f0f\u3002URL\u5730\u5740\uff08\u5e38\u8bf4\u7f51\u5740\uff09\u89c4\u5b9a\u4e86\u5e38\u7528\u5730\u6570\u5b57\uff0c\u5b57\u6bcd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u53e6\u5916\u4e00\u6279\u4f5c\u4e3a\u7279\u6b8a\u7528\u6237\u5b57\u7b26\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\uff08/,:@\u7b49\uff09\uff0c\u5269\u4e0b\u7684\u5176\u5b83\u6240\u6709\u5b57\u7b26\u5fc5\u987b\u901a\u8fc7%xx\u7f16\u7801\u5904\u7406\u3002 \u73b0\u5728\u5df2\u7ecf\u6210\u4e3a\u4e00\u79cd\u89c4\u8303\u4e86\uff0c\u57fa\u672c\u6240\u6709\u7a0b\u5e8f\u8bed\u8a00\u90fd\u6709\u8fd9\u79cd\u7f16\u7801\uff0c\u5982js\uff1a\u6709encodeURI\u3001encodeURIComponent\uff0cPHP\u6709 urlencode\u3001urldecode\u7b49\u3002\u7f16\u7801\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u5728\u8be5\u5b57\u8282ascii\u7801\u7684\u768416\u8fdb\u5236\u5b57\u7b26\u524d\u9762\u52a0%. \u5982 \u7a7a\u683c\u5b57\u7b26\uff0cascii\u7801\u662f32\uff0c\u5bf9\u5e9416\u8fdb\u5236\u662f'20'\uff0c\u90a3\u4e48urlencode\u7f16\u7801\u7ed3\u679c\u662f:%20 \u5728\u7ebf url \u7f16\u7801\u89e3\u7801\u3002","title":"URL\u7f16\u7801"},{"location":"EncodeDecode/URL/#url","text":"","title":"URL\u7f16\u7801"},{"location":"EncodeDecode/URL/#_1","text":"url\u7f16\u7801\u89e3\u7801,\u53c8\u53eb\u767e\u5206\u53f7\u7f16\u7801\uff0c\u662f\u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d(URL)\u7f16\u7801\u65b9\u5f0f\u3002URL\u5730\u5740\uff08\u5e38\u8bf4\u7f51\u5740\uff09\u89c4\u5b9a\u4e86\u5e38\u7528\u5730\u6570\u5b57\uff0c\u5b57\u6bcd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u53e6\u5916\u4e00\u6279\u4f5c\u4e3a\u7279\u6b8a\u7528\u6237\u5b57\u7b26\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\uff08/,:@\u7b49\uff09\uff0c\u5269\u4e0b\u7684\u5176\u5b83\u6240\u6709\u5b57\u7b26\u5fc5\u987b\u901a\u8fc7%xx\u7f16\u7801\u5904\u7406\u3002 \u73b0\u5728\u5df2\u7ecf\u6210\u4e3a\u4e00\u79cd\u89c4\u8303\u4e86\uff0c\u57fa\u672c\u6240\u6709\u7a0b\u5e8f\u8bed\u8a00\u90fd\u6709\u8fd9\u79cd\u7f16\u7801\uff0c\u5982js\uff1a\u6709encodeURI\u3001encodeURIComponent\uff0cPHP\u6709 urlencode\u3001urldecode\u7b49\u3002\u7f16\u7801\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u5728\u8be5\u5b57\u8282ascii\u7801\u7684\u768416\u8fdb\u5236\u5b57\u7b26\u524d\u9762\u52a0%. \u5982 \u7a7a\u683c\u5b57\u7b26\uff0cascii\u7801\u662f32\uff0c\u5bf9\u5e9416\u8fdb\u5236\u662f'20'\uff0c\u90a3\u4e48urlencode\u7f16\u7801\u7ed3\u679c\u662f:%20 \u5728\u7ebf url \u7f16\u7801\u89e3\u7801\u3002","title":"\u7b80\u4ecb"},{"location":"EncodeDecode/UUencode/","text":"\u7b80\u4ecb UUencode\u662f\u4e00\u79cd\u4e8c\u8fdb\u5236\u5230\u6587\u5b57\u7684\u7f16\u7801\uff0c\u6700\u65e9\u5728unix \u90ae\u4ef6\u7cfb\u7edf\u4e2d\u4f7f\u7528\uff0c\u5168\u79f0\uff1aUnix-to-Unix encoding\uff0cUUencode\u5c06\u8f93\u5165\u6587\u672c\u4ee5\u6bcf\u4e09\u4e2a\u5b57\u8282\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u7801\uff0c\u5982\u679c\u6700\u540e\u5269\u4e0b\u7684\u8d44\u6599\u5c11\u4e8e\u4e09\u4e2a\u5b57\u8282\uff0c\u4e0d\u591f\u7684\u90e8\u4efd\u7528\u96f6\u8865\u9f50\u3002\u4e09\u4e2a\u5b57\u8282\u5171\u670924\u4e2aBit\uff0c\u4ee56-bit\u4e3a\u5355\u4f4d\u5206\u4e3a4\u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u4ee5\u5341\u8fdb\u5236\u6765\u8868\u793a\u6240\u51fa\u73b0\u7684\u5b57\u8282\u7684\u6570\u503c\u3002\u8fd9\u4e2a\u6570\u503c\u53ea\u4f1a\u843d\u57280\u523063\u4e4b\u95f4\u3002\u7136\u540e\u5c06\u6bcf\u4e2a\u6570\u52a0\u4e0a32\uff0c\u6240\u4ea7\u751f\u7684\u7ed3\u679c\u521a\u597d\u843d\u5728ASCII\u5b57\u7b26\u96c6\u4e2d\u53ef\u6253\u5370\u5b57\u7b26\uff0832-\u7a7a\u767d\u202695-\u5e95\u7ebf\uff09\u7684\u8303\u56f4\u4e4b\u4e2d\u3002 \u6269\u5c55 \u5b83\u4e0ebase64\u53ca\u5176\u76f8\u4f3c\uff0c\u4f46\u662fUUencode\u4e0d\u7528\u5199\u6620\u5c04\u8868\uff0c\u662f\u901a\u8fc7\u52a032\u8f6c\u6362\u5230\u53ef\u6253\u5370\u5b57\u7b26\u8303\u56f4\u4e2d\u3002\u6bd4\u8d77base64\u6765\uff0c\u66f4\u4e3a\u7b80\u5355\uff01 \u5728\u7ebf UUencode \u7f16\u7801\u89e3\u7801\u3002","title":"UUencode\u7f16\u7801"},{"location":"EncodeDecode/UUencode/#_1","text":"UUencode\u662f\u4e00\u79cd\u4e8c\u8fdb\u5236\u5230\u6587\u5b57\u7684\u7f16\u7801\uff0c\u6700\u65e9\u5728unix \u90ae\u4ef6\u7cfb\u7edf\u4e2d\u4f7f\u7528\uff0c\u5168\u79f0\uff1aUnix-to-Unix encoding\uff0cUUencode\u5c06\u8f93\u5165\u6587\u672c\u4ee5\u6bcf\u4e09\u4e2a\u5b57\u8282\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u7801\uff0c\u5982\u679c\u6700\u540e\u5269\u4e0b\u7684\u8d44\u6599\u5c11\u4e8e\u4e09\u4e2a\u5b57\u8282\uff0c\u4e0d\u591f\u7684\u90e8\u4efd\u7528\u96f6\u8865\u9f50\u3002\u4e09\u4e2a\u5b57\u8282\u5171\u670924\u4e2aBit\uff0c\u4ee56-bit\u4e3a\u5355\u4f4d\u5206\u4e3a4\u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u4ee5\u5341\u8fdb\u5236\u6765\u8868\u793a\u6240\u51fa\u73b0\u7684\u5b57\u8282\u7684\u6570\u503c\u3002\u8fd9\u4e2a\u6570\u503c\u53ea\u4f1a\u843d\u57280\u523063\u4e4b\u95f4\u3002\u7136\u540e\u5c06\u6bcf\u4e2a\u6570\u52a0\u4e0a32\uff0c\u6240\u4ea7\u751f\u7684\u7ed3\u679c\u521a\u597d\u843d\u5728ASCII\u5b57\u7b26\u96c6\u4e2d\u53ef\u6253\u5370\u5b57\u7b26\uff0832-\u7a7a\u767d\u202695-\u5e95\u7ebf\uff09\u7684\u8303\u56f4\u4e4b\u4e2d\u3002","title":"\u7b80\u4ecb"},{"location":"EncodeDecode/UUencode/#_2","text":"\u5b83\u4e0ebase64\u53ca\u5176\u76f8\u4f3c\uff0c\u4f46\u662fUUencode\u4e0d\u7528\u5199\u6620\u5c04\u8868\uff0c\u662f\u901a\u8fc7\u52a032\u8f6c\u6362\u5230\u53ef\u6253\u5370\u5b57\u7b26\u8303\u56f4\u4e2d\u3002\u6bd4\u8d77base64\u6765\uff0c\u66f4\u4e3a\u7b80\u5355\uff01 \u5728\u7ebf UUencode \u7f16\u7801\u89e3\u7801\u3002","title":"\u6269\u5c55"},{"location":"EncodeDecode/Unicode/","text":"\u7b80\u4ecb XXencode\u5c06\u8f93\u5165\u6587\u672c\u4ee5\u6bcf\u4e09\u4e2a\u5b57\u8282\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u7801\u3002\u5982\u679c\u6700\u540e\u5269\u4e0b\u7684\u8d44\u6599\u5c11\u4e8e\u4e09\u4e2a\u5b57\u8282\uff0c\u4e0d\u591f\u7684\u90e8\u4efd\u7528\u96f6\u8865\u9f50\u3002\u8fd9\u4e09\u4e2a\u5b57\u8282\u5171\u670924\u4e2aBit\uff0c\u4ee56bit\u4e3a\u5355\u4f4d\u5206\u4e3a4\u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u4ee5\u5341\u8fdb\u5236\u6765\u8868\u793a\u6240\u51fa\u73b0\u7684\u6570\u503c\u53ea\u4f1a\u843d\u57280\u523063\u4e4b\u95f4\u3002\u4ee5\u6240\u5bf9\u5e94\u503c\u7684\u4f4d\u7f6e\u5b57\u7b26\u4ee3\u66ff\u3002\u5b83\u6240\u9009\u62e9\u7684\u53ef\u6253\u5370\u5b57\u7b26\u662f\uff1a+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\uff0c\u4e00\u517164\u4e2a\u5b57\u7b26\u3002\u8ddfbase64\u6253\u5370\u5b57\u7b26\u76f8\u6bd4\uff0c\u5c31\u662fUUencode\u591a\u4e00\u4e2a\u201c-\u201d \u5b57\u7b26\uff0c\u5c11\u4e00\u4e2a\u201d/\u201d \u5b57\u7b26\u3002 \u6269\u5c55 \u6bcf60\u4e2a\u7f16\u7801\u8f93\u51fa\uff08\u76f8\u5f53\u4e8e45\u4e2a\u8f93\u5165\u5b57\u8282\uff09\u5c06\u8f93\u51fa\u4e3a\u72ec\u7acb\u4e00\u884c\uff0c\u6bcf\u884c\u7684\u5f00\u5934\u4f1a\u52a0\u4e0a\u957f\u5ea6\u5b57\u7b26\uff0c\u9664\u4e86\u6700\u540e\u4e00\u884c\u4e4b\u5916\uff0c\u957f\u5ea6\u5b57\u7b26\u90fd\u5e94\u8be5\u662fh\u8fd9\u4e2a\u5b57\u7b26\uff0845\uff0c\u521a\u597d\u662f64\u5b57\u6bcd\u8868\u4e2d\u7b2c45\u4f4dh\u5b57\u7b26\uff09\uff0c\u6700\u540e\u4e00\u884c\u7684\u957f\u5ea6\u5b57\u7b26\u4e3a\u5269\u4e0b\u7684\u5b57\u8282\u6570\u76ee\u572864\u5b57\u7b26\u4e2d\u4f4d\u503c\u6240\u4ee3\u8868\u7684\u5b57\u7b26\u3002 \u5728\u7ebf XXencode \u7f16\u7801\u89e3\u7801\u3002","title":"Unicode\u7f16\u7801"},{"location":"EncodeDecode/Unicode/#_1","text":"XXencode\u5c06\u8f93\u5165\u6587\u672c\u4ee5\u6bcf\u4e09\u4e2a\u5b57\u8282\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u7801\u3002\u5982\u679c\u6700\u540e\u5269\u4e0b\u7684\u8d44\u6599\u5c11\u4e8e\u4e09\u4e2a\u5b57\u8282\uff0c\u4e0d\u591f\u7684\u90e8\u4efd\u7528\u96f6\u8865\u9f50\u3002\u8fd9\u4e09\u4e2a\u5b57\u8282\u5171\u670924\u4e2aBit\uff0c\u4ee56bit\u4e3a\u5355\u4f4d\u5206\u4e3a4\u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u4ee5\u5341\u8fdb\u5236\u6765\u8868\u793a\u6240\u51fa\u73b0\u7684\u6570\u503c\u53ea\u4f1a\u843d\u57280\u523063\u4e4b\u95f4\u3002\u4ee5\u6240\u5bf9\u5e94\u503c\u7684\u4f4d\u7f6e\u5b57\u7b26\u4ee3\u66ff\u3002\u5b83\u6240\u9009\u62e9\u7684\u53ef\u6253\u5370\u5b57\u7b26\u662f\uff1a+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\uff0c\u4e00\u517164\u4e2a\u5b57\u7b26\u3002\u8ddfbase64\u6253\u5370\u5b57\u7b26\u76f8\u6bd4\uff0c\u5c31\u662fUUencode\u591a\u4e00\u4e2a\u201c-\u201d \u5b57\u7b26\uff0c\u5c11\u4e00\u4e2a\u201d/\u201d \u5b57\u7b26\u3002","title":"\u7b80\u4ecb"},{"location":"EncodeDecode/Unicode/#_2","text":"\u6bcf60\u4e2a\u7f16\u7801\u8f93\u51fa\uff08\u76f8\u5f53\u4e8e45\u4e2a\u8f93\u5165\u5b57\u8282\uff09\u5c06\u8f93\u51fa\u4e3a\u72ec\u7acb\u4e00\u884c\uff0c\u6bcf\u884c\u7684\u5f00\u5934\u4f1a\u52a0\u4e0a\u957f\u5ea6\u5b57\u7b26\uff0c\u9664\u4e86\u6700\u540e\u4e00\u884c\u4e4b\u5916\uff0c\u957f\u5ea6\u5b57\u7b26\u90fd\u5e94\u8be5\u662fh\u8fd9\u4e2a\u5b57\u7b26\uff0845\uff0c\u521a\u597d\u662f64\u5b57\u6bcd\u8868\u4e2d\u7b2c45\u4f4dh\u5b57\u7b26\uff09\uff0c\u6700\u540e\u4e00\u884c\u7684\u957f\u5ea6\u5b57\u7b26\u4e3a\u5269\u4e0b\u7684\u5b57\u8282\u6570\u76ee\u572864\u5b57\u7b26\u4e2d\u4f4d\u503c\u6240\u4ee3\u8868\u7684\u5b57\u7b26\u3002 \u5728\u7ebf XXencode \u7f16\u7801\u89e3\u7801\u3002","title":"\u6269\u5c55"},{"location":"EncodeDecode/XXencode/","text":"\u7b80\u4ecb XXencode\u5c06\u8f93\u5165\u6587\u672c\u4ee5\u6bcf\u4e09\u4e2a\u5b57\u8282\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u7801\u3002\u5982\u679c\u6700\u540e\u5269\u4e0b\u7684\u8d44\u6599\u5c11\u4e8e\u4e09\u4e2a\u5b57\u8282\uff0c\u4e0d\u591f\u7684\u90e8\u4efd\u7528\u96f6\u8865\u9f50\u3002\u8fd9\u4e09\u4e2a\u5b57\u8282\u5171\u670924\u4e2aBit\uff0c\u4ee56bit\u4e3a\u5355\u4f4d\u5206\u4e3a4\u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u4ee5\u5341\u8fdb\u5236\u6765\u8868\u793a\u6240\u51fa\u73b0\u7684\u6570\u503c\u53ea\u4f1a\u843d\u57280\u523063\u4e4b\u95f4\u3002\u4ee5\u6240\u5bf9\u5e94\u503c\u7684\u4f4d\u7f6e\u5b57\u7b26\u4ee3\u66ff\u3002\u5b83\u6240\u9009\u62e9\u7684\u53ef\u6253\u5370\u5b57\u7b26\u662f\uff1a+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\uff0c\u4e00\u517164\u4e2a\u5b57\u7b26\u3002\u8ddfbase64\u6253\u5370\u5b57\u7b26\u76f8\u6bd4\uff0c\u5c31\u662fUUencode\u591a\u4e00\u4e2a\u201c-\u201d \u5b57\u7b26\uff0c\u5c11\u4e00\u4e2a\u201d/\u201d \u5b57\u7b26\u3002 \u6269\u5c55 \u6bcf60\u4e2a\u7f16\u7801\u8f93\u51fa\uff08\u76f8\u5f53\u4e8e45\u4e2a\u8f93\u5165\u5b57\u8282\uff09\u5c06\u8f93\u51fa\u4e3a\u72ec\u7acb\u4e00\u884c\uff0c\u6bcf\u884c\u7684\u5f00\u5934\u4f1a\u52a0\u4e0a\u957f\u5ea6\u5b57\u7b26\uff0c\u9664\u4e86\u6700\u540e\u4e00\u884c\u4e4b\u5916\uff0c\u957f\u5ea6\u5b57\u7b26\u90fd\u5e94\u8be5\u662fh\u8fd9\u4e2a\u5b57\u7b26\uff0845\uff0c\u521a\u597d\u662f64\u5b57\u6bcd\u8868\u4e2d\u7b2c45\u4f4dh\u5b57\u7b26\uff09\uff0c\u6700\u540e\u4e00\u884c\u7684\u957f\u5ea6\u5b57\u7b26\u4e3a\u5269\u4e0b\u7684\u5b57\u8282\u6570\u76ee\u572864\u5b57\u7b26\u4e2d\u4f4d\u503c\u6240\u4ee3\u8868\u7684\u5b57\u7b26\u3002 \u5728\u7ebf XXencode \u7f16\u7801\u89e3\u7801\u3002","title":"XXencode\u7f16\u7801"},{"location":"EncodeDecode/XXencode/#_1","text":"XXencode\u5c06\u8f93\u5165\u6587\u672c\u4ee5\u6bcf\u4e09\u4e2a\u5b57\u8282\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u7801\u3002\u5982\u679c\u6700\u540e\u5269\u4e0b\u7684\u8d44\u6599\u5c11\u4e8e\u4e09\u4e2a\u5b57\u8282\uff0c\u4e0d\u591f\u7684\u90e8\u4efd\u7528\u96f6\u8865\u9f50\u3002\u8fd9\u4e09\u4e2a\u5b57\u8282\u5171\u670924\u4e2aBit\uff0c\u4ee56bit\u4e3a\u5355\u4f4d\u5206\u4e3a4\u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u4ee5\u5341\u8fdb\u5236\u6765\u8868\u793a\u6240\u51fa\u73b0\u7684\u6570\u503c\u53ea\u4f1a\u843d\u57280\u523063\u4e4b\u95f4\u3002\u4ee5\u6240\u5bf9\u5e94\u503c\u7684\u4f4d\u7f6e\u5b57\u7b26\u4ee3\u66ff\u3002\u5b83\u6240\u9009\u62e9\u7684\u53ef\u6253\u5370\u5b57\u7b26\u662f\uff1a+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\uff0c\u4e00\u517164\u4e2a\u5b57\u7b26\u3002\u8ddfbase64\u6253\u5370\u5b57\u7b26\u76f8\u6bd4\uff0c\u5c31\u662fUUencode\u591a\u4e00\u4e2a\u201c-\u201d \u5b57\u7b26\uff0c\u5c11\u4e00\u4e2a\u201d/\u201d \u5b57\u7b26\u3002","title":"\u7b80\u4ecb"},{"location":"EncodeDecode/XXencode/#_2","text":"\u6bcf60\u4e2a\u7f16\u7801\u8f93\u51fa\uff08\u76f8\u5f53\u4e8e45\u4e2a\u8f93\u5165\u5b57\u8282\uff09\u5c06\u8f93\u51fa\u4e3a\u72ec\u7acb\u4e00\u884c\uff0c\u6bcf\u884c\u7684\u5f00\u5934\u4f1a\u52a0\u4e0a\u957f\u5ea6\u5b57\u7b26\uff0c\u9664\u4e86\u6700\u540e\u4e00\u884c\u4e4b\u5916\uff0c\u957f\u5ea6\u5b57\u7b26\u90fd\u5e94\u8be5\u662fh\u8fd9\u4e2a\u5b57\u7b26\uff0845\uff0c\u521a\u597d\u662f64\u5b57\u6bcd\u8868\u4e2d\u7b2c45\u4f4dh\u5b57\u7b26\uff09\uff0c\u6700\u540e\u4e00\u884c\u7684\u957f\u5ea6\u5b57\u7b26\u4e3a\u5269\u4e0b\u7684\u5b57\u8282\u6570\u76ee\u572864\u5b57\u7b26\u4e2d\u4f4d\u503c\u6240\u4ee3\u8868\u7684\u5b57\u7b26\u3002 \u5728\u7ebf XXencode \u7f16\u7801\u89e3\u7801\u3002","title":"\u6269\u5c55"},{"location":"EncodeDecode/ascii/","text":"ASCII\u7b80\u4ecb ASCII\u7f16\u7801\u662f\u7f8e\u56fd\u4fe1\u606f\u4ea4\u6362\u6807\u51c6\u4ee3\u7801\uff0c\u4e3b\u8981\u7528\u4e8e\u663e\u793a\u73b0\u4ee3\u82f1\u8bed\u548c\u5176\u4ed6\u897f\u6b27\u8bed\u8a00\u3002 \u56e0\u4e3a1\u4f4d\u4e8c\u8fdb\u5236\u6570\u53ef\u4ee5\u8868\u793a(2 1 )=2\u79cd\u72b6\u6001\uff1a0\u30011\uff1b \u800c2\u4f4d\u4e8c\u8fdb\u5236\u6570\u53ef\u4ee5\u8868\u793a\uff082 2 \uff09=4\u79cd\u72b6\u6001\uff1a00\u300101\u300110\u300111\uff1b \u4f9d\u6b21\u7c7b\u63a8\uff0c7\u4f4d\u4e8c\u8fdb\u5236 \u6570\u53ef\u4ee5\u8868\u793a(2 7 )=128\u79cd\u72b6\u6001\uff0c\u6bcf\u79cd\u72b6\u6001\u90fd\u552f\u4e00\u5730\u7f16\u4e3a\u4e00\u4e2a7\u4f4d\u7684\u4e8c\u8fdb\u5236\u7801\uff0c\u5bf9\u5e94\u4e00\u4e2a\u5b57\u7b26\uff08\u6216\u63a7\u5236\u7801\uff09\uff0c\u8fd9\u4e9b\u7801\u53ef\u4ee5\u6392\u5217\u6210\u4e00\u4e2a\u5341\u8fdb\u5236\u5e8f\u53f70\uff5e127\u3002 \u6240\u4ee5\uff0c7\u4f4dASCII\u7801\u662f\u7528\u4e03\u4f4d\u4e8c\u8fdb\u5236\u6570\u8fdb\u884c\u7f16\u7801\u7684\uff0c\u53ef\u4ee5\u8868\u793a127\u4e2a\u5b57\u7b26\u3002 \u3010\u5176\u5b9e\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u7ea6\u5b9a\u4e00\u5957\u81ea\u5df1\u7684\u7f16\u7801\uff0c\u4f46\u5982\u679c\u5927\u5bb6\u4e0d\u60f3\u76f8\u4e92\u901a\u4fe1\u7684\u65f6\u5019\u9020\u6210\u6df7\u4e71\uff0c\u90a3\u5fc5\u987b\u4f7f\u7528\u76f8\u540c\u7684\u7f16\u7801\u89c4\u5219\u3011 ASCII\u5b57\u7b26\u96c6 \u4e3e\u4e2a\u4f8b\u5b50: \u8bf7\u89e3\u7801\u4ee5\u4e0bASCII\uff1a 102 108 97 103 123 97 115 99 105 105 95 105 115 95 111 107 125 \u70b9\u6b64\u8fdb\u5165ASCII\u5728\u7ebf\u5de5\u5177 Python\u7f16\u7801\u89e3\u7801ASCII ascii_list = [102,108,97,103,123,97,115,99,105,105,95,105,115,95,111,107,125] string = for i in ascii_list: string += chr(i) print string ascii_list = [] for i in string: ascii_list.append(ord(i)) print ascii_list","title":"ASCII\u7f16\u7801"},{"location":"EncodeDecode/ascii/#ascii","text":"ASCII\u7f16\u7801\u662f\u7f8e\u56fd\u4fe1\u606f\u4ea4\u6362\u6807\u51c6\u4ee3\u7801\uff0c\u4e3b\u8981\u7528\u4e8e\u663e\u793a\u73b0\u4ee3\u82f1\u8bed\u548c\u5176\u4ed6\u897f\u6b27\u8bed\u8a00\u3002 \u56e0\u4e3a1\u4f4d\u4e8c\u8fdb\u5236\u6570\u53ef\u4ee5\u8868\u793a(2 1 )=2\u79cd\u72b6\u6001\uff1a0\u30011\uff1b \u800c2\u4f4d\u4e8c\u8fdb\u5236\u6570\u53ef\u4ee5\u8868\u793a\uff082 2 \uff09=4\u79cd\u72b6\u6001\uff1a00\u300101\u300110\u300111\uff1b \u4f9d\u6b21\u7c7b\u63a8\uff0c7\u4f4d\u4e8c\u8fdb\u5236 \u6570\u53ef\u4ee5\u8868\u793a(2 7 )=128\u79cd\u72b6\u6001\uff0c\u6bcf\u79cd\u72b6\u6001\u90fd\u552f\u4e00\u5730\u7f16\u4e3a\u4e00\u4e2a7\u4f4d\u7684\u4e8c\u8fdb\u5236\u7801\uff0c\u5bf9\u5e94\u4e00\u4e2a\u5b57\u7b26\uff08\u6216\u63a7\u5236\u7801\uff09\uff0c\u8fd9\u4e9b\u7801\u53ef\u4ee5\u6392\u5217\u6210\u4e00\u4e2a\u5341\u8fdb\u5236\u5e8f\u53f70\uff5e127\u3002 \u6240\u4ee5\uff0c7\u4f4dASCII\u7801\u662f\u7528\u4e03\u4f4d\u4e8c\u8fdb\u5236\u6570\u8fdb\u884c\u7f16\u7801\u7684\uff0c\u53ef\u4ee5\u8868\u793a127\u4e2a\u5b57\u7b26\u3002 \u3010\u5176\u5b9e\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u7ea6\u5b9a\u4e00\u5957\u81ea\u5df1\u7684\u7f16\u7801\uff0c\u4f46\u5982\u679c\u5927\u5bb6\u4e0d\u60f3\u76f8\u4e92\u901a\u4fe1\u7684\u65f6\u5019\u9020\u6210\u6df7\u4e71\uff0c\u90a3\u5fc5\u987b\u4f7f\u7528\u76f8\u540c\u7684\u7f16\u7801\u89c4\u5219\u3011","title":"ASCII\u7b80\u4ecb"},{"location":"EncodeDecode/ascii/#ascii_1","text":"\u4e3e\u4e2a\u4f8b\u5b50: \u8bf7\u89e3\u7801\u4ee5\u4e0bASCII\uff1a 102 108 97 103 123 97 115 99 105 105 95 105 115 95 111 107 125 \u70b9\u6b64\u8fdb\u5165ASCII\u5728\u7ebf\u5de5\u5177","title":"ASCII\u5b57\u7b26\u96c6"},{"location":"EncodeDecode/ascii/#pythonascii","text":"ascii_list = [102,108,97,103,123,97,115,99,105,105,95,105,115,95,111,107,125] string = for i in ascii_list: string += chr(i) print string ascii_list = [] for i in string: ascii_list.append(ord(i)) print ascii_list","title":"Python\u7f16\u7801\u89e3\u7801ASCII"},{"location":"EncodeDecode/base16/","text":"Base16\u7b80\u4ecb Base16\u7f16\u7801\u4f7f\u752816\u4e2aASCII\u53ef\u6253\u5370\u5b57\u7b26\uff08\u6570\u5b570-9\u548c\u5b57\u6bcdA-F\uff09\u5bf9\u4efb\u610f\u5b57\u8282\u6570\u636e\u8fdb\u884c\u7f16\u7801\u3002 Base16\u5148\u83b7\u53d6\u8f93\u5165\u5b57\u7b26\u4e32\u6bcf\u4e2a\u5b57\u8282\u7684\u4e8c\u8fdb\u5236\u503c\uff08\u4e0d\u8db38\u6bd4\u7279\u5728\u9ad8\u4f4d\u88650\uff09\uff0c\u7136\u540e\u5c06\u5176\u4e32\u8054\u8fdb\u6765\uff0c\u518d\u6309\u71674\u6bd4\u7279\u4e00\u7ec4\u8fdb\u884c\u5207\u5206\uff0c\u5c06\u6bcf\u7ec4\u4e8c\u8fdb\u5236\u6570\u5206\u522b\u8f6c\u6362\u6210\u5341\u8fdb\u5236\uff0c\u5728\u4e0b\u8ff0\u8868\u683c\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u7f16\u7801\u4e32\u63a5\u8d77\u6765\u5c31\u662fBase16\u7f16\u7801\u3002 \u53ef\u4ee5\u770b\u52308\u6bd4\u7279\u6570\u636e\u6309\u71674\u6bd4\u7279\u5207\u5206\u521a\u597d\u662f\u4e24\u7ec4\uff0c\u6240\u4ee5Base16\u4e0d\u53ef\u80fd\u7528\u5230\u586b\u5145\u7b26\u53f7\u201c=\u201d\u3002 Base16\u7f16\u7801\u540e\u7684\u6570\u636e\u91cf\u662f\u539f\u6570\u636e\u7684\u4e24\u500d\uff1a1000\u6bd4\u7279\u6570\u636e\u9700\u8981250\u4e2a\u5b57\u7b26\uff08\u5373 250*8=2000 \u6bd4\u7279\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff1aBase16\u4f7f\u7528\u4e24\u4e2aASCII\u5b57\u7b26\u53bb\u7f16\u7801\u539f\u6570\u636e\u4e2d\u7684\u4e00\u4e2a\u5b57\u8282\u6570\u636e\u3002 a s d f ASCII 97 115 100 102 hex 0x61 0x73 0x64 0x66 Base16 61 73 64 66 \u8bc6\u522b\u7f16\u7801\u65b9\u5f0f \u6ce8\u610f Base64\u3001Base32\u3001Base16\u7f16\u7801\u7684\u8bc6\u522b\u5173\u952e\uff1a Base64 : A-Z\u3001a-z\u30010-9\u3001+\u3001/\u4ee5\u53ca\u5c0f\u4e8e\u7b49\u4e8e\u4e24\u4e2a\u7b49\u53f7 Base32 : A-Z\u30012-7\u4ee5\u53ca\u8865\u4f4d\u7684\u7b49\u53f7 Base16 : 0-9\u3001A-F \u4f8b\u9898 \u6df7\u5408\u7f16\u7801 \u4f8b\u9898 \u8bf7\u89e3\u7801\u4ee5\u4e0b\u5b57\u7b26\u4e32: R1pDVE1NWlhHUTNETU4yQ0dZWkRNTUpYR00zREtNWldHTTJES1JSV0dJM0RDTlpUR1kyVEdNWlRHSTJVTU5SUkdaQ1RNTkJWSVkzREVOUlJHNFpUTU5KVEdFWlRNTjJF \u9996\u5148\u5c1d\u8bd5Base64\u89e3\u7801\uff08\u56e0\u4e3a\u7f16\u7801\u540e\u7684\u6570\u636e\u6709\u5927\u5c0f\u5199\u4e4b\u5206\uff09 Base64\u89e3\u7801\uff1aGZCTMMZXGQ3DMN2CGYZDMMJXGM3DKMZWGM2DKRRWGI3DCNZTGY2TGMZTGI2UMNRRGZCTMNBVIY3DENRRG4ZTMNJTGEZTMN2E \u6211\u4eec\u518d\u5bf9\u89e3\u7801\u540e\u7684\u6570\u636e\u4f7f\u7528Base32\u89e3\u7801\uff08\u56e0\u4e3a\u7f16\u7801\u540e\u7684\u6570\u636e\u53ea\u6709\u5927\u5199\u5b57\u6bcd\u548c\u6570\u5b57\uff09 Base32\u89e3\u7801\uff1a6E6374667B6261736536345F6261736533325F616E645F6261736531367D \u518d\u4f7f\u7528Base16\u89e3\u7801\u5373\u53ef\uff08\u56e0\u4e3a\u7f16\u7801\u540e\u7684\u6570\u636e\u53ea\u67090-9\u3001A-F\uff09 Base16\u89e3\u7801\uff1anctf{base64_base32_and_base16}nctf{base64_base32_and_base16} \u5faa\u73af\u7f16\u7801 \u4f8b\u9898 \u8bf7\u89e3\u7801\u4ee5\u4e0b\u5b57\u7b26\u4e32: GM2DINJTGUZTIMZUGM4TGNZUGEZTINBUGM2TGNBTGUZTEMZUGMZDGNBUGUZTIMZUGM2DGOJTGMZTCMZUGQ2TGNRUGEZTKMZRGMZTGMJTGQ2DKMZXGQYTGNJTGEZTGMZRGM2DINBTGY2DCMZVGM2TGNZUGEZTINBVGM3DIMRTGQ2DIMZTGMYTGNBUGUZTMNBRGM2TGMRTGQZTEMZUGQ2TGNJTGQZTKMZZGMZTGMJTGQ2DKMZUGM2DGNJTGIZTIMZSGM2DINJTGQZTIMZVGM2TGMZTGEZTINBVGM2DGNBTGUZTKMZTGMYTGNBUGQZTONBRGM2TGNJTGMZTAMZUGQ2DGNZUGEZTKMZVGMZTGMRTGQ2DKMZWGQZDGNBTHEZTGMZSGM2DINJTGQZTIMZVGM2TGMZTGIZTINBVGM2DGNJTGUZTCMZXGQYTGNBUGQZTKMZUGM2TGNJTG4ZTSMZUGQ2TGNBTGUZTIMZVGMZTGMJTGQ2DKMZUGM2DGNJTGUZTGMZSGM2DINJTG42DCMZUGMYTGMZTGEZTINBVGM3DIMJTGUZTKMZXGQYTGNBUGUZTKMZUGM2TGNJTGMZTCMZUGQ2TGNJTGQZTMMZTGMZTGNJTGQ2DKMZVGM2DGNBTHEZTGMZRGM2DINJTGUZTIMZVGM4TGMZTGAZTINBVGM2DGNJTGUZTSMZTGMYTGNBUGQZTKMZUGM2DINBTG4ZTOMZUGQ2TGNBTGUZTIMZVGMZTGMBTGQ2DMMZUGM2DGNJTGUZTGMZRGM2DINJTGY2DEMZUGM4TGMZTGAZTKMZRGM2TGNBTGUZTCMZTGMYTGNBUGUZTKMZUGM2DINBTGMZTCMZUGQ2TGNJTGQZTINBUGMZTGMJTGQ2DKMZUGM2DGNBUGQZTGMZRGM2DINJTGY2DCMZVGM2TGMZTGEZTINBVGM3DIMJTGQ2DIMZXGQYTGNBUGQZTIMZUGM2TGMRTGQZTKMZUGQ2TGNRUGIZTINBUGMZTGMJTGQ2DIMZWGQYTGNJTGIZTIMZSGM2DINJTGUZTIMZVGMYTGMZTGEZTINBVGM3DIMJTGYZTGMZXGM3TGNBUGUZTKMZUGM2TGMJTGMZTCMZUGQ2DGNRUGEZTINBUGM3TGOBTGQ2DKMZUGM2TGNBTGUZTGMZQGM2DINBTG42DCMZVGM2TGNZTHEZTINBVGM2DGNBTGUZTKMZTGMZDGNJTGEZTONBRGM2TGNJTG4ZTSMZUGQ2TGNJTGQZTKMZVGMZTGMRTGUZTCMZXGQYTGNJTGUZTGMZSGM2DINJTGQZTIMZWGM3TGMZTGEZTINBVGM3TIMJTGUZTKMZTGMYDGNBUGUZTIMZVGM2DGNJTGMZTAMZUGQ2TGNRUGEZTKMZVGM3TGOJTGQ2DIMZXGQYTGNBTGEZTONBRGM2DINJTGUZTIMZVGMZDGNBTGMZTINBVGM2TGNBTGUZTSMZTGMYTGNBUGUZTKMZUGM2TGOJTGMZTAMZUGQ2TGNJTGQZTIMZZGMZTGMBTGUZTEMZVGM2DGNJTGEZTGMZSGM2DINJTGUZTIMZUGM4TGMZTGAZTKMZRGM3TIMJTGUZTKMZTGMYDGNBUGUZTMNBSGM2DINBTGMZTGMZUGQ2DGNBTGQZTKMZVGMZTGMZTGQ2DKMZVGM2DGNBTHEZTONBRGM2DINBTGQZTIMZUGQ2DGNZTG4ZTINBVGM3TIMJTGY2DEMZTGMYTGNBUGQZTMNBRGM2TGMJTGMZTCMZUGQ2TGNZUGEZTKMZRGMZTGMBTGUZTEMZWGQYTGNJTGUZTOMZYGM2DINBTG42DCMZUGMYTGMZTGAZTKMZSGM2TGNBTGUZTCMZTGM2DGNBUGUZTKMZUGM2TGNJTGMZTCMZUGQ2TGNRUGEZTMMZTGM3TGNZTGQ2DKMZUGM2DGNJTGUZTGMZRGM2DINBTG42DCMZVGM2TGMZTGEZTINBUGM3TIMJTGY2DEMZTGMYDGNBUGQZTONBRGM2TGNJTGMZTEMZUGQ2TGNJTGQZTKMZVGMZTGMRTGQ2DKMZUGM2DGNJTGYZTIMZSGM2DINJTGQZTKMZVGMYTGMZTGIZTKMZRGM3DIMJTGUZTKMZTGMZDGNBUGUZTIMZVGM2DGNJTGMZTCMZUGQ2TGNBTGQZTKNBRGM2DGMZTGQ2DKMZXGQYTGNBTGEZTGMZRGM2DINJTG42DCMZVGM2TGNZTHEZTINBUGM3TIMJTGQZTKMZTGMYDGNBUGUZTMNBRGM2TGOJTG4ZTQMZUGQ2TGNJTGQZTKMZZGMZTGMBTGQ2DKMZVGM2DGNRTGMZTGMZQGM2DINJTGUZTIMZUGMYTGMZTGEZTINBUGM2TGNBTGU2DCMZUGM2DGNBUGUZTKMZUGM2TGOJTGMZTAMZUGQ3DGNBTGQZTKMZSGM2DGNRTGQ2DKMZUGM2DGNJTGEZTGMZQGM2TGMJTGUZTIMZVGMYTGMZTGEZTINBVGM2TGNBTGUZTKMZXGQYTGNBUGQZTIMZUGM2DINBTGMZTCMZUGQ2TGNBTGUZTINBUGMZTGMJTGQ2DIMZVGM2DGNJUGEZTIMZTGM2DINJTGY2DCMZVGMYTGMZTGEZTINBUGM3DIMJTGUZTEMZUGM2TGNBUGUZTMNBSGM2DINBTGMZTCMZUGQ2DGNRUGEZTKMZSGM2DGNBTGQ2DKMZVGM2DGNJTGEZTONBRGM2DINBTGQZTIMZWGMZTGNZTG4ZTINBVGM2TGNBTGYZTGMZTGMYTGNBUGQZTMNBRGM3DGNBTGQZTEMZUGQ2TGNJTGQZTIMZVGMZTGMZTGQ2DMMZVGM2DGNJTGUZTOMZZGM2DINJTGUZTIMZVGM2TGMZTGEZTINBVGM3DIMJTGUZTEMZUGM3TGNBUGUZTKMZUGM2DGNJTG42DCMZUGQ2DGNBTGQZTKMZWGM2DGMRTGQ2DKMZUGM2DGNRTG4ZTGMZRGM2DINJTGUZTIMZVGQYTGNBTGMZTINBVGM2DGNJTGQZTKMZTGMYDGNBUGUZTKMZUGM2TGNJTG42DCMZUGQ2DGNZUGEZTIMZVGMZTGMBTGQ2DKMZWGQYTGNJTGIZTIMZTGM2DINJTGUZTIMZVGM4TGMZTGEZTINBVGM2TGNBTGU2DCMZUGM2DGNBUGUZTIMZUGM2TGOJTGMZTAMZVGMZDGNBTGQZTKNBRGM2DGNBTGQ2DKMZVGM2DGNBTHEZTGMZQGM2TGMJTG42DCMZVGM2TGMZTGAZTINBVGM3DIMRTGQZTSMZTGMYDGNJTGIZTKMZUGM2TGMJTGMZTEMZUGQ2TGNJTGQZTIMZZGM3TIMJTGQ2DIMZVGM2DGNJTGIZTIMZSGM2DINJTGQZTIMZVGMYTGMZTGEZTINBVGM3DIMJTGUZTCMZTGMYTGNBUGUZTONBRGM2TGMJTGMZTAMZVGMZDGNJTGQZTKMZVGMZTGMZTGQ2DKMZWGQZDGNBUGQZTGMZRGM2TGMJTGUZTIMZVGMZDGNBTGIZTINBVGM2TGNBTGQZTSMZTGMYTGNBUGUZTIMZUGM2TGMRTGQZTEMZUGQ2TGNBTGQZTKMZZGMZTGMJTGQ2DIMZWGQYTGNJTGUZTGMZRGM2DINBTG42DCMZVGM2TGMZTGAZTKMZRGM3DIMJTGUZTKMZTGMYTGNBUGQZTONBRGM2DGMJTGMZTEMZUGQ2TGNBTGQZTKMZVGM3TGOJTGQ2DKMZVGM2DGNRTGMZTGMZSGM2TGMJTGY2DCMZVGM2TGNZTHEZTINBVGM2DGNJTGQZTKMZTGMYTGNBUGUZTIMZUGM2TIMJTGQZTGMZUGQ2TGNZUGEZTIMZRGMZTGMJTGQ2DKMZVGM2DGNJTGUZTOMZZGM2DINBTG42DCMZUGM2TGMZTGIZTKMZRGM3DIMJTGYZTGMZTGM2TGNBUGUZTKMZUGM2TGOJTGMZTAMZUGQ2TGNJTGQZTKNBRGM2DGNBTGQ2DKMZUGM2TGNJTHEZTGMZRGM2DINBTG42DCMZVGQYTGNBTGQZTINBVGM2TGNBTGQZTSMZTGMYDGNBUGYZTIMZUGM2TGNJTGMZTEMZUGQ2TGNJTGQZTKMZRGMZTGMBTGUZTCMZVGM2DGNJTGEZTGMZRGM2DINJTGUZTIMZUGQ2DGMZTGEZTINBVGM3DIMJTGUZTCMZTGMZDGNBUGUZTKMZUGM2DINBTGMZTCMZUGQ2TGNRUGEZTKNBRGM2DGMZTGQ2DKMZWGQYTGNJTGEZTGMZQGM2TGMJTGUZTIMZVGMZDGNBTGUZTINBVGM3DIMRTGQZTSMZTGMYTGNBUGQZTMNBRGM2TGNJTG4ZTOMZUGQ2TGNJTGQZTKMZRGMZTGMRTGUZTCMZWGQYTGNRTGMZTOMZXGM2DINJTGUZTIMZWGMZTGMZTGEZTINBUGM3DIMJTGQ2DIMZXGM3TGNBUGQZTONBRGM2DGMJTGMZTGMZUGQ3DGNJTGQZTKMZVGM3TGOJTGQ2DKMZUGM2DGNJTGUZTGMZTGM2DINJTGQZTIMZVGMZDGNBTGYZTINBVGM2TGNBTGQ2DIMZTGMZDGNJTGEZTONBRGM2TGNRTGQZTEMZUGQ2TGNBTGUZTIMZVGMZTGMJTGQ2DIMZWGQYTGNJTGUZTGMZQGM2DINJTGQZTKMZUGM2TGMZTGEZTINBVGM2TGNBTGUZTKMZTGMYTGNBUGUZTKMZUGM2TGNJTG42DCMZUGQ2TGNJTGQZTKMZRGMZTGMBTGQ2DKMZVGM2DGNBTGUZTGMZSGM2TGMJTGY2DCMZVGM4TGMZTGAZTINBVGM2TGNBTGUZTSMZTGMYDGNJTGIZTIMZUGM2DINBTG4ZTOMZUGQ2TGNJTGQZTIMZZGMZTGMBTGUZTCMZVGM2DGNJTGUZTGMZRGM2DINJTGUZTIMZVGM4TGMZTGMZTINBUGM2DGNBTGUZTKMZTGMZDGNBUGUZTKMZUGM2DGOJTG42DCMZUGQ2DGNJTGQZTKNBRGM2DGMZTGQ2DKMZXGQYTGNRUGIZTGMZRGM2DINJTGY2DCMZVGMYTGMZTGEZTINBVGM2DGNJTGUZTKMZTGMYDGNJTGIZTMNBRGM2TGNJTG42DCMZUGQ2TGNRUGIZTINBUGMZTGMBTGUZTEMZVGM2DGNJTGEZTGMZUGM2DINJTGUZTIMZVGMYTGMZTGEZTINBVGM3DIMJTGYZTGMZXGM3TGNBUGUZTIMZUGM2TGNJTGMZTCMZUGQ2DGNZUGEZTKMZVGMZTGMJTGQ2DIMZXGQYTGNRUGIZTGMZQGM2DINBTG42DCMZVGM2TGMZTGIZTINBVGM2TGNBTGUZTKMZTGMZDGNBUGQZTONBRGM2DINBTG4ZTOMZUGQ2TGNBTGUZTKMZRGMZTGMRTGUZTCMZWGQYTGNJTGUZTGMZSGM2DINJTGQZTKMZUGM2TGMZTGEZTINBVGM2DGNBTGU2DCMZUGMZTGNBUGUZTONBRGM2TGMJTGMZTAMZUGQ2DGNZUGEZTKMZVGM3TGOJTGQ2DIMZXGQYTGNBTGUZTGMZRGM2DINJTGUZTIMZWGMZTGMZTGUZTINBVGM2TGNBTGUZTSMZTGMYDGNBUGUZTKMZUGM2TIMJTGQZTIMZUGQ2TGNJTGQZTIMZZGMZTGMJTGQ2DKMZVGM2DGNJUGEZTIMZUGM2DINJTGUZTKMZUGM2TGMZTGAZTINBWGM2DGNBTGUZTKMZTGMYTGNBUGUZTKMZUGM2TGMJTGMZTAMZVGMYTGNJTGQZTKMZRGMZTGMRTGQ2DKMZVGM2DGNBTHEZTGMZRGM2DINJTGUZTIMZUGQ2DGMZTGEZTINBVGM2DGNJTGQZTSMZTGMYTGNBUGUZTONBRGM2TGMJTGMZTCMZUGQ2TGNRUGEZTKMZRGMZTGMJTGQ2DIMZWGQYTGNJTGIZTIMZVGM2DINBTG42DCMZUGM2TGMZTGEZTINBUGM3DIMJTGUZTEMZUGM2DGNBUGUZTKMZUGM2TGNJTGMZTCMZUGQ2TGNJTGQZTMMZTGM3TGNZTGQ2DKMZVGM2DGNJTHEZTGMZRGM2DINBTG42DCMZVGMYTGMZTGEZTINBVGM2TGNBTGUZTKMZTGMZTGNBUGYZTKMZUGM2TGNJTGMZTEMZUGQ2TGNBTGQZTKMZVGMZTGMRTGUZTCMZXGQYTGNJTGIZTIMZWGM2DINJTGUZTIMZWGMZTGMZTGIZTKMZRGM3TIMJTGUZTEMZUGM3DGNBUGUZTIMZUGM3DGNZTGMZTCMZUGQ2TGNRUGEZTKMZVGMZTGMRTGQ2DKMZWGQZDGNBUGQZTGMZQGM2DINJTGUZTIMZVGM2TGNZUGEZTINBVGM2TGNBTGUZTSMZTGMYDGNBUGUZTMNBRGM2TGMRTGQZTGMZUGQ2TGNJTGQZTKMZZGMZTGMBTGQ2DKMZVGM2DGNJTHEZTGMZQGM2DINJTGUZTIMZVGM4TGMZTGAZTKMZSGM2DGNBTGU2DCMZUGMZTGNBUGUZTKMZUGM2DGOJTGMZTCMZUGQ2DGNRUGEZTKMZVGMZTGMBTGQ2DKMZWGQZDGNBTHEZTGMZTGM2DINBTGQZTIMZVGM2TGMZTGMZTINBVGM2TGNBTGQZTSMZXGQYTGNBUGQZTIMZUGM2DINBTGMZTCMZUGQ2TGNBTGQZTKMZRGMZTGMJTGQ2DIMZWGQYTGNJTGEZTGMZRGM2DINJTGY2DCMZVGMYTGMZTGEZTINBUGM3TIMJTGUZTKMZXGM4DGNBUGUZTMNBSGM2DINBTGMZTCMZUGQ2DGNRUGEZTKMZSGM2DGMRTGQ2DKMZVGM2DGNJTGUZTGMZRGM2DINJTGY2DCMZWGMZTGNZTG4ZTINBVGM2TGNBTGUZTSMZTGMYTGNBUGQZTONBRGM2TGNJTGMZTCMZUGQ2DGNZUGEZTIMZRGMZTGMZTGQ2DMMZVGM2DGNJTGUZTOMZZGM2DINJTGUZTIMZVGM2TGMZTGIZTINBVGM2DGNBTGUZTEMZUGM3TGNBUGUZTKMZUGM2DGNJTG42DCMZUGQ2DGNBTGQZTKMZRGMZTGMJTGQ2DIMZXGQYTGNRUGIZTGMZRGM2DINBTGQZTIMZVGM2TGMZTGAZTINBUGM3TIMJTGQZTCMZXGQYTGNBUGYZTKMZRGMZTINBTGM2DI=== \u89e3\u7801\u811a\u672c: import base64 fr = open ( subject.txt ) string = fr . readline () fr . close () def deCodeBase ( string ): try : string = base64 . b16decode ( string ) return deCodeBase ( string ) except : try : string = base64 . b32decode ( string ) return deCodeBase ( string ) except : try : string = base64 . b64decode ( string ) return deCodeBase ( string ) except : return string print deCodeBase ( string )","title":"Base16\u7f16\u7801"},{"location":"EncodeDecode/base16/#base16","text":"Base16\u7f16\u7801\u4f7f\u752816\u4e2aASCII\u53ef\u6253\u5370\u5b57\u7b26\uff08\u6570\u5b570-9\u548c\u5b57\u6bcdA-F\uff09\u5bf9\u4efb\u610f\u5b57\u8282\u6570\u636e\u8fdb\u884c\u7f16\u7801\u3002 Base16\u5148\u83b7\u53d6\u8f93\u5165\u5b57\u7b26\u4e32\u6bcf\u4e2a\u5b57\u8282\u7684\u4e8c\u8fdb\u5236\u503c\uff08\u4e0d\u8db38\u6bd4\u7279\u5728\u9ad8\u4f4d\u88650\uff09\uff0c\u7136\u540e\u5c06\u5176\u4e32\u8054\u8fdb\u6765\uff0c\u518d\u6309\u71674\u6bd4\u7279\u4e00\u7ec4\u8fdb\u884c\u5207\u5206\uff0c\u5c06\u6bcf\u7ec4\u4e8c\u8fdb\u5236\u6570\u5206\u522b\u8f6c\u6362\u6210\u5341\u8fdb\u5236\uff0c\u5728\u4e0b\u8ff0\u8868\u683c\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u7f16\u7801\u4e32\u63a5\u8d77\u6765\u5c31\u662fBase16\u7f16\u7801\u3002 \u53ef\u4ee5\u770b\u52308\u6bd4\u7279\u6570\u636e\u6309\u71674\u6bd4\u7279\u5207\u5206\u521a\u597d\u662f\u4e24\u7ec4\uff0c\u6240\u4ee5Base16\u4e0d\u53ef\u80fd\u7528\u5230\u586b\u5145\u7b26\u53f7\u201c=\u201d\u3002 Base16\u7f16\u7801\u540e\u7684\u6570\u636e\u91cf\u662f\u539f\u6570\u636e\u7684\u4e24\u500d\uff1a1000\u6bd4\u7279\u6570\u636e\u9700\u8981250\u4e2a\u5b57\u7b26\uff08\u5373 250*8=2000 \u6bd4\u7279\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff1aBase16\u4f7f\u7528\u4e24\u4e2aASCII\u5b57\u7b26\u53bb\u7f16\u7801\u539f\u6570\u636e\u4e2d\u7684\u4e00\u4e2a\u5b57\u8282\u6570\u636e\u3002 a s d f ASCII 97 115 100 102 hex 0x61 0x73 0x64 0x66 Base16 61 73 64 66","title":"Base16\u7b80\u4ecb"},{"location":"EncodeDecode/base16/#_1","text":"\u6ce8\u610f Base64\u3001Base32\u3001Base16\u7f16\u7801\u7684\u8bc6\u522b\u5173\u952e\uff1a Base64 : A-Z\u3001a-z\u30010-9\u3001+\u3001/\u4ee5\u53ca\u5c0f\u4e8e\u7b49\u4e8e\u4e24\u4e2a\u7b49\u53f7 Base32 : A-Z\u30012-7\u4ee5\u53ca\u8865\u4f4d\u7684\u7b49\u53f7 Base16 : 0-9\u3001A-F","title":"\u8bc6\u522b\u7f16\u7801\u65b9\u5f0f"},{"location":"EncodeDecode/base16/#_2","text":"","title":"\u4f8b\u9898"},{"location":"EncodeDecode/base16/#_3","text":"\u4f8b\u9898 \u8bf7\u89e3\u7801\u4ee5\u4e0b\u5b57\u7b26\u4e32: R1pDVE1NWlhHUTNETU4yQ0dZWkRNTUpYR00zREtNWldHTTJES1JSV0dJM0RDTlpUR1kyVEdNWlRHSTJVTU5SUkdaQ1RNTkJWSVkzREVOUlJHNFpUTU5KVEdFWlRNTjJF \u9996\u5148\u5c1d\u8bd5Base64\u89e3\u7801\uff08\u56e0\u4e3a\u7f16\u7801\u540e\u7684\u6570\u636e\u6709\u5927\u5c0f\u5199\u4e4b\u5206\uff09 Base64\u89e3\u7801\uff1aGZCTMMZXGQ3DMN2CGYZDMMJXGM3DKMZWGM2DKRRWGI3DCNZTGY2TGMZTGI2UMNRRGZCTMNBVIY3DENRRG4ZTMNJTGEZTMN2E \u6211\u4eec\u518d\u5bf9\u89e3\u7801\u540e\u7684\u6570\u636e\u4f7f\u7528Base32\u89e3\u7801\uff08\u56e0\u4e3a\u7f16\u7801\u540e\u7684\u6570\u636e\u53ea\u6709\u5927\u5199\u5b57\u6bcd\u548c\u6570\u5b57\uff09 Base32\u89e3\u7801\uff1a6E6374667B6261736536345F6261736533325F616E645F6261736531367D \u518d\u4f7f\u7528Base16\u89e3\u7801\u5373\u53ef\uff08\u56e0\u4e3a\u7f16\u7801\u540e\u7684\u6570\u636e\u53ea\u67090-9\u3001A-F\uff09 Base16\u89e3\u7801\uff1anctf{base64_base32_and_base16}nctf{base64_base32_and_base16}","title":"\u6df7\u5408\u7f16\u7801"},{"location":"EncodeDecode/base16/#_4","text":"\u4f8b\u9898 \u8bf7\u89e3\u7801\u4ee5\u4e0b\u5b57\u7b26\u4e32: GM2DINJTGUZTIMZUGM4TGNZUGEZTINBUGM2TGNBTGUZTEMZUGMZDGNBUGUZTIMZUGM2DGOJTGMZTCMZUGQ2TGNRUGEZTKMZRGMZTGMJTGQ2DKMZXGQYTGNJTGEZTGMZRGM2DINBTGY2DCMZVGM2TGNZUGEZTINBVGM3DIMRTGQ2DIMZTGMYTGNBUGUZTMNBRGM2TGMRTGQZTEMZUGQ2TGNJTGQZTKMZZGMZTGMJTGQ2DKMZUGM2DGNJTGIZTIMZSGM2DINJTGQZTIMZVGM2TGMZTGEZTINBVGM2DGNBTGUZTKMZTGMYTGNBUGQZTONBRGM2TGNJTGMZTAMZUGQ2DGNZUGEZTKMZVGMZTGMRTGQ2DKMZWGQZDGNBTHEZTGMZSGM2DINJTGQZTIMZVGM2TGMZTGIZTINBVGM2DGNJTGUZTCMZXGQYTGNBUGQZTKMZUGM2TGNJTG4ZTSMZUGQ2TGNBTGUZTIMZVGMZTGMJTGQ2DKMZUGM2DGNJTGUZTGMZSGM2DINJTG42DCMZUGMYTGMZTGEZTINBVGM3DIMJTGUZTKMZXGQYTGNBUGUZTKMZUGM2TGNJTGMZTCMZUGQ2TGNJTGQZTMMZTGMZTGNJTGQ2DKMZVGM2DGNBTHEZTGMZRGM2DINJTGUZTIMZVGM4TGMZTGAZTINBVGM2DGNJTGUZTSMZTGMYTGNBUGQZTKMZUGM2DINBTG4ZTOMZUGQ2TGNBTGUZTIMZVGMZTGMBTGQ2DMMZUGM2DGNJTGUZTGMZRGM2DINJTGY2DEMZUGM4TGMZTGAZTKMZRGM2TGNBTGUZTCMZTGMYTGNBUGUZTKMZUGM2DINBTGMZTCMZUGQ2TGNJTGQZTINBUGMZTGMJTGQ2DKMZUGM2DGNBUGQZTGMZRGM2DINJTGY2DCMZVGM2TGMZTGEZTINBVGM3DIMJTGQ2DIMZXGQYTGNBUGQZTIMZUGM2TGMRTGQZTKMZUGQ2TGNRUGIZTINBUGMZTGMJTGQ2DIMZWGQYTGNJTGIZTIMZSGM2DINJTGUZTIMZVGMYTGMZTGEZTINBVGM3DIMJTGYZTGMZXGM3TGNBUGUZTKMZUGM2TGMJTGMZTCMZUGQ2DGNRUGEZTINBUGM3TGOBTGQ2DKMZUGM2TGNBTGUZTGMZQGM2DINBTG42DCMZVGM2TGNZTHEZTINBVGM2DGNBTGUZTKMZTGMZDGNJTGEZTONBRGM2TGNJTG4ZTSMZUGQ2TGNJTGQZTKMZVGMZTGMRTGUZTCMZXGQYTGNJTGUZTGMZSGM2DINJTGQZTIMZWGM3TGMZTGEZTINBVGM3TIMJTGUZTKMZTGMYDGNBUGUZTIMZVGM2DGNJTGMZTAMZUGQ2TGNRUGEZTKMZVGM3TGOJTGQ2DIMZXGQYTGNBTGEZTONBRGM2DINJTGUZTIMZVGMZDGNBTGMZTINBVGM2TGNBTGUZTSMZTGMYTGNBUGUZTKMZUGM2TGOJTGMZTAMZUGQ2TGNJTGQZTIMZZGMZTGMBTGUZTEMZVGM2DGNJTGEZTGMZSGM2DINJTGUZTIMZUGM4TGMZTGAZTKMZRGM3TIMJTGUZTKMZTGMYDGNBUGUZTMNBSGM2DINBTGMZTGMZUGQ2DGNBTGQZTKMZVGMZTGMZTGQ2DKMZVGM2DGNBTHEZTONBRGM2DINBTGQZTIMZUGQ2DGNZTG4ZTINBVGM3TIMJTGY2DEMZTGMYTGNBUGQZTMNBRGM2TGMJTGMZTCMZUGQ2TGNZUGEZTKMZRGMZTGMBTGUZTEMZWGQYTGNJTGUZTOMZYGM2DINBTG42DCMZUGMYTGMZTGAZTKMZSGM2TGNBTGUZTCMZTGM2DGNBUGUZTKMZUGM2TGNJTGMZTCMZUGQ2TGNRUGEZTMMZTGM3TGNZTGQ2DKMZUGM2DGNJTGUZTGMZRGM2DINBTG42DCMZVGM2TGMZTGEZTINBUGM3TIMJTGY2DEMZTGMYDGNBUGQZTONBRGM2TGNJTGMZTEMZUGQ2TGNJTGQZTKMZVGMZTGMRTGQ2DKMZUGM2DGNJTGYZTIMZSGM2DINJTGQZTKMZVGMYTGMZTGIZTKMZRGM3DIMJTGUZTKMZTGMZDGNBUGUZTIMZVGM2DGNJTGMZTCMZUGQ2TGNBTGQZTKNBRGM2DGMZTGQ2DKMZXGQYTGNBTGEZTGMZRGM2DINJTG42DCMZVGM2TGNZTHEZTINBUGM3TIMJTGQZTKMZTGMYDGNBUGUZTMNBRGM2TGOJTG4ZTQMZUGQ2TGNJTGQZTKMZZGMZTGMBTGQ2DKMZVGM2DGNRTGMZTGMZQGM2DINJTGUZTIMZUGMYTGMZTGEZTINBUGM2TGNBTGU2DCMZUGM2DGNBUGUZTKMZUGM2TGOJTGMZTAMZUGQ3DGNBTGQZTKMZSGM2DGNRTGQ2DKMZUGM2DGNJTGEZTGMZQGM2TGMJTGUZTIMZVGMYTGMZTGEZTINBVGM2TGNBTGUZTKMZXGQYTGNBUGQZTIMZUGM2DINBTGMZTCMZUGQ2TGNBTGUZTINBUGMZTGMJTGQ2DIMZVGM2DGNJUGEZTIMZTGM2DINJTGY2DCMZVGMYTGMZTGEZTINBUGM3DIMJTGUZTEMZUGM2TGNBUGUZTMNBSGM2DINBTGMZTCMZUGQ2DGNRUGEZTKMZSGM2DGNBTGQ2DKMZVGM2DGNJTGEZTONBRGM2DINBTGQZTIMZWGMZTGNZTG4ZTINBVGM2TGNBTGYZTGMZTGMYTGNBUGQZTMNBRGM3DGNBTGQZTEMZUGQ2TGNJTGQZTIMZVGMZTGMZTGQ2DMMZVGM2DGNJTGUZTOMZZGM2DINJTGUZTIMZVGM2TGMZTGEZTINBVGM3DIMJTGUZTEMZUGM3TGNBUGUZTKMZUGM2DGNJTG42DCMZUGQ2DGNBTGQZTKMZWGM2DGMRTGQ2DKMZUGM2DGNRTG4ZTGMZRGM2DINJTGUZTIMZVGQYTGNBTGMZTINBVGM2DGNJTGQZTKMZTGMYDGNBUGUZTKMZUGM2TGNJTG42DCMZUGQ2DGNZUGEZTIMZVGMZTGMBTGQ2DKMZWGQYTGNJTGIZTIMZTGM2DINJTGUZTIMZVGM4TGMZTGEZTINBVGM2TGNBTGU2DCMZUGM2DGNBUGUZTIMZUGM2TGOJTGMZTAMZVGMZDGNBTGQZTKNBRGM2DGNBTGQ2DKMZVGM2DGNBTHEZTGMZQGM2TGMJTG42DCMZVGM2TGMZTGAZTINBVGM3DIMRTGQZTSMZTGMYDGNJTGIZTKMZUGM2TGMJTGMZTEMZUGQ2TGNJTGQZTIMZZGM3TIMJTGQ2DIMZVGM2DGNJTGIZTIMZSGM2DINJTGQZTIMZVGMYTGMZTGEZTINBVGM3DIMJTGUZTCMZTGMYTGNBUGUZTONBRGM2TGMJTGMZTAMZVGMZDGNJTGQZTKMZVGMZTGMZTGQ2DKMZWGQZDGNBUGQZTGMZRGM2TGMJTGUZTIMZVGMZDGNBTGIZTINBVGM2TGNBTGQZTSMZTGMYTGNBUGUZTIMZUGM2TGMRTGQZTEMZUGQ2TGNBTGQZTKMZZGMZTGMJTGQ2DIMZWGQYTGNJTGUZTGMZRGM2DINBTG42DCMZVGM2TGMZTGAZTKMZRGM3DIMJTGUZTKMZTGMYTGNBUGQZTONBRGM2DGMJTGMZTEMZUGQ2TGNBTGQZTKMZVGM3TGOJTGQ2DKMZVGM2DGNRTGMZTGMZSGM2TGMJTGY2DCMZVGM2TGNZTHEZTINBVGM2DGNJTGQZTKMZTGMYTGNBUGUZTIMZUGM2TIMJTGQZTGMZUGQ2TGNZUGEZTIMZRGMZTGMJTGQ2DKMZVGM2DGNJTGUZTOMZZGM2DINBTG42DCMZUGM2TGMZTGIZTKMZRGM3DIMJTGYZTGMZTGM2TGNBUGUZTKMZUGM2TGOJTGMZTAMZUGQ2TGNJTGQZTKNBRGM2DGNBTGQ2DKMZUGM2TGNJTHEZTGMZRGM2DINBTG42DCMZVGQYTGNBTGQZTINBVGM2TGNBTGQZTSMZTGMYDGNBUGYZTIMZUGM2TGNJTGMZTEMZUGQ2TGNJTGQZTKMZRGMZTGMBTGUZTCMZVGM2DGNJTGEZTGMZRGM2DINJTGUZTIMZUGQ2DGMZTGEZTINBVGM3DIMJTGUZTCMZTGMZDGNBUGUZTKMZUGM2DINBTGMZTCMZUGQ2TGNRUGEZTKNBRGM2DGMZTGQ2DKMZWGQYTGNJTGEZTGMZQGM2TGMJTGUZTIMZVGMZDGNBTGUZTINBVGM3DIMRTGQZTSMZTGMYTGNBUGQZTMNBRGM2TGNJTG4ZTOMZUGQ2TGNJTGQZTKMZRGMZTGMRTGUZTCMZWGQYTGNRTGMZTOMZXGM2DINJTGUZTIMZWGMZTGMZTGEZTINBUGM3DIMJTGQ2DIMZXGM3TGNBUGQZTONBRGM2DGMJTGMZTGMZUGQ3DGNJTGQZTKMZVGM3TGOJTGQ2DKMZUGM2DGNJTGUZTGMZTGM2DINJTGQZTIMZVGMZDGNBTGYZTINBVGM2TGNBTGQ2DIMZTGMZDGNJTGEZTONBRGM2TGNRTGQZTEMZUGQ2TGNBTGUZTIMZVGMZTGMJTGQ2DIMZWGQYTGNJTGUZTGMZQGM2DINJTGQZTKMZUGM2TGMZTGEZTINBVGM2TGNBTGUZTKMZTGMYTGNBUGUZTKMZUGM2TGNJTG42DCMZUGQ2TGNJTGQZTKMZRGMZTGMBTGQ2DKMZVGM2DGNBTGUZTGMZSGM2TGMJTGY2DCMZVGM4TGMZTGAZTINBVGM2TGNBTGUZTSMZTGMYDGNJTGIZTIMZUGM2DINBTG4ZTOMZUGQ2TGNJTGQZTIMZZGMZTGMBTGUZTCMZVGM2DGNJTGUZTGMZRGM2DINJTGUZTIMZVGM4TGMZTGMZTINBUGM2DGNBTGUZTKMZTGMZDGNBUGUZTKMZUGM2DGOJTG42DCMZUGQ2DGNJTGQZTKNBRGM2DGMZTGQ2DKMZXGQYTGNRUGIZTGMZRGM2DINJTGY2DCMZVGMYTGMZTGEZTINBVGM2DGNJTGUZTKMZTGMYDGNJTGIZTMNBRGM2TGNJTG42DCMZUGQ2TGNRUGIZTINBUGMZTGMBTGUZTEMZVGM2DGNJTGEZTGMZUGM2DINJTGUZTIMZVGMYTGMZTGEZTINBVGM3DIMJTGYZTGMZXGM3TGNBUGUZTIMZUGM2TGNJTGMZTCMZUGQ2DGNZUGEZTKMZVGMZTGMJTGQ2DIMZXGQYTGNRUGIZTGMZQGM2DINBTG42DCMZVGM2TGMZTGIZTINBVGM2TGNBTGUZTKMZTGMZDGNBUGQZTONBRGM2DINBTG4ZTOMZUGQ2TGNBTGUZTKMZRGMZTGMRTGUZTCMZWGQYTGNJTGUZTGMZSGM2DINJTGQZTKMZUGM2TGMZTGEZTINBVGM2DGNBTGU2DCMZUGMZTGNBUGUZTONBRGM2TGMJTGMZTAMZUGQ2DGNZUGEZTKMZVGM3TGOJTGQ2DIMZXGQYTGNBTGUZTGMZRGM2DINJTGUZTIMZWGMZTGMZTGUZTINBVGM2TGNBTGUZTSMZTGMYDGNBUGUZTKMZUGM2TIMJTGQZTIMZUGQ2TGNJTGQZTIMZZGMZTGMJTGQ2DKMZVGM2DGNJUGEZTIMZUGM2DINJTGUZTKMZUGM2TGMZTGAZTINBWGM2DGNBTGUZTKMZTGMYTGNBUGUZTKMZUGM2TGMJTGMZTAMZVGMYTGNJTGQZTKMZRGMZTGMRTGQ2DKMZVGM2DGNBTHEZTGMZRGM2DINJTGUZTIMZUGQ2DGMZTGEZTINBVGM2DGNJTGQZTSMZTGMYTGNBUGUZTONBRGM2TGMJTGMZTCMZUGQ2TGNRUGEZTKMZRGMZTGMJTGQ2DIMZWGQYTGNJTGIZTIMZVGM2DINBTG42DCMZUGM2TGMZTGEZTINBUGM3DIMJTGUZTEMZUGM2DGNBUGUZTKMZUGM2TGNJTGMZTCMZUGQ2TGNJTGQZTMMZTGM3TGNZTGQ2DKMZVGM2DGNJTHEZTGMZRGM2DINBTG42DCMZVGMYTGMZTGEZTINBVGM2TGNBTGUZTKMZTGMZTGNBUGYZTKMZUGM2TGNJTGMZTEMZUGQ2TGNBTGQZTKMZVGMZTGMRTGUZTCMZXGQYTGNJTGIZTIMZWGM2DINJTGUZTIMZWGMZTGMZTGIZTKMZRGM3TIMJTGUZTEMZUGM3DGNBUGUZTIMZUGM3DGNZTGMZTCMZUGQ2TGNRUGEZTKMZVGMZTGMRTGQ2DKMZWGQZDGNBUGQZTGMZQGM2DINJTGUZTIMZVGM2TGNZUGEZTINBVGM2TGNBTGUZTSMZTGMYDGNBUGUZTMNBRGM2TGMRTGQZTGMZUGQ2TGNJTGQZTKMZZGMZTGMBTGQ2DKMZVGM2DGNJTHEZTGMZQGM2DINJTGUZTIMZVGM4TGMZTGAZTKMZSGM2DGNBTGU2DCMZUGMZTGNBUGUZTKMZUGM2DGOJTGMZTCMZUGQ2DGNRUGEZTKMZVGMZTGMBTGQ2DKMZWGQZDGNBTHEZTGMZTGM2DINBTGQZTIMZVGM2TGMZTGMZTINBVGM2TGNBTGQZTSMZXGQYTGNBUGQZTIMZUGM2DINBTGMZTCMZUGQ2TGNBTGQZTKMZRGMZTGMJTGQ2DIMZWGQYTGNJTGEZTGMZRGM2DINJTGY2DCMZVGMYTGMZTGEZTINBUGM3TIMJTGUZTKMZXGM4DGNBUGUZTMNBSGM2DINBTGMZTCMZUGQ2DGNRUGEZTKMZSGM2DGMRTGQ2DKMZVGM2DGNJTGUZTGMZRGM2DINJTGY2DCMZWGMZTGNZTG4ZTINBVGM2TGNBTGUZTSMZTGMYTGNBUGQZTONBRGM2TGNJTGMZTCMZUGQ2DGNZUGEZTIMZRGMZTGMZTGQ2DMMZVGM2DGNJTGUZTOMZZGM2DINJTGUZTIMZVGM2TGMZTGIZTINBVGM2DGNBTGUZTEMZUGM3TGNBUGUZTKMZUGM2DGNJTG42DCMZUGQ2DGNBTGQZTKMZRGMZTGMJTGQ2DIMZXGQYTGNRUGIZTGMZRGM2DINBTGQZTIMZVGM2TGMZTGAZTINBUGM3TIMJTGQZTCMZXGQYTGNBUGYZTKMZRGMZTINBTGM2DI=== \u89e3\u7801\u811a\u672c: import base64 fr = open ( subject.txt ) string = fr . readline () fr . close () def deCodeBase ( string ): try : string = base64 . b16decode ( string ) return deCodeBase ( string ) except : try : string = base64 . b32decode ( string ) return deCodeBase ( string ) except : try : string = base64 . b64decode ( string ) return deCodeBase ( string ) except : return string print deCodeBase ( string )","title":"\u5faa\u73af\u7f16\u7801"},{"location":"EncodeDecode/base32/","text":"Base32\u7b80\u4ecb Base32\u7f16\u7801\u4f7f\u752832\u4e2a\u53ef\u6253\u5370\u5b57\u7b26(\u5b57\u6bcdA-Z\u3001\u6570\u5b572-7)\u5bf9\u4efb\u610f\u5b57\u8282\u6570\u636e\u8fdb\u884c\u7f16\u7801\u7684\u65b9\u6848\uff0c\u7f16\u7801\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u5e76\u6392\u9664\u4e86\u5bb9\u6613\u6df7\u6dc6\u7684\u5b57\u7b26\u4e32\u3002 \u7531\u4e8e\u6570\u636e\u7684\u4e8c\u8fdb\u5236\u4f20\u8f93\u662f\u6309\u71678\u6bd4\u7279\u4e00\u7ec4\u8fdb\u884c\u7684\uff0c\u56e0\u6b64Base32\u6309\u71675\u6bd4\u7279\u5207\u5206\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u6240\u4ee5\u6570\u636e\u5fc5\u987b\u662f40(5\u548c8\u7684\u6700\u5c0f\u516c\u500d\u6570)\u6bd4\u7279\u7684\u500d\u6570\u3002 \u6570\u503c \u5b57\u7b26 \u6570\u503c \u5b57\u7b26 \u6570\u503c \u5b57\u7b26 \u6570\u503c \u5b57\u7b26 0 A 8 I 16 Q 24 Y 1 B 9 J 17 R 25 Z 2 C 10 K 18 S 26 2 3 D 11 L 19 T 27 3 4 E 12 M 20 U 28 4 5 F 13 N 21 V 29 5 6 G 14 O 22 W 30 6 7 H 15 P 23 X 31 7 \u7f16\u7801 \u89e3\u7801 \u65b9\u6cd51. \u9996\u5148\u5224\u65ad\u957f\u5ea6\u662f\u5426\u4e3a4\u7684\u500d\u6570\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u68c0\u67e5\u5b57\u7b26\u4e32\u5c3e\u90e8\u6709\u51e0\u4e2a\u7b49\u53f7\uff0c\u5220\u9664\u7b49\u53f7\u540e\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u4e8c\u8fdb\u5236\u3001\u518d\u5220\u9664\u5c3e\u90e8 \u7b49\u53f7\u6570\u91cf*2\u4e2a\u6bd4\u7279 \u540e\u89e3\u7801\u3002 \u5185\u7f6e\u5e93\u51fd\u6570\u89e3\u7801base32 import base64 string = Man print base64 . b32encode ( string ) string = JVQW4=== print base64 . b32decode ( string ) \u65b9\u6cd52. \u9996\u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff0c\u4ece\u524d\u81f3\u540e\u6bcf8\u4e2a\u4e8c\u8fdb\u5236\u8fdb\u884cchr()\uff0c\u76f4\u5230\u4e0d\u8db38\u4f4d\u3002 \u81ea\u5b9a\u4e49\u7a0b\u5e8f\u89e3\u7801base32 \u63d0\u793a \u4f7f\u7528\u672c\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49base32\u7f16\u7801\u8868\u3001\u53ef\u4ee5\u5ffd\u7565base32\u4e2d\u7684\u7b49\u53f7\u800c\u4e0d\u5f71\u54cd\u6b63\u5e38\u89e3\u7801\u3002 \u8bf7\u6ce8\u610f\uff1a\u4ee5\u540e\u5728\u7a0b\u5e8f\u4e2d\u5f15\u7528NHbase32\uff0c\u5747\u6307\u7684\u662f\u8be5\u6587\u4ef6\u3002 ### ### FileName:NHbase32.py ### Date:2018-08-06 ### Time:12:33 GMT ### Author:nianhua ### class base32 : def __init__ ( self , alphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZ234567 ): self . alphabet = alphabet def _EnInsideManage ( self , strlist ): strflag = temp = ord ( strlist [ 0 ]) 3 strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 0 ]) 7 ) 2 ) | ( ord ( strlist [ 1 ]) 6 ) strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 1 ]) 62 ) 1 ) strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 1 ]) 1 ) 4 ) | ( ord ( strlist [ 2 ]) 4 ) strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 2 ]) 15 ) 1 ) | ( ord ( strlist [ 3 ]) 7 ) strflag += self . alphabet [ temp ] temp = ( ord ( strlist [ 3 ]) 124 ) 2 strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 3 ]) 3 ) 3 ) | (( ord ( strlist [ 4 ]) 224 ) 5 ) strflag += self . alphabet [ temp ] temp = ord ( strlist [ 4 ]) 31 strflag += self . alphabet [ temp ] return strflag def enbase32 ( self , charString ): encode = for i in range ( len ( charString ) // 5 ): encode += self . _EnInsideManage ( charString [ i * 5 : i * 5 + 5 ]) if len ( charString ) % 5 != 0 : if len ( charString ) % 5 == 1 : encode += self . _EnInsideManage ( charString [ - 1 :] + chr ( 0 ) + chr ( 0 ) + chr ( 0 ) + chr ( 0 ))[: 2 ] + ====== if len ( charString ) % 5 == 2 : encode += self . _EnInsideManage ( charString [ - 2 :] + chr ( 0 ) + chr ( 0 ) + chr ( 0 ))[: 4 ] + ==== if len ( charString ) % 5 == 3 : encode += self . _EnInsideManage ( charString [ - 3 :] + chr ( 0 ) + chr ( 0 ))[: 5 ] + === if len ( charString ) % 5 == 4 : encode += self . _EnInsideManage ( charString [ - 4 :] + chr ( 0 ))[: 7 ] + = return encode def _TenToBin ( self , tenum ): binstr = for i in range ( 4 , - 1 , - 1 ): if 1 == ( tenum // ( 2 ** i )): binstr += 1 tenum = tenum % ( 2 ** i ) else : binstr += 0 return binstr def _BinToStr ( self , strbin ): Turn the binary string to a ASCII string strten = for i in range ( len ( strbin ) // 8 ): num = 0 test = strbin [ i * 8 : i * 8 + 8 ] for j in range ( 8 ): num += int ( test [ j ]) * ( 2 ** ( 7 - j )) strten += chr ( num ) return strten def debase32 ( self , ciphertext ): binstr = for i in ciphertext : binstr += self . _TenToBin ( self . alphabet . find ( i )) return ( self . _BinToStr ( binstr )) def main (): newobj = base32 ( 1234567890abcefghijklmnoprstuvwx ) print ( newobj . enbase32 ( 1233123 )) print ( newobj . debase32 ( newobj . enbase32 ( 1233123 ))) if __main__ == __name__ : main () \u6269\u5c55 Base32\u6bd4Base64\u591a\u5360\u7528\u5927\u7ea620%\u7684\u7a7a\u95f4\uff0c\u56e0\u4e3aBase32\u4f7f\u75288\u4e2aASCII\u5b57\u7b26\u53bb\u7f16\u7801\u539f\u6570\u636e\u4e2d\u76845\u4e2a\u5b57\u8282\u6570\u636e\uff0c\u800cBase64\u662f\u4f7f\u75284\u4e2aASCII\u5b57\u7b26\u53bb\u7f16\u7801\u539f\u6570\u636e\u4e2d3\u4e2a\u5b57\u8282\u3002 \u4f8b\u9898 \u4e0d\u533a\u5206\u5927\u5c0f\u5199 \u4f8b\u9898 \u8bf7\u89e3\u7801\u8fd9\u4e32\u5b57\u7b26\u4e32\uff1aEbqXgzDgGeZDgnA= \u5982\u679c\u76f4\u63a5\u4f7f\u7528\u5e93\u51fd\u6570\u89e3\u5bc6\uff0c\u5982\uff1a import base64 string = EbqXgzDgGeZDgnA= print base64 . b32decode ( string ) \u7a0b\u5e8f\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\uff0c Base32\u4ea6\u53ef\u4ee5\u66f4\u6362\u7f16\u7801\u8868\uff0c\u8fbe\u5230\u4fdd\u5bc6\u7684\u6548\u679c\uff0c\u89e3\u51b3\u65b9\u6848\u540cBase64 \u4f7f\u7528\u672c\u9879\u76ee\u4e2d\u7684 Base32\u7a0b\u5e8f \u53ef\u81ea\u5b9a\u4e49base32\u7f16\u7801\u8868\u3002","title":"Base32\u7f16\u7801"},{"location":"EncodeDecode/base32/#base32","text":"Base32\u7f16\u7801\u4f7f\u752832\u4e2a\u53ef\u6253\u5370\u5b57\u7b26(\u5b57\u6bcdA-Z\u3001\u6570\u5b572-7)\u5bf9\u4efb\u610f\u5b57\u8282\u6570\u636e\u8fdb\u884c\u7f16\u7801\u7684\u65b9\u6848\uff0c\u7f16\u7801\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u5e76\u6392\u9664\u4e86\u5bb9\u6613\u6df7\u6dc6\u7684\u5b57\u7b26\u4e32\u3002 \u7531\u4e8e\u6570\u636e\u7684\u4e8c\u8fdb\u5236\u4f20\u8f93\u662f\u6309\u71678\u6bd4\u7279\u4e00\u7ec4\u8fdb\u884c\u7684\uff0c\u56e0\u6b64Base32\u6309\u71675\u6bd4\u7279\u5207\u5206\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u6240\u4ee5\u6570\u636e\u5fc5\u987b\u662f40(5\u548c8\u7684\u6700\u5c0f\u516c\u500d\u6570)\u6bd4\u7279\u7684\u500d\u6570\u3002 \u6570\u503c \u5b57\u7b26 \u6570\u503c \u5b57\u7b26 \u6570\u503c \u5b57\u7b26 \u6570\u503c \u5b57\u7b26 0 A 8 I 16 Q 24 Y 1 B 9 J 17 R 25 Z 2 C 10 K 18 S 26 2 3 D 11 L 19 T 27 3 4 E 12 M 20 U 28 4 5 F 13 N 21 V 29 5 6 G 14 O 22 W 30 6 7 H 15 P 23 X 31 7","title":"Base32\u7b80\u4ecb"},{"location":"EncodeDecode/base32/#_1","text":"","title":"\u7f16\u7801"},{"location":"EncodeDecode/base32/#_2","text":"\u65b9\u6cd51. \u9996\u5148\u5224\u65ad\u957f\u5ea6\u662f\u5426\u4e3a4\u7684\u500d\u6570\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u68c0\u67e5\u5b57\u7b26\u4e32\u5c3e\u90e8\u6709\u51e0\u4e2a\u7b49\u53f7\uff0c\u5220\u9664\u7b49\u53f7\u540e\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u4e8c\u8fdb\u5236\u3001\u518d\u5220\u9664\u5c3e\u90e8 \u7b49\u53f7\u6570\u91cf*2\u4e2a\u6bd4\u7279 \u540e\u89e3\u7801\u3002","title":"\u89e3\u7801"},{"location":"EncodeDecode/base32/#base32_1","text":"import base64 string = Man print base64 . b32encode ( string ) string = JVQW4=== print base64 . b32decode ( string ) \u65b9\u6cd52. \u9996\u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff0c\u4ece\u524d\u81f3\u540e\u6bcf8\u4e2a\u4e8c\u8fdb\u5236\u8fdb\u884cchr()\uff0c\u76f4\u5230\u4e0d\u8db38\u4f4d\u3002","title":"\u5185\u7f6e\u5e93\u51fd\u6570\u89e3\u7801base32"},{"location":"EncodeDecode/base32/#base32_2","text":"\u63d0\u793a \u4f7f\u7528\u672c\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49base32\u7f16\u7801\u8868\u3001\u53ef\u4ee5\u5ffd\u7565base32\u4e2d\u7684\u7b49\u53f7\u800c\u4e0d\u5f71\u54cd\u6b63\u5e38\u89e3\u7801\u3002 \u8bf7\u6ce8\u610f\uff1a\u4ee5\u540e\u5728\u7a0b\u5e8f\u4e2d\u5f15\u7528NHbase32\uff0c\u5747\u6307\u7684\u662f\u8be5\u6587\u4ef6\u3002 ### ### FileName:NHbase32.py ### Date:2018-08-06 ### Time:12:33 GMT ### Author:nianhua ### class base32 : def __init__ ( self , alphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZ234567 ): self . alphabet = alphabet def _EnInsideManage ( self , strlist ): strflag = temp = ord ( strlist [ 0 ]) 3 strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 0 ]) 7 ) 2 ) | ( ord ( strlist [ 1 ]) 6 ) strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 1 ]) 62 ) 1 ) strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 1 ]) 1 ) 4 ) | ( ord ( strlist [ 2 ]) 4 ) strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 2 ]) 15 ) 1 ) | ( ord ( strlist [ 3 ]) 7 ) strflag += self . alphabet [ temp ] temp = ( ord ( strlist [ 3 ]) 124 ) 2 strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 3 ]) 3 ) 3 ) | (( ord ( strlist [ 4 ]) 224 ) 5 ) strflag += self . alphabet [ temp ] temp = ord ( strlist [ 4 ]) 31 strflag += self . alphabet [ temp ] return strflag def enbase32 ( self , charString ): encode = for i in range ( len ( charString ) // 5 ): encode += self . _EnInsideManage ( charString [ i * 5 : i * 5 + 5 ]) if len ( charString ) % 5 != 0 : if len ( charString ) % 5 == 1 : encode += self . _EnInsideManage ( charString [ - 1 :] + chr ( 0 ) + chr ( 0 ) + chr ( 0 ) + chr ( 0 ))[: 2 ] + ====== if len ( charString ) % 5 == 2 : encode += self . _EnInsideManage ( charString [ - 2 :] + chr ( 0 ) + chr ( 0 ) + chr ( 0 ))[: 4 ] + ==== if len ( charString ) % 5 == 3 : encode += self . _EnInsideManage ( charString [ - 3 :] + chr ( 0 ) + chr ( 0 ))[: 5 ] + === if len ( charString ) % 5 == 4 : encode += self . _EnInsideManage ( charString [ - 4 :] + chr ( 0 ))[: 7 ] + = return encode def _TenToBin ( self , tenum ): binstr = for i in range ( 4 , - 1 , - 1 ): if 1 == ( tenum // ( 2 ** i )): binstr += 1 tenum = tenum % ( 2 ** i ) else : binstr += 0 return binstr def _BinToStr ( self , strbin ): Turn the binary string to a ASCII string strten = for i in range ( len ( strbin ) // 8 ): num = 0 test = strbin [ i * 8 : i * 8 + 8 ] for j in range ( 8 ): num += int ( test [ j ]) * ( 2 ** ( 7 - j )) strten += chr ( num ) return strten def debase32 ( self , ciphertext ): binstr = for i in ciphertext : binstr += self . _TenToBin ( self . alphabet . find ( i )) return ( self . _BinToStr ( binstr )) def main (): newobj = base32 ( 1234567890abcefghijklmnoprstuvwx ) print ( newobj . enbase32 ( 1233123 )) print ( newobj . debase32 ( newobj . enbase32 ( 1233123 ))) if __main__ == __name__ : main ()","title":"\u81ea\u5b9a\u4e49\u7a0b\u5e8f\u89e3\u7801base32"},{"location":"EncodeDecode/base32/#_3","text":"Base32\u6bd4Base64\u591a\u5360\u7528\u5927\u7ea620%\u7684\u7a7a\u95f4\uff0c\u56e0\u4e3aBase32\u4f7f\u75288\u4e2aASCII\u5b57\u7b26\u53bb\u7f16\u7801\u539f\u6570\u636e\u4e2d\u76845\u4e2a\u5b57\u8282\u6570\u636e\uff0c\u800cBase64\u662f\u4f7f\u75284\u4e2aASCII\u5b57\u7b26\u53bb\u7f16\u7801\u539f\u6570\u636e\u4e2d3\u4e2a\u5b57\u8282\u3002","title":"\u6269\u5c55"},{"location":"EncodeDecode/base32/#_4","text":"","title":"\u4f8b\u9898"},{"location":"EncodeDecode/base32/#_5","text":"\u4f8b\u9898 \u8bf7\u89e3\u7801\u8fd9\u4e32\u5b57\u7b26\u4e32\uff1aEbqXgzDgGeZDgnA= \u5982\u679c\u76f4\u63a5\u4f7f\u7528\u5e93\u51fd\u6570\u89e3\u5bc6\uff0c\u5982\uff1a import base64 string = EbqXgzDgGeZDgnA= print base64 . b32decode ( string ) \u7a0b\u5e8f\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\uff0c Base32\u4ea6\u53ef\u4ee5\u66f4\u6362\u7f16\u7801\u8868\uff0c\u8fbe\u5230\u4fdd\u5bc6\u7684\u6548\u679c\uff0c\u89e3\u51b3\u65b9\u6848\u540cBase64 \u4f7f\u7528\u672c\u9879\u76ee\u4e2d\u7684 Base32\u7a0b\u5e8f \u53ef\u81ea\u5b9a\u4e49base32\u7f16\u7801\u8868\u3002","title":"\u4e0d\u533a\u5206\u5927\u5c0f\u5199"},{"location":"EncodeDecode/base64/","text":"Base64\u7b80\u4ecb Base64\u662f\u7f51\u7edc\u4e0a\u6700\u5e38\u89c1\u7684\u7528\u4e8e\u4f20\u8f938Bit\u5b57\u8282\u7801\u7684\u7f16\u7801\u65b9\u5f0f\u4e4b\u4e00\uff0cBase64\u5c31\u662f\u4e00\u79cd\u57fa\u4e8e64\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u6765\u8868\u793a\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u65b9\u6cd5\u3002 \u56e0\u4e3a2 6 = 64\uff0c\u6240\u4ee56\u4e2a\u6bd4\u7279\u4e3a\u4e00\u4e2a\u5355\u5143\uff0c\u5bf9\u5e94\u67d0\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u30023\u4e2a\u5b57\u7b26\u670924\u6bd4\u7279(3 * 8=24),\u5bf9\u5e944\u4e2aBase64\u5355\u5143\uff0c \u8fd9\u4e5f\u5c31\u662f\u610f\u5473\u77403\u4e2a\u5b57\u7b26\u5c06\u88ab4\u4e2aBase64\u5b57\u7b26\u8868\u793a \u4e0b\u8868\u4e3aBase64\u7684\u9ed8\u8ba4\u7f16\u7801\u8868 KEY VAL KEY VAL KEY VAL KEY VAL 0 A 16 Q 32 g 48 w 1 B 17 R 33 h 49 x 2 C 18 S 34 i 50 y 3 D 19 T 35 j 51 z 4 E 20 U 36 k 52 0 5 F 21 V 37 l 53 1 6 G 22 W 38 m 54 2 7 H 23 X 39 n 55 3 8 I 24 Y 40 o 56 4 9 J 25 Z 41 p 57 5 10 K 26 a 42 q 58 6 11 L 27 b 43 r 59 7 12 M 28 c 44 s 60 8 13 N 29 d 45 t 61 9 14 O 30 e 46 u 62 + 15 P 31 f 47 v 63 / \u7f16\u7801 \u9996\u5148\u6211\u4eec\u6765\u770b\u4e00\u4e0b\uff0c\u5982\u4f55\u4f7f\u7528Base64\u7f16\u7801\u4e00\u4e2aASCII\u5b57\u7b26\uff1a \u7f16\u7801\u7684\u5b57\u8282\u80fd\u591f\u88ab3\u6574\u9664 \u7f16\u7801\u7684\u5b57\u8282\u6570\u4e0d\u80fd\u88ab3\u6574\u9664 \u89e3\u7801 \u65b9\u6cd51. \u9996\u5148\u5224\u65ad\u957f\u5ea6\u662f\u5426\u4e3a4\u7684\u500d\u6570\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u68c0\u67e5\u5b57\u7b26\u4e32\u5c3e\u90e8\u6709\u51e0\u4e2a\u7b49\u53f7\uff0c\u5220\u9664\u7b49\u53f7\u540e\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u4e8c\u8fdb\u5236\u3001\u518d\u5220\u9664\u5c3e\u90e8 \u7b49\u53f7\u6570\u91cf*2\u4e2a\u6bd4\u7279 \u540e\u89e3\u7801\u3002 \u5185\u7f6e\u5e93\u51fd\u6570\u89e3\u7801base64 import base64 string = Man print base64 . b64encode ( string ) string = TWFu print base64 . b64decode ( string ) \u65b9\u6cd52. \u9996\u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff0c\u4ece\u524d\u81f3\u540e\u6bcf8\u4e2a\u4e8c\u8fdb\u5236\u8fdb\u884cchr()\uff0c\u76f4\u5230\u4e0d\u8db38\u4f4d\u3002 \u81ea\u5b9a\u4e49\u7a0b\u5e8f\u89e3\u7801base64 \u63d0\u793a \u4f7f\u7528\u672c\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49base64\u7f16\u7801\u8868\u3001\u53ef\u4ee5\u5ffd\u7565base64\u4e2d\u7684\u7b49\u53f7\u800c\u4e0d\u5f71\u54cd\u6b63\u5e38\u89e3\u7801\u3002 \u8bf7\u6ce8\u610f\uff1a\u4ee5\u540e\u5728\u7a0b\u5e8f\u4e2d\u5f15\u7528NHbase64\uff0c\u5747\u6307\u7684\u662f\u8be5\u6587\u4ef6\u3002 ### ### FileName:NHbase64.py ### Date:2018-08-07 ### Time:12:33 GMT ### Author:nianhua ### class base64 : #init function def __init__ ( self , alphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ ): self . alphabet = alphabet def _EnInsideManage ( self , strlist ): strflag = temp = ord ( strlist [ 0 ]) 2 strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 0 ]) 3 ) 4 ) | ( ord ( strlist [ 1 ]) 4 ) strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 1 ]) 15 ) 2 ) | ( ord ( strlist [ 2 ]) 6 ) strflag += self . alphabet [ temp ] temp = ( ord ( strlist [ 2 ]) 63 ) strflag += self . alphabet [ temp ] return strflag def enbase64 ( self , charString ): encode = for i in range ( len ( charString ) // 3 ): encode += self . _EnInsideManage ( charString [ i * 3 : i * 3 + 3 ]) if len ( charString ) % 3 != 0 : if len ( charString ) % 3 == 1 : encode += self . _EnInsideManage ( charString [ - 1 :] + chr ( 0 ) + chr ( 0 ))[: 2 ] + == if len ( charString ) % 3 == 2 : encode += self . _EnInsideManage ( charString [ - 2 :] + chr ( 0 ))[: 3 ] + = return encode def TenToBin ( self , tenum ): binstr = for i in range ( 5 , - 1 , - 1 ): if 1 == ( tenum // ( 2 ** i )): binstr += 1 tenum = tenum % ( 2 ** i ) else : binstr += 0 return binstr def BinToStr ( self , strbin ): Turn the binary string to a ASCII string strten = for i in range ( len ( strbin ) // 8 ): num = 0 test = strbin [ i * 8 : i * 8 + 8 ] for j in range ( 8 ): num += int ( test [ j ]) * ( 2 ** ( 7 - j )) strten += chr ( num ) return strten def debase64 ( self , base64string ): binstr = for i in base64string : binstr += self . TenToBin ( self . alphabet . find ( i )) return self . BinToStr ( binstr ) def main (): newobj = base64 ( qazwsxedcrfvtgbyhnujmikolpQAZWSXEDCRFVTGBYHNUJMIKOLP-|0987654321 ) print ( newobj . debase64 ( newobj . enbase64 ( nianhua ))) if __main__ == __name__ : main () \u6269\u5c55 \u5927\u591a\u6570\u7f16\u7801\u90fd\u662f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u7684\u8fc7\u7a0b\uff0c\u800cBase64\u7684\u7f16\u7801\u5219\u662f\u4ece\u4e8c\u8fdb\u5236\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u7684\u8fc7\u7a0b\u3002 Base64\u7f16\u7801\u4e3b\u8981\u7528\u5728\u4f20\u8f93\u3001\u5b58\u50a8\u3001\u8868\u793a\u4e8c\u8fdb\u5236\u7684\u8fc7\u7a0b/\u9886\u57df\uff0c\u4e0d\u80fd\u7b97\u52a0\u5bc6\u3002 \u4e2d\u6587\u6709\u591a\u79cd\u7f16\u7801(\u4f8b\u5982\uff1autf-8\u3001gb2312\u3001gbk...)\uff0c\u4f7f\u7528\u4e0d\u540c\u7f16\u7801\u540e\u5bf9\u5e94\u7684Base64\u7f16\u7801\u7684\u7ed3\u679c\u4e0d\u540c \u5b57\u7b26\u4e32 ---------- 0101...1011 ---------- VHW= ASCII\u7f16\u7801 Base64\u7f16\u7801 \u5b57\u7b26\u4e32 ---------- 0100...0010 ---------- MkL= GBK\u7f16\u7801 Base64\u7f16\u7801 \u4f8b\u9898 \u7b49\u53f7\u6570\u91cf\u9519\u8bef\u5bfc\u81f4\u65e0\u6cd5\u89e3\u7801 \u4f8b\u9898 \u8bf7\u89e3\u7801\u8fd9\u4e32\u5b57\u7b26\u4e32\uff1aYXNkZg \u5982\u679c\u6211\u4eec\u76f4\u63a5\u9002\u7528Python\u7a0b\u5e8f\u89e3\u7801\u7684\u8bdd\uff0c\u4f8b\u5982\uff1a import base64 string = YXNkZg print base64 . b64decode ( string ) \u7a0b\u5e8f\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c Incorrect padding \u3002\u63d0\u793a\u586b\u5145\u4e0d\u6b63\u786e\uff0c\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u8865\u9f50padding\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u672c\u9879\u76ee\u4e2d\u7684 Base64\u7a0b\u5e8f \u4f7f\u7528\u7b49\u53f7\u9690\u533f\u4fe1\u606f \u5047\u8bbe\u6211\u4eec\u60f3\u9690\u533f\u7684\u6570\u636e\u4e3a'C'\uff0c\u5219\u4e8c\u8fdb\u5236\u4e3a01100011\uff0c\u56e0\u4e3a\u4e00\u6b21\u53ea\u80fd\u9690\u533f4\u4e2a\u6bd4\u7279\uff0c\u56e0\u6b64\u9700\u8981\u4e24\u4e32base64. -- \u9ad8\u56db\u4f4d -- 0110 -- YXNkZm== -- \u4f4e\u56db\u4f4d -- 0011 -- YXNkZj== \u8003\u8651\u4e00\u4e0b\u7f16\u7801\u540e\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u7b49\u53f7\uff0c\u90a3\u80fd\u9690\u85cf\u591a\u5c11bit\u5462\uff1f \u4f8b\u9898 \u4f60\u80fd\u4ece\u8fd9\u4e9bbase64\u4e2d\u627e\u5230\u4ec0\u4e48\uff1f IiIiCs== YXV0aDogYmlnZ2VyLndpbmcKdmVyc2lvbjogdjEuMAr= ZnVuY3Rpb246IGN2ZS0yMDE5LTA3MDggUE9DCm== dXNhZ2U6Cs== bm90ZTogVVNlIHBvYyB0byB0ZXN0LCAzMzg5X2hvc3RzIGlzIGlwIGFkZHJlc3MgbGlzdCwwNzA4ZGV0ZWN0b3IuZXhlIGlzIHBvYwr= IiIiCg== aW1wb3J0IHJhbmRvbQr= aW1wb3J0IHN0cmluZwq= cD0iIi5qb2luKFtyYW5kb20uY2hvaWNlKHN0cmluZy5hc2NpaV9sZXR0ZXJzKSBmb3IgaSBpbiByYW5nZSg1KV0pCn== cSA9IiIuam9pbihbcmFuZG9tLmNob2ljZShzdHJpbmcuYXNjaWlfbGV0dGVycytzdHJpbmcuaGV4ZGlnaXRzKSBmb3IgaSBpbiByYW5nZSg2KV0pCv== cHJpbnQgKHApCm== cHJpbnQgKHEpCt== ZmxhZz0wCr== Y291bnQ9MAo= d2hpbGUgVHJ1ZToKICAgIHVzZXJuYW1lPWlucHV0KCJpbnB1dCB5b3VyIG5hbWUiKQo= ICAgIGlmIHVzZXJuYW1lID09IHA6Cq== ICAgICAgICB3aGlsZSBUcnVlOgp= ICAgICAgICAgICAgcGFzc3dkPWlucHV0KCJpbnB1dCB5b3VyIHBhc3N3b3JkIikKICAgICAgICAgICAgaWYgcGFzc3dkID09IHE6Cj== ICAgICAgICAgICAgICAgIHByaW50KCJiaW5nbyIpCi== ICAgICAgICAgICAgICAgIGJyZWFrCs== ICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGZsYWcrPTEKICAgICAgICAgICAgaWYgZmxhZyA9PSAzOgr= ICAgICAgICAgICAgICAgIGJyZWFrCj== ICAgIGVsc2U6Cp== ICAgICAgICBjb3VudCs9MQr= ICAgIGlmIGNvdW50ID09IDM6Cg== ICAgICAgICBicmVhawq= ICAgIHByaW50ICdJIGxpa2UgVGhpcyB3b3JkIScKICAgIHBhc3MgCv== ICAgIHByaW50ICdzYXkgaGVsbG8nCiAgIK== \u6b64\u5904\u6211\u4eec\u4f7f\u7528\u7a0b\u5e8f\u6765\u5206\u6790\u9690\u533f\u7684\u6570\u636e: import base64 string = IiIiCs==YXV0aDogYmlnZ2VyLndpbmcKdmVyc2lvbjogdjEuMAr=ZnVuY3Rpb246IGN2ZS0yMDE5LTA3MDggUE9DCm==dXNhZ2U6Cs==bm90ZTogVVNlIHBvYyB0byB0ZXN0LCAzMzg5X2hvc3RzIGlzIGlwIGFkZHJlc3MgbGlzdCwwNzA4ZGV0ZWN0b3IuZXhlIGlzIHBvYwr=IiIiCg==aW1wb3J0IHJhbmRvbQr=aW1wb3J0IHN0cmluZwq=cD0iIi5qb2luKFtyYW5kb20uY2hvaWNlKHN0cmluZy5hc2NpaV9sZXR0ZXJzKSBmb3IgaSBpbiByYW5nZSg1KV0pCn==cSA9IiIuam9pbihbcmFuZG9tLmNob2ljZShzdHJpbmcuYXNjaWlfbGV0dGVycytzdHJpbmcuaGV4ZGlnaXRzKSBmb3IgaSBpbiByYW5nZSg2KV0pCv==cHJpbnQgKHApCm==cHJpbnQgKHEpCt==ZmxhZz0wCr==Y291bnQ9MAo=d2hpbGUgVHJ1ZToKICAgIHVzZXJuYW1lPWlucHV0KCJpbnB1dCB5b3VyIG5hbWUiKQo=ICAgIGlmIHVzZXJuYW1lID09IHA6Cq==ICAgICAgICB3aGlsZSBUcnVlOgp=ICAgICAgICAgICAgcGFzc3dkPWlucHV0KCJpbnB1dCB5b3VyIHBhc3N3b3JkIikKICAgICAgICAgICAgaWYgcGFzc3dkID09IHE6Cj==ICAgICAgICAgICAgICAgIHByaW50KCJiaW5nbyIpCi==ICAgICAgICAgICAgICAgIGJyZWFrCs==ICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGZsYWcrPTEKICAgICAgICAgICAgaWYgZmxhZyA9PSAzOgr=ICAgICAgICAgICAgICAgIGJyZWFrCj==ICAgIGVsc2U6Cp==ICAgICAgICBjb3VudCs9MQr=ICAgIGlmIGNvdW50ID09IDM6Cg==ICAgICAgICBicmVhawq=ICAgIHByaW50ICdJIGxpa2UgVGhpcyB3b3JkIScKICAgIHBhc3MgCv==ICAgIHByaW50ICdzYXkgaGVsbG8nCiAgIK== alphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ newstring = for i in range ( len ( string ) - 1 , - 1 , - 1 ): try : if string [ i ] == = and string [ i + 1 ] != = : newstring += \\n newstring += string [ i ] except : newstring += string [ i ] newstring = newstring [:: - 1 ] newstring = newstring . split ( \\n ) flag = binstr = for i in newstring : number = 0 if i [ - 1 :] == = : i = i [: - 1 ] number += 1 if i [ - 1 :] == = : i = i [: - 1 ] number += 1 if number == 1 : pass binstr += {:06b} . format ( alphabet . find ( i [ - 1 :]))[ 4 :] if number == 2 : binstr += {:06b} . format ( alphabet . find ( i [ - 1 :]))[ 2 :] print binstr for i in range ( len ( binstr ) // 7 ): flag += chr ( int ( binstr [ 7 * i : 7 * i + 7 ], 2 )) print flag \u5bf9\u7f16\u7801\u8868\u8fdb\u884c\u53d8\u6362 \u5bf9\u4e8e\u66f4\u6362\u4e86\u7f16\u7801\u8868\u7684\u9898\u76ee\uff0c\u4e00\u822c\u53ef\u4ee5\u4f7f\u7528\u5df2\u77e5\u660e\u6587\u653b\u51fb\uff0c\u5c3d\u91cf\u8fd8\u539f\u51fa\u7f16\u7801\u8868\u3002 \u4f7f\u7528\u672c\u9879\u76ee\u4e2d\u7684 Base64\u7a0b\u5e8f \u53ef\u81ea\u5b9a\u4e49base64\u7f16\u7801\u8868\u3002 \u4f8b\u9898 \u8bf7\u89e3\u5bc6\u8fd9\u6bb5\u5bc6\u6587:FqsCFkiVDSWMWByZGSWZKqPUAPbRGdzb \u63d0\u793a\uff1a \u8fd9\u662f\u6cc4\u6f0f\u7684\u4e00\u6bb5\u660e\u6587: !QAZ@WSX#EDC$RFV%TGB^YHN UJM*IK (OL )P:?_{\"+}|`1qaz2wsx3edc4rfv5tgb6yhn7ujm8ik,9ol.0p;/-['=]\\The problem is that programs_width is a list. programs_width = list(). If none of these if statements if prog_width == '342' When you read an English book, you often come across new words. You might try to guess what the words mean from the words you know, but when you cannot guess the meanings of new words at all, what should you do? \u548c\u5bf9\u5e94\u7684\u5bc6\u6587: 8P51AN1SOhXByOy39596PVPOyg9LAOCE9MP+IUr9UfaeIgan+P0xRhbc8VibZ60sJA5xQwKfL3WMF6QgJqFjWSywDBFzG6lkKAriE6My/3MpH2laJ3up/PuwRPhJP6CM871dHj9uFAgXGSQXK6CCK21aJqbwJq5iJhbkGAygG21rJd1C86srJkTo871dHjKdDAhfSkKrF7ye83gXH6MfK2Xr/V19FV1oHjzM86bq87yeFSWM86Mq87WgDSyMHAPoK7QXGADXJ79pFhbkGAygG20bRU0wQfTd9d1SG6Po87MpKU1dFA5N865o84PoFjsrJjXXDqbpGdaXLAbh86bqK6Po86WpHAOXDAWdHkWf86zMKd1kHk9NJdlXAAbh86hrFjCg87ydLU1gHd1wKAPfJd1kG65g87yeFU1kHk9NJd1iFA5o86FdHjgXK6CM87KpJqyf87MpKU1yHqbk/21VKSTXKjCMHV1zHkOXDj5oHqbg86KhFSWf87yeFU1iFA5oGAzwJd1pFV1oFSJXKjbdF7QXDSTXDAsu/21kG65g87WeHkPuF21zHkOXF6vm \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7a0b\u5e8f\u6765\u5904\u7406\u8fd9\u9053\u9898\u76ee\uff1a from NHbase64 import * nvarry = [ 0 for i in range ( 64 )] binstr = string = !QAZ@WSX#EDC$RFV%TGB^YHN UJM*IK (OL )P:?_{ +}|`1qaz2wsx3edc4rfv5tgb6yhn7ujm8ik,9ol.0p;/-[ =]\\The problem is that programs_width is a list. programs_width = list(). If none of these if statements if prog_width == 342 When you read an English book, you often come across new words. You might try to guess what the words mean from the words you know, but when you cannot guess the meanings of new words at all, what should you do? basest = 8P51AN1SOhXByOy39596PVPOyg9LAOCE9MP+IUr9UfaeIgan+P0xRhbc8VibZ60sJA5xQwKfL3WMF6QgJqFjWSywDBFzG6lkKAriE6My/3MpH2laJ3up/PuwRPhJP6CM871dHj9uFAgXGSQXK6CCK21aJqbwJq5iJhbkGAygG21rJd1C86srJkTo871dHjKdDAhfSkKrF7ye83gXH6MfK2Xr/V19FV1oHjzM86bq87yeFSWM86Mq87WgDSyMHAPoK7QXGADXJ79pFhbkGAygG20bRU0wQfTd9d1SG6Po87MpKU1dFA5N865o84PoFjsrJjXXDqbpGdaXLAbh86bqK6Po86WpHAOXDAWdHkWf86zMKd1kHk9NJdlXAAbh86hrFjCg87ydLU1gHd1wKAPfJd1kG65g87yeFU1kHk9NJd1iFA5o86FdHjgXK6CM87KpJqyf87MpKU1yHqbk/21VKSTXKjCMHV1zHkOXDj5oHqbg86KhFSWf87yeFU1iFA5oGAzwJd1pFV1oFSJXKjbdF7QXDSTXDAsu/21kG65g87WeHkPuF21zHkOXF6vm for i in string : binstr += {:08b} . format ( ord ( i )) for i in range ( len ( binstr ) // 6 ): nvarry [ int ( binstr [ 6 * i : 6 * i + 6 ], 2 )] = basest [ i ] password = for i in nvarry : password += i newobj = base64 ( alphabet = password ) print ( newobj . debase64 ( FqsCFkiVDSWMWByZGSWZKqPUAPbRGdzb )) \u9996\u5148\u6211\u4eec\u901a\u8fc7\u660e\u6587\u548c\u5bc6\u6587\u7684\u5bf9\u5e94\uff0c\u4e00\u4e00 \u8ba1\u7b97\u51faBase64\u7684\u7f16\u7801\u89c4\u5219 \uff0c\u968f\u540e\u4f7f\u7528 NHbase64 \u6a21\u5757\uff0c\u624b\u52a8\u6307\u5b9a\u7f16\u7801\u8868\uff0c\u5bf9\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\u3002 \u63d0\u793a \u53e6\u4e00\u79cd\u601d\u8def\uff1a \u5728\u5f97\u51fa\u7f16\u7801\u8868\u4e4b\u540e\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u901a\u8fc7\u65b0\u65e7\u7f16\u7801\u8868\u6765\u5c06\u5bc6\u6587\u8f6c\u6362\u4e3a\u6b63\u5e38\u7684Base64\u7f16\u7801\u6570\u636e\u5462\uff1f","title":"Base64\u7f16\u7801"},{"location":"EncodeDecode/base64/#base64","text":"Base64\u662f\u7f51\u7edc\u4e0a\u6700\u5e38\u89c1\u7684\u7528\u4e8e\u4f20\u8f938Bit\u5b57\u8282\u7801\u7684\u7f16\u7801\u65b9\u5f0f\u4e4b\u4e00\uff0cBase64\u5c31\u662f\u4e00\u79cd\u57fa\u4e8e64\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u6765\u8868\u793a\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u65b9\u6cd5\u3002 \u56e0\u4e3a2 6 = 64\uff0c\u6240\u4ee56\u4e2a\u6bd4\u7279\u4e3a\u4e00\u4e2a\u5355\u5143\uff0c\u5bf9\u5e94\u67d0\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u30023\u4e2a\u5b57\u7b26\u670924\u6bd4\u7279(3 * 8=24),\u5bf9\u5e944\u4e2aBase64\u5355\u5143\uff0c \u8fd9\u4e5f\u5c31\u662f\u610f\u5473\u77403\u4e2a\u5b57\u7b26\u5c06\u88ab4\u4e2aBase64\u5b57\u7b26\u8868\u793a \u4e0b\u8868\u4e3aBase64\u7684\u9ed8\u8ba4\u7f16\u7801\u8868 KEY VAL KEY VAL KEY VAL KEY VAL 0 A 16 Q 32 g 48 w 1 B 17 R 33 h 49 x 2 C 18 S 34 i 50 y 3 D 19 T 35 j 51 z 4 E 20 U 36 k 52 0 5 F 21 V 37 l 53 1 6 G 22 W 38 m 54 2 7 H 23 X 39 n 55 3 8 I 24 Y 40 o 56 4 9 J 25 Z 41 p 57 5 10 K 26 a 42 q 58 6 11 L 27 b 43 r 59 7 12 M 28 c 44 s 60 8 13 N 29 d 45 t 61 9 14 O 30 e 46 u 62 + 15 P 31 f 47 v 63 /","title":"Base64\u7b80\u4ecb"},{"location":"EncodeDecode/base64/#_1","text":"\u9996\u5148\u6211\u4eec\u6765\u770b\u4e00\u4e0b\uff0c\u5982\u4f55\u4f7f\u7528Base64\u7f16\u7801\u4e00\u4e2aASCII\u5b57\u7b26\uff1a \u7f16\u7801\u7684\u5b57\u8282\u80fd\u591f\u88ab3\u6574\u9664 \u7f16\u7801\u7684\u5b57\u8282\u6570\u4e0d\u80fd\u88ab3\u6574\u9664","title":"\u7f16\u7801"},{"location":"EncodeDecode/base64/#_2","text":"\u65b9\u6cd51. \u9996\u5148\u5224\u65ad\u957f\u5ea6\u662f\u5426\u4e3a4\u7684\u500d\u6570\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u68c0\u67e5\u5b57\u7b26\u4e32\u5c3e\u90e8\u6709\u51e0\u4e2a\u7b49\u53f7\uff0c\u5220\u9664\u7b49\u53f7\u540e\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u4e8c\u8fdb\u5236\u3001\u518d\u5220\u9664\u5c3e\u90e8 \u7b49\u53f7\u6570\u91cf*2\u4e2a\u6bd4\u7279 \u540e\u89e3\u7801\u3002","title":"\u89e3\u7801"},{"location":"EncodeDecode/base64/#base64_1","text":"import base64 string = Man print base64 . b64encode ( string ) string = TWFu print base64 . b64decode ( string ) \u65b9\u6cd52. \u9996\u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff0c\u4ece\u524d\u81f3\u540e\u6bcf8\u4e2a\u4e8c\u8fdb\u5236\u8fdb\u884cchr()\uff0c\u76f4\u5230\u4e0d\u8db38\u4f4d\u3002","title":"\u5185\u7f6e\u5e93\u51fd\u6570\u89e3\u7801base64"},{"location":"EncodeDecode/base64/#base64_2","text":"\u63d0\u793a \u4f7f\u7528\u672c\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49base64\u7f16\u7801\u8868\u3001\u53ef\u4ee5\u5ffd\u7565base64\u4e2d\u7684\u7b49\u53f7\u800c\u4e0d\u5f71\u54cd\u6b63\u5e38\u89e3\u7801\u3002 \u8bf7\u6ce8\u610f\uff1a\u4ee5\u540e\u5728\u7a0b\u5e8f\u4e2d\u5f15\u7528NHbase64\uff0c\u5747\u6307\u7684\u662f\u8be5\u6587\u4ef6\u3002 ### ### FileName:NHbase64.py ### Date:2018-08-07 ### Time:12:33 GMT ### Author:nianhua ### class base64 : #init function def __init__ ( self , alphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ ): self . alphabet = alphabet def _EnInsideManage ( self , strlist ): strflag = temp = ord ( strlist [ 0 ]) 2 strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 0 ]) 3 ) 4 ) | ( ord ( strlist [ 1 ]) 4 ) strflag += self . alphabet [ temp ] temp = (( ord ( strlist [ 1 ]) 15 ) 2 ) | ( ord ( strlist [ 2 ]) 6 ) strflag += self . alphabet [ temp ] temp = ( ord ( strlist [ 2 ]) 63 ) strflag += self . alphabet [ temp ] return strflag def enbase64 ( self , charString ): encode = for i in range ( len ( charString ) // 3 ): encode += self . _EnInsideManage ( charString [ i * 3 : i * 3 + 3 ]) if len ( charString ) % 3 != 0 : if len ( charString ) % 3 == 1 : encode += self . _EnInsideManage ( charString [ - 1 :] + chr ( 0 ) + chr ( 0 ))[: 2 ] + == if len ( charString ) % 3 == 2 : encode += self . _EnInsideManage ( charString [ - 2 :] + chr ( 0 ))[: 3 ] + = return encode def TenToBin ( self , tenum ): binstr = for i in range ( 5 , - 1 , - 1 ): if 1 == ( tenum // ( 2 ** i )): binstr += 1 tenum = tenum % ( 2 ** i ) else : binstr += 0 return binstr def BinToStr ( self , strbin ): Turn the binary string to a ASCII string strten = for i in range ( len ( strbin ) // 8 ): num = 0 test = strbin [ i * 8 : i * 8 + 8 ] for j in range ( 8 ): num += int ( test [ j ]) * ( 2 ** ( 7 - j )) strten += chr ( num ) return strten def debase64 ( self , base64string ): binstr = for i in base64string : binstr += self . TenToBin ( self . alphabet . find ( i )) return self . BinToStr ( binstr ) def main (): newobj = base64 ( qazwsxedcrfvtgbyhnujmikolpQAZWSXEDCRFVTGBYHNUJMIKOLP-|0987654321 ) print ( newobj . debase64 ( newobj . enbase64 ( nianhua ))) if __main__ == __name__ : main ()","title":"\u81ea\u5b9a\u4e49\u7a0b\u5e8f\u89e3\u7801base64"},{"location":"EncodeDecode/base64/#_3","text":"\u5927\u591a\u6570\u7f16\u7801\u90fd\u662f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u7684\u8fc7\u7a0b\uff0c\u800cBase64\u7684\u7f16\u7801\u5219\u662f\u4ece\u4e8c\u8fdb\u5236\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u7684\u8fc7\u7a0b\u3002 Base64\u7f16\u7801\u4e3b\u8981\u7528\u5728\u4f20\u8f93\u3001\u5b58\u50a8\u3001\u8868\u793a\u4e8c\u8fdb\u5236\u7684\u8fc7\u7a0b/\u9886\u57df\uff0c\u4e0d\u80fd\u7b97\u52a0\u5bc6\u3002 \u4e2d\u6587\u6709\u591a\u79cd\u7f16\u7801(\u4f8b\u5982\uff1autf-8\u3001gb2312\u3001gbk...)\uff0c\u4f7f\u7528\u4e0d\u540c\u7f16\u7801\u540e\u5bf9\u5e94\u7684Base64\u7f16\u7801\u7684\u7ed3\u679c\u4e0d\u540c \u5b57\u7b26\u4e32 ---------- 0101...1011 ---------- VHW= ASCII\u7f16\u7801 Base64\u7f16\u7801 \u5b57\u7b26\u4e32 ---------- 0100...0010 ---------- MkL= GBK\u7f16\u7801 Base64\u7f16\u7801","title":"\u6269\u5c55"},{"location":"EncodeDecode/base64/#_4","text":"","title":"\u4f8b\u9898"},{"location":"EncodeDecode/base64/#_5","text":"\u4f8b\u9898 \u8bf7\u89e3\u7801\u8fd9\u4e32\u5b57\u7b26\u4e32\uff1aYXNkZg \u5982\u679c\u6211\u4eec\u76f4\u63a5\u9002\u7528Python\u7a0b\u5e8f\u89e3\u7801\u7684\u8bdd\uff0c\u4f8b\u5982\uff1a import base64 string = YXNkZg print base64 . b64decode ( string ) \u7a0b\u5e8f\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c Incorrect padding \u3002\u63d0\u793a\u586b\u5145\u4e0d\u6b63\u786e\uff0c\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u8865\u9f50padding\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u672c\u9879\u76ee\u4e2d\u7684 Base64\u7a0b\u5e8f","title":"\u7b49\u53f7\u6570\u91cf\u9519\u8bef\u5bfc\u81f4\u65e0\u6cd5\u89e3\u7801"},{"location":"EncodeDecode/base64/#_6","text":"\u5047\u8bbe\u6211\u4eec\u60f3\u9690\u533f\u7684\u6570\u636e\u4e3a'C'\uff0c\u5219\u4e8c\u8fdb\u5236\u4e3a01100011\uff0c\u56e0\u4e3a\u4e00\u6b21\u53ea\u80fd\u9690\u533f4\u4e2a\u6bd4\u7279\uff0c\u56e0\u6b64\u9700\u8981\u4e24\u4e32base64. -- \u9ad8\u56db\u4f4d -- 0110 -- YXNkZm== -- \u4f4e\u56db\u4f4d -- 0011 -- YXNkZj== \u8003\u8651\u4e00\u4e0b\u7f16\u7801\u540e\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u7b49\u53f7\uff0c\u90a3\u80fd\u9690\u85cf\u591a\u5c11bit\u5462\uff1f \u4f8b\u9898 \u4f60\u80fd\u4ece\u8fd9\u4e9bbase64\u4e2d\u627e\u5230\u4ec0\u4e48\uff1f IiIiCs== YXV0aDogYmlnZ2VyLndpbmcKdmVyc2lvbjogdjEuMAr= ZnVuY3Rpb246IGN2ZS0yMDE5LTA3MDggUE9DCm== dXNhZ2U6Cs== bm90ZTogVVNlIHBvYyB0byB0ZXN0LCAzMzg5X2hvc3RzIGlzIGlwIGFkZHJlc3MgbGlzdCwwNzA4ZGV0ZWN0b3IuZXhlIGlzIHBvYwr= IiIiCg== aW1wb3J0IHJhbmRvbQr= aW1wb3J0IHN0cmluZwq= cD0iIi5qb2luKFtyYW5kb20uY2hvaWNlKHN0cmluZy5hc2NpaV9sZXR0ZXJzKSBmb3IgaSBpbiByYW5nZSg1KV0pCn== cSA9IiIuam9pbihbcmFuZG9tLmNob2ljZShzdHJpbmcuYXNjaWlfbGV0dGVycytzdHJpbmcuaGV4ZGlnaXRzKSBmb3IgaSBpbiByYW5nZSg2KV0pCv== cHJpbnQgKHApCm== cHJpbnQgKHEpCt== ZmxhZz0wCr== Y291bnQ9MAo= d2hpbGUgVHJ1ZToKICAgIHVzZXJuYW1lPWlucHV0KCJpbnB1dCB5b3VyIG5hbWUiKQo= ICAgIGlmIHVzZXJuYW1lID09IHA6Cq== ICAgICAgICB3aGlsZSBUcnVlOgp= ICAgICAgICAgICAgcGFzc3dkPWlucHV0KCJpbnB1dCB5b3VyIHBhc3N3b3JkIikKICAgICAgICAgICAgaWYgcGFzc3dkID09IHE6Cj== ICAgICAgICAgICAgICAgIHByaW50KCJiaW5nbyIpCi== ICAgICAgICAgICAgICAgIGJyZWFrCs== ICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGZsYWcrPTEKICAgICAgICAgICAgaWYgZmxhZyA9PSAzOgr= ICAgICAgICAgICAgICAgIGJyZWFrCj== ICAgIGVsc2U6Cp== ICAgICAgICBjb3VudCs9MQr= ICAgIGlmIGNvdW50ID09IDM6Cg== ICAgICAgICBicmVhawq= ICAgIHByaW50ICdJIGxpa2UgVGhpcyB3b3JkIScKICAgIHBhc3MgCv== ICAgIHByaW50ICdzYXkgaGVsbG8nCiAgIK== \u6b64\u5904\u6211\u4eec\u4f7f\u7528\u7a0b\u5e8f\u6765\u5206\u6790\u9690\u533f\u7684\u6570\u636e: import base64 string = IiIiCs==YXV0aDogYmlnZ2VyLndpbmcKdmVyc2lvbjogdjEuMAr=ZnVuY3Rpb246IGN2ZS0yMDE5LTA3MDggUE9DCm==dXNhZ2U6Cs==bm90ZTogVVNlIHBvYyB0byB0ZXN0LCAzMzg5X2hvc3RzIGlzIGlwIGFkZHJlc3MgbGlzdCwwNzA4ZGV0ZWN0b3IuZXhlIGlzIHBvYwr=IiIiCg==aW1wb3J0IHJhbmRvbQr=aW1wb3J0IHN0cmluZwq=cD0iIi5qb2luKFtyYW5kb20uY2hvaWNlKHN0cmluZy5hc2NpaV9sZXR0ZXJzKSBmb3IgaSBpbiByYW5nZSg1KV0pCn==cSA9IiIuam9pbihbcmFuZG9tLmNob2ljZShzdHJpbmcuYXNjaWlfbGV0dGVycytzdHJpbmcuaGV4ZGlnaXRzKSBmb3IgaSBpbiByYW5nZSg2KV0pCv==cHJpbnQgKHApCm==cHJpbnQgKHEpCt==ZmxhZz0wCr==Y291bnQ9MAo=d2hpbGUgVHJ1ZToKICAgIHVzZXJuYW1lPWlucHV0KCJpbnB1dCB5b3VyIG5hbWUiKQo=ICAgIGlmIHVzZXJuYW1lID09IHA6Cq==ICAgICAgICB3aGlsZSBUcnVlOgp=ICAgICAgICAgICAgcGFzc3dkPWlucHV0KCJpbnB1dCB5b3VyIHBhc3N3b3JkIikKICAgICAgICAgICAgaWYgcGFzc3dkID09IHE6Cj==ICAgICAgICAgICAgICAgIHByaW50KCJiaW5nbyIpCi==ICAgICAgICAgICAgICAgIGJyZWFrCs==ICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGZsYWcrPTEKICAgICAgICAgICAgaWYgZmxhZyA9PSAzOgr=ICAgICAgICAgICAgICAgIGJyZWFrCj==ICAgIGVsc2U6Cp==ICAgICAgICBjb3VudCs9MQr=ICAgIGlmIGNvdW50ID09IDM6Cg==ICAgICAgICBicmVhawq=ICAgIHByaW50ICdJIGxpa2UgVGhpcyB3b3JkIScKICAgIHBhc3MgCv==ICAgIHByaW50ICdzYXkgaGVsbG8nCiAgIK== alphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ newstring = for i in range ( len ( string ) - 1 , - 1 , - 1 ): try : if string [ i ] == = and string [ i + 1 ] != = : newstring += \\n newstring += string [ i ] except : newstring += string [ i ] newstring = newstring [:: - 1 ] newstring = newstring . split ( \\n ) flag = binstr = for i in newstring : number = 0 if i [ - 1 :] == = : i = i [: - 1 ] number += 1 if i [ - 1 :] == = : i = i [: - 1 ] number += 1 if number == 1 : pass binstr += {:06b} . format ( alphabet . find ( i [ - 1 :]))[ 4 :] if number == 2 : binstr += {:06b} . format ( alphabet . find ( i [ - 1 :]))[ 2 :] print binstr for i in range ( len ( binstr ) // 7 ): flag += chr ( int ( binstr [ 7 * i : 7 * i + 7 ], 2 )) print flag","title":"\u4f7f\u7528\u7b49\u53f7\u9690\u533f\u4fe1\u606f"},{"location":"EncodeDecode/base64/#_7","text":"\u5bf9\u4e8e\u66f4\u6362\u4e86\u7f16\u7801\u8868\u7684\u9898\u76ee\uff0c\u4e00\u822c\u53ef\u4ee5\u4f7f\u7528\u5df2\u77e5\u660e\u6587\u653b\u51fb\uff0c\u5c3d\u91cf\u8fd8\u539f\u51fa\u7f16\u7801\u8868\u3002 \u4f7f\u7528\u672c\u9879\u76ee\u4e2d\u7684 Base64\u7a0b\u5e8f \u53ef\u81ea\u5b9a\u4e49base64\u7f16\u7801\u8868\u3002 \u4f8b\u9898 \u8bf7\u89e3\u5bc6\u8fd9\u6bb5\u5bc6\u6587:FqsCFkiVDSWMWByZGSWZKqPUAPbRGdzb \u63d0\u793a\uff1a \u8fd9\u662f\u6cc4\u6f0f\u7684\u4e00\u6bb5\u660e\u6587: !QAZ@WSX#EDC$RFV%TGB^YHN UJM*IK (OL )P:?_{\"+}|`1qaz2wsx3edc4rfv5tgb6yhn7ujm8ik,9ol.0p;/-['=]\\The problem is that programs_width is a list. programs_width = list(). If none of these if statements if prog_width == '342' When you read an English book, you often come across new words. You might try to guess what the words mean from the words you know, but when you cannot guess the meanings of new words at all, what should you do? \u548c\u5bf9\u5e94\u7684\u5bc6\u6587: 8P51AN1SOhXByOy39596PVPOyg9LAOCE9MP+IUr9UfaeIgan+P0xRhbc8VibZ60sJA5xQwKfL3WMF6QgJqFjWSywDBFzG6lkKAriE6My/3MpH2laJ3up/PuwRPhJP6CM871dHj9uFAgXGSQXK6CCK21aJqbwJq5iJhbkGAygG21rJd1C86srJkTo871dHjKdDAhfSkKrF7ye83gXH6MfK2Xr/V19FV1oHjzM86bq87yeFSWM86Mq87WgDSyMHAPoK7QXGADXJ79pFhbkGAygG20bRU0wQfTd9d1SG6Po87MpKU1dFA5N865o84PoFjsrJjXXDqbpGdaXLAbh86bqK6Po86WpHAOXDAWdHkWf86zMKd1kHk9NJdlXAAbh86hrFjCg87ydLU1gHd1wKAPfJd1kG65g87yeFU1kHk9NJd1iFA5o86FdHjgXK6CM87KpJqyf87MpKU1yHqbk/21VKSTXKjCMHV1zHkOXDj5oHqbg86KhFSWf87yeFU1iFA5oGAzwJd1pFV1oFSJXKjbdF7QXDSTXDAsu/21kG65g87WeHkPuF21zHkOXF6vm \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7a0b\u5e8f\u6765\u5904\u7406\u8fd9\u9053\u9898\u76ee\uff1a from NHbase64 import * nvarry = [ 0 for i in range ( 64 )] binstr = string = !QAZ@WSX#EDC$RFV%TGB^YHN UJM*IK (OL )P:?_{ +}|`1qaz2wsx3edc4rfv5tgb6yhn7ujm8ik,9ol.0p;/-[ =]\\The problem is that programs_width is a list. programs_width = list(). If none of these if statements if prog_width == 342 When you read an English book, you often come across new words. You might try to guess what the words mean from the words you know, but when you cannot guess the meanings of new words at all, what should you do? basest = 8P51AN1SOhXByOy39596PVPOyg9LAOCE9MP+IUr9UfaeIgan+P0xRhbc8VibZ60sJA5xQwKfL3WMF6QgJqFjWSywDBFzG6lkKAriE6My/3MpH2laJ3up/PuwRPhJP6CM871dHj9uFAgXGSQXK6CCK21aJqbwJq5iJhbkGAygG21rJd1C86srJkTo871dHjKdDAhfSkKrF7ye83gXH6MfK2Xr/V19FV1oHjzM86bq87yeFSWM86Mq87WgDSyMHAPoK7QXGADXJ79pFhbkGAygG20bRU0wQfTd9d1SG6Po87MpKU1dFA5N865o84PoFjsrJjXXDqbpGdaXLAbh86bqK6Po86WpHAOXDAWdHkWf86zMKd1kHk9NJdlXAAbh86hrFjCg87ydLU1gHd1wKAPfJd1kG65g87yeFU1kHk9NJd1iFA5o86FdHjgXK6CM87KpJqyf87MpKU1yHqbk/21VKSTXKjCMHV1zHkOXDj5oHqbg86KhFSWf87yeFU1iFA5oGAzwJd1pFV1oFSJXKjbdF7QXDSTXDAsu/21kG65g87WeHkPuF21zHkOXF6vm for i in string : binstr += {:08b} . format ( ord ( i )) for i in range ( len ( binstr ) // 6 ): nvarry [ int ( binstr [ 6 * i : 6 * i + 6 ], 2 )] = basest [ i ] password = for i in nvarry : password += i newobj = base64 ( alphabet = password ) print ( newobj . debase64 ( FqsCFkiVDSWMWByZGSWZKqPUAPbRGdzb )) \u9996\u5148\u6211\u4eec\u901a\u8fc7\u660e\u6587\u548c\u5bc6\u6587\u7684\u5bf9\u5e94\uff0c\u4e00\u4e00 \u8ba1\u7b97\u51faBase64\u7684\u7f16\u7801\u89c4\u5219 \uff0c\u968f\u540e\u4f7f\u7528 NHbase64 \u6a21\u5757\uff0c\u624b\u52a8\u6307\u5b9a\u7f16\u7801\u8868\uff0c\u5bf9\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\u3002 \u63d0\u793a \u53e6\u4e00\u79cd\u601d\u8def\uff1a \u5728\u5f97\u51fa\u7f16\u7801\u8868\u4e4b\u540e\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u901a\u8fc7\u65b0\u65e7\u7f16\u7801\u8868\u6765\u5c06\u5bc6\u6587\u8f6c\u6362\u4e3a\u6b63\u5e38\u7684Base64\u7f16\u7801\u6570\u636e\u5462\uff1f","title":"\u5bf9\u7f16\u7801\u8868\u8fdb\u884c\u53d8\u6362"},{"location":"EncodeDecode/introduction/","text":"\u7f16\u7801\u662f\u4fe1\u606f\u4ece\u4e00\u79cd\u5f62\u5f0f\u6216\u683c\u5f0f\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u5f62\u5f0f\u7684\u8fc7\u7a0b\uff0c\u7528\u9884\u5148\u89c4\u5b9a\u7684\u65b9\u6cd5\u5c06\u6587\u5b57\u3001\u6570\u5b57\u6216\u5176\u5b83\u5bf9\u8c61\u7f16\u6210\u6570\u7801\uff0c\u6216\u5c06\u4fe1\u606f\u3001\u6570\u636e\u8f6c\u6362\u6210\u89c4\u5b9a\u7684\u7535\u8109\u51b2\u4fe1\u53f7\u3002\u7f16\u7801\u5728\u7535\u5b50\u8ba1\u7b97\u673a\u3001\u7535\u89c6\u3001\u9065\u63a7\u548c\u901a\u8baf\u7b49\u65b9\u9762\u5e7f\u6cdb\u4f7f\u7528\u3002 \u89e3\u7801\uff0c\u662f\u7f16\u7801\u7684\u9006\u8fc7\u7a0b\u3002 \u4e3a\u4ec0\u4e48\u8981\u7f16\u7801\uff1a \u4eba\u7c7b\u8bed\u8a00 -- Hello World \u8ba1\u7b97\u673a\u5b58\u50a8 -- ??????????? -- 01010100....1110101010 \u7f16\u7801\uff1a\u5c31\u662f\u4eba\u7c7b\u6587\u5b57\u52300\u30011\u4e8c\u8fdb\u5236\u7684\u6620\u5c04\uff0c\u53cd\u4e4b\u5219\u53eb\u89e3\u7801\u3002 \u6240\u4ee5: Hello world -- 01001000...0100 \u7f16\u7801 Hello world -- 01001000...0100 \u89e3\u7801 \u72ed\u4e49\u4e0a\u53bb\u7406\u89e3\uff1a \u7f16\u7801\uff1a\u7f16\u6210\u8ba1\u7b97\u673a\u80fd\u591f\u8bc6\u522b\u7684\u3001\u89e3\u7801\uff1a\u89e3\u7801\u662f\u4e3a\u4e86\u4eba\u7c7b\u80fd\u8bfb\u61c2","title":"\u7b80\u4ecb"},{"location":"EncodeDecode/welcome/","text":"\u6b22\u8fce\u8865\u5145 \u7531\u4e8e\u672c\u4eba\u6c34\u5e73\u6709\u9650\uff0c\u5728\u7f16\u8f91\u7684\u8fc7\u7a0b\u4e2d\u96be\u514d\u6709\u5931\u8bef\u3001\u9057\u6f0f\u4e4b\u5904\uff0c\u6b22\u8fce\u5927\u5bb6\u8865\u5145\u3002 \u53c2\u8003\u8d44\u6599\uff1a http://www.ab126.com/goju/1711.html https://www.qqxiuzi.cn/bianma/base64.htm https://en.wikipedia.org/wiki/Base64","title":"\u6b22\u8fce\u8865\u5145"},{"location":"EncodeDecode/image/","text":"","title":"Home"}]}